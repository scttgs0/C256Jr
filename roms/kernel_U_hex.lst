
; 64tass Turbo Assembler Macro V1.56.2625? listing file
; 64tass --m65816 -D TARGET=2 -D TARGET_SYS=2 --long-address --flat --intel-hex -o kernel_U.hex --list kernel_U_hex.lst --labels=kernel_U_hex.lbl src/kernel.asm
; Sat Jun 26 11:05:27 2021

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=2						TARGET=2
=2						TARGET_SYS=2

;******  Processing input file: src/kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$180000					  START_OF_FLASH := $180000                   ; The Foenix U Flash starts at $180000
=$190400					  START_OF_KERNEL := $190400                  ; The kernel itself starts at $190400
=$1a0000					  START_OF_BASIC := $1A0000                   ; The BASIC flash code starts at $1A0000
=$1b0000					  START_OF_CREDITS := $1B0000                 ; The credits screen starts at $1B0000
=$1e0000					  START_OF_SPLASH := $1E0000                  ; SplashScreen Code and Data $3E0000
=$1f0000					  START_OF_FONT := $1F0000                    ; The font starts at $3F0000

;******  Processing file: src/Includes/macros_inc.asm


;******  Return to file: src/kernel.asm


;******  Processing file: src/Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1b						CHAR_ESC = $1B      ; ESC
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$3b						CHAR_F1 = $3B       ; Function key scan codes
=$3c						CHAR_F2 = $3C
=$3d						CHAR_F3 = $3D
=$3e						CHAR_F4 = $3E
=$3f						CHAR_F5 = $3F
=$40						CHAR_F6 = $40
=$41						CHAR_F7 = $41
=$42						CHAR_F8 = $42
=$43						CHAR_F9 = $43
=$44						CHAR_F10 = $44
=$57						CHAR_F11 = $57
=$58						CHAR_F12 = $58
=$39						SCAN_SP = $39
=$1c						SCAN_CR = $1C

;******  Return to file: src/kernel.asm


;******  Processing file: src/Includes/simulator_inc.asm


;******  Return to file: src/kernel.asm


;******  Processing file: src/Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					COLORBEGIN       = $000022 ;3 Byte, address of the color screen
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000063					EVID_COLS_VISIBLE     = $000063 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000065					EVID_COLS_PER_LINE    = $000065 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000067					EVID_LINES_VISIBLE    = $000067 ;2 Bytes The number of rows visible on the screen. Default=25
=$000069					EVID_LINES_MAX        = $000069 ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006b					EVID_CURSORPOS        = $00006B ;3 Bytes The next character written to the screen will be written in this location.
=$00006e					EVID_CURSORX          = $00006E ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000070					EVID_CURSORY          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURCOLOR         = $000072 ;1 Byte Color of next character to be printed to the screen.
=$000073					EVID_COLORBEGIN       = $000073 ;
=$000076					EVID_COLORPOS         = $000076 ;3 Byte address of cursor's position in the color matrix
=$000079					EVID_TMPPTR1          = $000079 ; 4 byte temporary pointer
=$00007d					EVID_PRESENT          = $00007D ;1 Byte: is the EVID present?
=$000098					TEXT_SRC_PTR_L   = $000098
=$00009a					TEXT_SRC_PTR_H   = $00009A
=$00009c					TEXT_DST_PTR_L   = $00009C
=$00009e					TEXT_DST_PTR_H   = $00009E
=$0000a0					TEXT_INDEX       = $0000A0
=$0000a0					MOD_SELECT_L     = $0000A0
=$0000a2					MOD_SELECT_H     = $0000A2
=$0000a2					TEXT_CURSOR_X    = $0000A2
=$0000a4					TEXT_CURSOR_Y    = $0000A4
=$0000a6					LINE_INDEX       = $0000A6
=$0000a8					COLOR_DST_PTR_L  = $0000A8
=$0000aa					COLOR_DST_PTR_H  = $0000AA
=$0000b0					MODEL            = $0000B0
=$0000e0					MOUSE_IDX        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000e6					MOUSE_BUTTONS    = $0000E6
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$0000f0					INTERRUPT_STATE  = $0000F0      ; 1 byte: current state of the boot menu color cycler
=$0000f1					INTERRUPT_COUNT  = $0000F1      ; 1 byte: counter for the boot menu color cycler
=$0000f2					IRQ_COLOR_CHOICE = $0000F2      ; 1 byte: index of the color to cycle in the boot menu
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000370					DOS_BLOCK_SIZE   = $000370      ; 4 bytes - the size of a block to load (in bytes)
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KBD_VARS = $000F00
=$000f00					KBD_STATE           = $000F00   ; 1 byte - The state of the keyboard controller state machine
=$000f01					KBD_SC_BUF          = $000F01   ; 16 bytes - Buffer for keyboard scancodes read
=$000f11					KBD_SC_HEAD         = $000F11   ; 1 byte - Index of the first scancode cell to write to
=$000f12					KBD_CHAR_BUF        = $000F12   ; 16 bytes - Character buffer
=$000f22					KBD_CHAR_HEAD       = $000F22   ; 1 byte - Number of characters in the character buffer
=$000f23					KBD_MODIFIERS       = $000F23   ; 1 byte - State of the modifier keys
=$000f24					KBD_LOCKS           = $000F24   ; 1 byte - State of the lock keys: Caps, Num, Scroll
=$000f25					KBD_TBL_UNMOD       = $000F25   ; 4 bytes - Pointer to the scan code translation table for unmodified keys
=$000f29					KBD_TBL_SHIFT       = $000F29   ; 4 bytes - Pointer to the scan code translation table for shifted keys
=$000f2d					KBD_TBL_CTRL        = $000F2D   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL
=$000f31					KBD_TBL_LOCK        = $000F31   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
=$000f35					KBD_TBL_LOCK_SHIFT  = $000F35   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
=$000f39					KBD_TBL_CTRL_SHIFT  = $000F39   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL and SHIFT
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00					    ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00					    HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10					    HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20					    HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30					    HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40					    HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60					    HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80					    Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0					    VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0					    JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4					    VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6					    VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8					    VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea					    VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec					    VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee					    VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0					    RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4					    VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6					    VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8					    VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa					    VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc					    VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe					    VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000					    VECTORS_END      = $010000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src/kernel.asm


;******  Processing file: src/Includes/page_00_data.asm

>180000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>180003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>180005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>180007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>180009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>18000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>18000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>180013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>180014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>180016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src/kernel.asm


;******  Processing file: src/Includes/page_00_code.asm

.ff00		18		clc		RHRESET         CLC
.ff01		fb		xce		                XCE
.ff02		5c 00 10 00	jmp $001000	                JML BOOT
.ff10						RHCOP
.ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12		8b		phb		                PHB
.ff13		0b		phd		                PHD
.ff14		48		pha		                PHA
.ff15		da		phx		                PHX
.ff16		5a		phy		                PHY
.ff17		5c 08 10 00	jmp $001008	                JML BREAK
.ff20						RHBRK
.ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22		8b		phb		                PHB
.ff23		0b		phd		                PHD
.ff24		48		pha		                PHA
.ff25		da		phx		                PHX
.ff26		5a		phy		                PHY
.ff27		5c 08 10 00	jmp $001008	                JML BREAK
.ff30						RHABORT
.ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32		8b		phb		                PHB
.ff33		0b		phd		                PHD
.ff34		48		pha		                PHA
.ff35		da		phx		                PHX
.ff36		5a		phy		                PHY
.ff37		5c 08 10 00	jmp $001008	                JML BREAK
.ff40						 RHNMI
.ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42		8b		phb		                PHB
.ff43		0b		phd		                PHD
.ff44		48		pha		                PHA
.ff45		da		phx		                PHX
.ff46		5a		phy		                PHY
.ff47		22 96 19 18	jsl $181996	                JSL NMI_HANDLER
.ff4b		7a		ply		                PLY
.ff4c		fa		plx		                PLX
.ff4d		68		pla		                PLA
.ff4e		2b		pld		                PLD
.ff4f		ab		plb		                PLB
.ff50		40		rti		                RTI
.ff60						RHIRQ
.ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62		8b		phb		                PHB
.ff63		0b		phd		                PHD
.ff64		48		pha		                PHA
.ff65		da		phx		                PHX
.ff66		5a		phy		                PHY
.ff67		22 c0 17 18	jsl $1817c0	                JSL IRQ_HANDLER
.ff6b		7a		ply		                PLY
.ff6c		fa		plx		                PLX
.ff6d		68		pla		                PLA
.ff6e		2b		pld		                PLD
.ff6f		ab		plb		                PLB
.ff70		40		rti		                RTI
.ffe0		5c 04 00 1a	jmp $1a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec		00 00				                .word $0000    ; FFEC
>ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0		5c 7f 06 19	jmp $19067f	RRETURN         JML IRETURN
>fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src/kernel.asm


;******  Processing file: src/Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src/kernel.asm


;******  Processing file: src/Includes/fdc_inc.asm

=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src/kernel.asm


;******  Processing file: src/Includes/basic_inc.asm

=$1a0000					    BASIC = $1A0000
=1703940					    MONITOR = BASIC + 4

;******  Return to file: src/kernel.asm


;******  Processing file: src/kernel_jumptable.asm

.181000	1000	5c 00 04 19	jmp $190400	BOOT            JML IBOOT
.181004	1004	5c 8a 05 19	jmp $19058a	RESTORE         JML IRESTORE
.181008	1008	5c 1e 06 19	jmp $19061e	BREAK           JML IBREAK
.18100c	100c	5c 65 06 19	jmp $190665	READY           JML IREADY
.181010	1010	5c 9a 10 19	jmp $19109a	SCINIT          JML ISCINIT
.181014	1014	5c 9b 10 19	jmp $19109b	IOINIT          JML IIOINIT
.181018	1018	5c 21 07 19	jmp $190721	PUTC            JML IPUTC
.18101c	101c	5c 0a 07 19	jmp $19070a	PUTS            JML IPUTS
.181020	1020	5c c5 07 19	jmp $1907c5	PUTB            JML IPUTB
.181024	1024	5c 5f 3b 19	jmp $193b5f	PUTBLOCK        JML IPUTBLOCK
.181028	1028	5c 5a 6f 19	jmp $196f5a	GETSCANCODE     JML KBD_GET_SCANCODE    ; Get the next 8-bit scan code from the keyboard: A = 0 if no scancode present, contains the scancode otherwise
.18102c	102c	5c ea 6f 19	jmp $196fea	GETLOCKS        JML KBD_GETLOCKS        ; Get the state of the lock keys on the keyboard
.181030	1030	5c 9e 10 19	jmp $19109e	OPEN            JML IOPEN
.181034	1034	5c 9f 10 19	jmp $19109f	CLOSE           JML ICLOSE
.181038	1038	5c 80 06 19	jmp $190680	SETIN           JML ISETIN
.18103c	103c	5c 89 06 19	jmp $190689	SETOUT          JML ISETOUT
.181040	1040	5c a0 10 19	jmp $1910a0	GETB            JML IGETB
.181044	1044	5c fc 3a 19	jmp $193afc	GETBLOCK        JML IGETBLOCK
.181048	1048	5c ce 06 19	jmp $1906ce	GETCH           JML IGETCH
.18104c	104c	5c 9b 06 19	jmp $19069b	GETCHW          JML IGETCHW
.181050	1050	5c 92 06 19	jmp $190692	GETCHE          JML IGETCHE
.181054	1054	5c a1 10 19	jmp $1910a1	GETS            JML IGETS
.181058	1058	5c a2 10 19	jmp $1910a2	GETLINE         JML IGETLINE
.18105c	105c	5c a3 10 19	jmp $1910a3	GETFIELD        JML IGETFIELD
.181060	1060	5c a4 10 19	jmp $1910a4	TRIM            JML ITRIM
.181064	1064	5c a5 10 19	jmp $1910a5	PRINTC          JML IPRINTC
.181068	1068	5c a6 10 19	jmp $1910a6	PRINTS          JML IPRINTS
.18106c	106c	5c c6 07 19	jmp $1907c6	PRINTCR         JML IPRINTCR
.181070	1070	5c a7 10 19	jmp $1910a7	PRINTF          JML IPRINTF
.181074	1074	5c a8 10 19	jmp $1910a8	PRINTI          JML IPRINTI
.181078	1078	5c 7a 08 19	jmp $19087a	PRINTH          JML IPRINTH
.18107c	107c	5c a9 10 19	jmp $1910a9	PRINTAI         JML IPRINTAI
.181080	1080	5c 97 08 19	jmp $190897	PRINTAH         JML IPRINTAH
.181084	1084	5c 5e 08 19	jmp $19085e	LOCATE          JML ILOCATE
.181088	1088	5c aa 10 19	jmp $1910aa	PUSHKEY         JML IPUSHKEY
.18108c	108c	5c ab 10 19	jmp $1910ab	PUSHKEYS        JML IPUSHKEYS
.181090	1090	5c 26 08 19	jmp $190826	CSRRIGHT        JML ICSRRIGHT
.181094	1094	5c 35 08 19	jmp $190835	CSRLEFT         JML ICSRLEFT
.181098	1098	5c 44 08 19	jmp $190844	CSRUP           JML ICSRUP
.18109c	109c	5c 53 08 19	jmp $190853	CSRDOWN         JML ICSRDOWN
.1810a0	10a0	5c 15 08 19	jmp $190815	CSRHOME         JML ICSRHOME
.1810a4	10a4	5c 69 08 19	jmp $190869	SCROLLUP        JML ISCROLLUP
.1810a8	10a8	5c e5 08 19	jmp $1908e5	CLRSCREEN       JML ICLRSCREEN
.1810ac	10ac	5c 90 09 19	jmp $190990	INITCHLUT	    JML IINITCHLUT
.1810b0	10b0	5c b9 0b 19	jmp $190bb9	INITSUPERIO	    JML IINITSUPERIO
.1810b4	10b4	5c cb 6c 19	jmp $196ccb	INITKEYBOARD    JML IINITKEYBOARD
.1810b8	10b8	5c 00 78 19	jmp $197800	INITMOUSE       JML IINITMOUSE
.1810bc	10bc	5c 9a 0b 19	jmp $190b9a	INITCURSOR      JML IINITCURSOR
.1810c0	10c0	5c 62 0b 19	jmp $190b62	INITFONTSET     JML IINITFONTSET
.1810c4	10c4	5c 9d 09 19	jmp $19099d	INITGAMMATABLE  JML IINITGAMMATABLE
.1810c8	10c8	5c bd 09 19	jmp $1909bd	INITALLLUT      JML IINITALLLUT
.1810cc	10cc	5c 83 0a 19	jmp $190a83	INITVKYTXTMODE  JML IINITVKYTXTMODE
.1810d0	10d0	5c 06 0b 19	jmp $190b06	INITVKYGRPMODE  JML IINITVKYGRPMODE
.1810d4	10d4	5c 61 0b 19	jmp $190b61	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810d8	10d8	5c 61 0b 19	jmp $190b61	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810dc	10dc	5c d3 0c 19	jmp $190cd3	INITCODEC       JML IINITCODEC
.1810e0	10e0	5c 62 0d 19	jmp $190d62	RESETCODEC      JML IRESETCODEC
.1810e4	10e4	5c d0 0d 19	jmp $190dd0	BMP_PARSER      JML IBMP_PARSER
.1810e8	10e8	5c 85 0d 19	jmp $190d85	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.1810ec	10ec	5c 28 31 19	jmp $193128	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.1810f0	10f0	5c d0 4b 19	jmp $194bd0	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.1810f4	10f4	5c 63 4c 19	jmp $194c63	F_CREATE        JML IF_CREATE       ; create a new file
.1810f8	10f8	5c 9d 4c 19	jmp $194c9d	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.1810fc	10fc	5c 36 4d 19	jmp $194d36	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.181100	1100	5c d1 4c 19	jmp $194cd1	F_READ          JML IF_READ         ; read the next cluster from the file
.181104	1104	5c e0 4d 19	jmp $194de0	F_DELETE        JML IF_DELETE       ; delete a file / directory
.181108	1108	5c a2 4d 19	jmp $194da2	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.18110c	110c	5c dc 4d 19	jmp $194ddc	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.181110	1110	5c 79 4e 19	jmp $194e79	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.181114	1114	5c a0 4e 19	jmp $194ea0	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.181118	1118	5c a4 4e 19	jmp $194ea4	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.18111c	111c	5c ff 51 19	jmp $1951ff	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.181120	1120	5c d2 3a 19	jmp $193ad2	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.181124	1124	5c 98 52 19	jmp $195298	F_RUN           JML IF_RUN          ; Load an run a binary file
.181128	1128	5c fd 3e 19	jmp $193efd	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.18112c	112c	5c 01 0b 19	jmp $190b01	SETSIZES        JML ISETSIZES       ; Set the size information in the kernel's text screen routines based on the screen configuration
.181130	1130	5c e7 53 19	jmp $1953e7	F_COPY          JML IF_COPY         ; Copy a file
.181134	1134	5c 31 53 19	jmp $195331	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.181138	1138	5c 85 53 19	jmp $195385	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.18113c	113c	5c 95 6f 19	jmp $196f95	TESTBREAK       JML KBD_TEST_BREAK  ; Check if BREAK was pressed recently by the user (C is set if true, clear if false)
.181140	1140	5c ce 71 19	jmp $1971ce	SETTABLE        JML KBD_SETTABLE    ; Set the keyboard scan code -> character translation tables (B:X points to the new tables)
.181144	1144	5c 3e 0b 19	jmp $190b3e	READVRAM        JML IREADVRAM       ; Read a byte from video RAM at B:X
.181148	1148	5c 6c 17 18	jmp $18176c	SETHANDLER      JML ISETHANDLER     ; Set the handler for the interrupt # in A to the FAR routine at Y:X
.18114c	114c	5c da 0f 19	jmp $190fda	DELAY           JML IDELAY          ; Wait at least Y:X ticks of the system clock.
=$001700					VEC_INT_START = *                           ; Label for the start of the IRQ vectors
.181700	1700	5c 91 5f 19	jmp $195f91	VEC_INT00_SOF   JML FDC_TIME_HANDLE         ; IRQ 0, 0 --- Start Of Frame interrupt
.181704	1704	5c ae 10 19	jmp $1910ae	VEC_INT01_SOL   JML IRQHANDLESTUB           ; IRQ 0, 1 --- Start Of Line interrupt
.181708	1708	5c ae 10 19	jmp $1910ae	VEC_INT02_TMR0  JML IRQHANDLESTUB           ; IRQ 0, 2 --- Timer 0 interrupt
.18170c	170c	5c ae 10 19	jmp $1910ae	VEC_INT03_TMR1  JML IRQHANDLESTUB           ; IRQ 0, 3 --- Timer 1 interrupt
.181710	1710	5c ae 10 19	jmp $1910ae	VEC_INT04_TMR2  JML IRQHANDLESTUB           ; IRQ 0, 4 --- Timer 2 interrupt
.181714	1714	5c ae 10 19	jmp $1910ae	VEC_INT05_RTC   JML IRQHANDLESTUB           ; IRQ 0, 5 --- Real Time Clock interrupt
.181718	1718	5c ae 10 19	jmp $1910ae	VEC_INT06_FDC   JML IRQHANDLESTUB           ; IRQ 0, 6 --- Floppy Drive Controller interrupt
.18171c	171c	5c 1b 79 19	jmp $19791b	VEC_INT07_MOUSE JML MOUSE_INTERRUPT         ; IRQ 0, 7 --- Mouse interrupt
.181720	1720	5c 08 6e 19	jmp $196e08	VEC_INT10_KBD   JML KBD_PROCESS_BYTE        ; IRQ 1, 0 --- Keyboard interrupt
.181724	1724	5c ae 10 19	jmp $1910ae	VEC_INT11_COL0  JML IRQHANDLESTUB           ; IRQ 1, 1 --- VICKY_II (INT2) Sprite Collision
.181728	1728	5c ae 10 19	jmp $1910ae	VEC_INT12_COL1  JML IRQHANDLESTUB           ; IRQ 1, 2 --- VICKY_II (INT3) Bitmap Collision
.18172c	172c	5c ae 10 19	jmp $1910ae	VEC_INT13_COM2  JML IRQHANDLESTUB           ; IRQ 1, 3 --- Serial port #2 interrupt
.181730	1730	5c ae 10 19	jmp $1910ae	VEC_INT14_COM1  JML IRQHANDLESTUB           ; IRQ 1, 4 --- Serial port #1 interrupt
.181734	1734	5c ae 10 19	jmp $1910ae	VEC_INT15_MIDI  JML IRQHANDLESTUB           ; IRQ 1, 5 --- MIDI controller interrupt
.181738	1738	5c ae 10 19	jmp $1910ae	VEC_INT16_LPT   JML IRQHANDLESTUB           ; IRQ 1, 6 --- Parallel port interrupt
.18173c	173c	5c ae 10 19	jmp $1910ae	VEC_INT17_SDC   JML IRQHANDLESTUB           ; IRQ 1, 7 --- SD Card Controller interrupt (CH376S???)
.181740	1740	5c ae 10 19	jmp $1910ae	VEC_INT20_OPL   JML IRQHANDLESTUB           ; IRQ 2, 0 --- OPL3
.181744	1744	5c ae 10 19	jmp $1910ae	VEC_INT21_GABE0 JML IRQHANDLESTUB           ; IRQ 2, 1 --- GABE (INT0) - TBD
.181748	1748	5c ae 10 19	jmp $1910ae	VEC_INT22_GABE1 JML IRQHANDLESTUB           ; IRQ 2, 2 --- GABE (INT1) - TBD
.18174c	174c	5c ae 10 19	jmp $1910ae	VEC_INT23_VDMA  JML IRQHANDLESTUB           ; IRQ 2, 3 --- VICKY_II (INT4) - VDMA Interrupt
.181750	1750	5c ae 10 19	jmp $1910ae	VEC_INT24_COL2  JML IRQHANDLESTUB           ; IRQ 2, 4 --- VICKY_II (INT5) Tile Collision
.181754	1754	5c ae 10 19	jmp $1910ae	VEC_INT25_GABE2 JML IRQHANDLESTUB           ; IRQ 2, 5 --- GABE (INT2) - TBD
.181758	1758	5c ae 10 19	jmp $1910ae	VEC_INT26_EXT   JML IRQHANDLESTUB           ; IRQ 2, 6 --- External Expansion
.18175c	175c	5c ae 10 19	jmp $1910ae	VEC_INT17_SDINS JML IRQHANDLESTUB           ; IRQ 2, 7 --- SDCARD Insertion
.181760	1760	5c ae 10 19	jmp $1910ae	VEC_INT30_OPN2  JML IRQHANDLESTUB           ; IRQ 3, 0 --- OPN2
.181764	1764	5c ae 10 19	jmp $1910ae	VEC_INT31_OPM   JML IRQHANDLESTUB           ; IRQ 3, 1 --- OPM
.181768	1768	5c ae 10 19	jmp $1910ae	VEC_INT32_IDE   JML IRQHANDLESTUB           ; IRQ 3, 2 --- HDD IDE Interrupt

;******  Return to file: src/kernel.asm


;******  Processing file: src/Interrupt_Handler.asm

.18176c						ISETHANDLER
.18176c		8b		phb		                PHB
.18176d		08		php		                PHP
.18176e		48		pha		                PHA             ; begin setdbr macro
.18176f		08		php		                PHP
.181770		e2 20		sep #$20	                SEP #$20        ; set A short
.181772		a9 00		lda #$00	                LDA #0
.181774		48		pha		                PHA
.181775		ab		plb		                PLB
.181776		28		plp		                PLP
.181777		68		pla		                PLA             ; end setdbr macro
.181778		e2 20		sep #$20	                SEP #$20        ; set A short
.18177a		c2 10		rep #$10	                REP #$10        ; set X long
.18177c		48		pha		                PHA                     ; Save the interrupt number
.18177d		5a		phy		                PHY                     ; Save the handler's bank
.18177e		da		phx		                PHX                     ; Save the handler's address
.18177f		f4 00 00	pea #$0000	                PEA #0                  ; Make room for the offset to the vector
.181782						LOCALS
>0001						l_vector        .word ?                 ; Address of vector in bank 0
>0003						l_handler       .dword ?                ; The address of the handler (only 24 bits, really)
>0007						l_number        .byte ?                 ; The interrupt number
.181782		29 30		and #$30	                AND #$30                ; Isolate the block #
.181784		0a		asl a		                ASL A                   ; Multiply by 2 to get the offset to the first vector of the block
.181785		83 01		sta $01,s	                STA l_vector
.181787		a3 07		lda $07,s	                LDA l_number            ; Get the number bank
.181789		29 07		and #$07	                AND #$07                ; Isolate the interrupt number
.18178b		0a		asl a		                ASL A                   ; Multiply by four to get the first byte of that interrupt's vector
.18178c		0a		asl a		                ASL A
.18178d		03 01		ora $01,s	                ORA l_vector            ; Add it to the offset to the block
.18178f		83 01		sta $01,s	                STA l_vector            ; Store back to the vector address
.181791		18		clc		                CLC                     ; Add the address of the start of the interrupt vector table
.181792		a9 00		lda #$00	                LDA #<VEC_INT_START
.181794		63 01		adc $01,s	                ADC l_vector
.181796		83 01		sta $01,s	                STA l_vector
.181798		a9 17		lda #$17	                LDA #>VEC_INT_START
.18179a		63 02		adc $02,s	                ADC l_vector+1
.18179c		83 02		sta $02,s	                STA l_vector+1
.18179e		78		sei		                SEI                     ; Disable the interrupts while we update the vector
.18179f		a0 00 00	ldy #$0000	                LDY #0
.1817a2		a9 5c		lda #$5c	                LDA #$5C                ; Opcode for JML
.1817a4		93 01		sta ($01,s),y	                STA (l_vector),Y        ; Make sure the first byte is a JML instruction
.1817a6		c8		iny		                INY                     ; Move to the low byte of the vector address
.1817a7		a3 03		lda $03,s	                LDA l_handler
.1817a9		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817ab		c8		iny		                INY                     ; Move to the high byte of the vector address
.1817ac		a3 04		lda $04,s	                LDA l_handler+1
.1817ae		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817b0		c8		iny		                INY                     ; Move to the bank of the vector address
.1817b1		a3 05		lda $05,s	                LDA l_handler+2
.1817b3		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817b5		c2 20		rep #$20	                REP #$20        ; set A long
.1817b7		18		clc		                CLC                     ; Clean up the locals off the stack
.1817b8		3b		tsc		                TSC
.1817b9		69 07 00	adc #$0007	                ADC #SIZE(LOCALS)
.1817bc		1b		tcs		                TCS
.1817bd		28		plp		                PLP
.1817be		ab		plb		                PLB
.1817bf		6b		rtl		                RTL
.1817c0						IRQ_HANDLER
.1817c0		08		php		                PHP
.1817c1		e2 20		sep #$20	                SEP #$20        ; set A short
.1817c3		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0     ; Get the block 0 pending interrupts
.1817c7		d0 03		bne $1817cc	                BNE process_reg0
.1817c9		82 80 00	brl $18184c	                BRL CHECK_PENDING_REG1      ; If nothing: skip to block 1
.1817cc						process_reg0
.1817cc		89 01		bit #$01	                BIT #FNX0_INT00_SOF           ; Check to see if the bit is set
.1817ce		f0 0c		beq $1817dc	                BEQ continue            ; If not: skip the rest of this macro
.1817d0		29 01		and #$01	                AND #FNX0_INT00_SOF           ; Mask out all other pending interrupts
.1817d2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817d6		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF            ; And call its handler
.1817da		e2 20		sep #$20	                SEP #$20        ; set A short
.1817dc						continue
.1817dc		89 02		bit #$02	                BIT #FNX0_INT01_SOL           ; Check to see if the bit is set
.1817de		f0 0c		beq $1817ec	                BEQ continue            ; If not: skip the rest of this macro
.1817e0		29 02		and #$02	                AND #FNX0_INT01_SOL           ; Mask out all other pending interrupts
.1817e2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817e6		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL            ; And call its handler
.1817ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1817ec						continue
.1817ec		89 04		bit #$04	                BIT #FNX0_INT02_TMR0           ; Check to see if the bit is set
.1817ee		f0 0c		beq $1817fc	                BEQ continue            ; If not: skip the rest of this macro
.1817f0		29 04		and #$04	                AND #FNX0_INT02_TMR0           ; Mask out all other pending interrupts
.1817f2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817f6		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0            ; And call its handler
.1817fa		e2 20		sep #$20	                SEP #$20        ; set A short
.1817fc						continue
.1817fc		89 08		bit #$08	                BIT #FNX0_INT03_TMR1           ; Check to see if the bit is set
.1817fe		f0 0c		beq $18180c	                BEQ continue            ; If not: skip the rest of this macro
.181800		29 08		and #$08	                AND #FNX0_INT03_TMR1           ; Mask out all other pending interrupts
.181802		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181806		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1            ; And call its handler
.18180a		e2 20		sep #$20	                SEP #$20        ; set A short
.18180c						continue
.18180c		89 10		bit #$10	                BIT #FNX0_INT04_TMR2           ; Check to see if the bit is set
.18180e		f0 0c		beq $18181c	                BEQ continue            ; If not: skip the rest of this macro
.181810		29 10		and #$10	                AND #FNX0_INT04_TMR2           ; Mask out all other pending interrupts
.181812		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181816		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2            ; And call its handler
.18181a		e2 20		sep #$20	                SEP #$20        ; set A short
.18181c						continue
.18181c		89 20		bit #$20	                BIT #FNX0_INT05_RTC           ; Check to see if the bit is set
.18181e		f0 0c		beq $18182c	                BEQ continue            ; If not: skip the rest of this macro
.181820		29 20		and #$20	                AND #FNX0_INT05_RTC           ; Mask out all other pending interrupts
.181822		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181826		22 14 17 00	jsl $001714	                JSL VEC_INT05_RTC            ; And call its handler
.18182a		e2 20		sep #$20	                SEP #$20        ; set A short
.18182c						continue
.18182c		89 40		bit #$40	                BIT #FNX0_INT06_FDC           ; Check to see if the bit is set
.18182e		f0 0c		beq $18183c	                BEQ continue            ; If not: skip the rest of this macro
.181830		29 40		and #$40	                AND #FNX0_INT06_FDC           ; Mask out all other pending interrupts
.181832		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181836		22 18 17 00	jsl $001718	                JSL VEC_INT06_FDC            ; And call its handler
.18183a		e2 20		sep #$20	                SEP #$20        ; set A short
.18183c						continue
.18183c		89 80		bit #$80	                BIT #FNX0_INT07_MOUSE           ; Check to see if the bit is set
.18183e		f0 0c		beq $18184c	                BEQ continue            ; If not: skip the rest of this macro
.181840		29 80		and #$80	                AND #FNX0_INT07_MOUSE           ; Mask out all other pending interrupts
.181842		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181846		22 1c 17 00	jsl $00171c	                JSL VEC_INT07_MOUSE            ; And call its handler
.18184a		e2 20		sep #$20	                SEP #$20        ; set A short
.18184c						continue
.18184c						CHECK_PENDING_REG1
.18184c		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1
.181850		d0 03		bne $181855	                BNE process_reg1
.181852		82 80 00	brl $1818d5	                BRL CHECK_PENDING_REG2
.181855						process_reg1
.181855		89 01		bit #$01	                BIT #FNX1_INT00_KBD           ; Check to see if the bit is set
.181857		f0 0c		beq $181865	                BEQ continue            ; If not: skip the rest of this macro
.181859		29 01		and #$01	                AND #FNX1_INT00_KBD           ; Mask out all other pending interrupts
.18185b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18185f		22 20 17 00	jsl $001720	                JSL VEC_INT10_KBD            ; And call its handler
.181863		e2 20		sep #$20	                SEP #$20        ; set A short
.181865						continue
.181865		89 02		bit #$02	                BIT #FNX1_INT01_COL0           ; Check to see if the bit is set
.181867		f0 0c		beq $181875	                BEQ continue            ; If not: skip the rest of this macro
.181869		29 02		and #$02	                AND #FNX1_INT01_COL0           ; Mask out all other pending interrupts
.18186b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18186f		22 24 17 00	jsl $001724	                JSL VEC_INT11_COL0            ; And call its handler
.181873		e2 20		sep #$20	                SEP #$20        ; set A short
.181875						continue
.181875		89 04		bit #$04	                BIT #FNX1_INT02_COL1           ; Check to see if the bit is set
.181877		f0 0c		beq $181885	                BEQ continue            ; If not: skip the rest of this macro
.181879		29 04		and #$04	                AND #FNX1_INT02_COL1           ; Mask out all other pending interrupts
.18187b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18187f		22 28 17 00	jsl $001728	                JSL VEC_INT12_COL1            ; And call its handler
.181883		e2 20		sep #$20	                SEP #$20        ; set A short
.181885						continue
.181885		89 08		bit #$08	                BIT #FNX1_INT03_COM2           ; Check to see if the bit is set
.181887		f0 0c		beq $181895	                BEQ continue            ; If not: skip the rest of this macro
.181889		29 08		and #$08	                AND #FNX1_INT03_COM2           ; Mask out all other pending interrupts
.18188b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18188f		22 2c 17 00	jsl $00172c	                JSL VEC_INT13_COM2            ; And call its handler
.181893		e2 20		sep #$20	                SEP #$20        ; set A short
.181895						continue
.181895		89 10		bit #$10	                BIT #FNX1_INT04_COM1           ; Check to see if the bit is set
.181897		f0 0c		beq $1818a5	                BEQ continue            ; If not: skip the rest of this macro
.181899		29 10		and #$10	                AND #FNX1_INT04_COM1           ; Mask out all other pending interrupts
.18189b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18189f		22 30 17 00	jsl $001730	                JSL VEC_INT14_COM1            ; And call its handler
.1818a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818a5						continue
.1818a5		89 20		bit #$20	                BIT #FNX1_INT05_MPU401           ; Check to see if the bit is set
.1818a7		f0 0c		beq $1818b5	                BEQ continue            ; If not: skip the rest of this macro
.1818a9		29 20		and #$20	                AND #FNX1_INT05_MPU401           ; Mask out all other pending interrupts
.1818ab		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818af		22 34 17 00	jsl $001734	                JSL VEC_INT15_MIDI            ; And call its handler
.1818b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818b5						continue
.1818b5		89 40		bit #$40	                BIT #FNX1_INT06_LPT           ; Check to see if the bit is set
.1818b7		f0 0c		beq $1818c5	                BEQ continue            ; If not: skip the rest of this macro
.1818b9		29 40		and #$40	                AND #FNX1_INT06_LPT           ; Mask out all other pending interrupts
.1818bb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818bf		22 38 17 00	jsl $001738	                JSL VEC_INT16_LPT            ; And call its handler
.1818c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818c5						continue
.1818c5		89 80		bit #$80	                BIT #FNX1_INT07_SDCARD           ; Check to see if the bit is set
.1818c7		f0 0c		beq $1818d5	                BEQ continue            ; If not: skip the rest of this macro
.1818c9		29 80		and #$80	                AND #FNX1_INT07_SDCARD           ; Mask out all other pending interrupts
.1818cb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818cf		22 3c 17 00	jsl $00173c	                JSL VEC_INT17_SDC            ; And call its handler
.1818d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818d5						continue
.1818d5						CHECK_PENDING_REG2
.1818d5		af 42 01 00	lda $000142	                LDA @l INT_PENDING_REG2
.1818d9		d0 03		bne $1818de	                BNE process_reg2
.1818db		82 80 00	brl $18195e	                BRL CHECK_PENDING_REG3
.1818de						process_reg2
.1818de		89 01		bit #$01	                BIT #FNX2_INT00_OPL3           ; Check to see if the bit is set
.1818e0		f0 0c		beq $1818ee	                BEQ continue            ; If not: skip the rest of this macro
.1818e2		29 01		and #$01	                AND #FNX2_INT00_OPL3           ; Mask out all other pending interrupts
.1818e4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818e8		22 40 17 00	jsl $001740	                JSL VEC_INT20_OPL            ; And call its handler
.1818ec		e2 20		sep #$20	                SEP #$20        ; set A short
.1818ee						continue
.1818ee		89 02		bit #$02	                BIT #FNX2_INT01_GABE_INT0           ; Check to see if the bit is set
.1818f0		f0 0c		beq $1818fe	                BEQ continue            ; If not: skip the rest of this macro
.1818f2		29 02		and #$02	                AND #FNX2_INT01_GABE_INT0           ; Mask out all other pending interrupts
.1818f4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818f8		22 44 17 00	jsl $001744	                JSL VEC_INT21_GABE0            ; And call its handler
.1818fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1818fe						continue
.1818fe		89 04		bit #$04	                BIT #FNX2_INT02_GABE_INT1           ; Check to see if the bit is set
.181900		f0 0c		beq $18190e	                BEQ continue            ; If not: skip the rest of this macro
.181902		29 04		and #$04	                AND #FNX2_INT02_GABE_INT1           ; Mask out all other pending interrupts
.181904		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181908		22 48 17 00	jsl $001748	                JSL VEC_INT22_GABE1            ; And call its handler
.18190c		e2 20		sep #$20	                SEP #$20        ; set A short
.18190e						continue
.18190e		89 08		bit #$08	                BIT #FNX2_INT03_VDMA           ; Check to see if the bit is set
.181910		f0 0c		beq $18191e	                BEQ continue            ; If not: skip the rest of this macro
.181912		29 08		and #$08	                AND #FNX2_INT03_VDMA           ; Mask out all other pending interrupts
.181914		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181918		22 4c 17 00	jsl $00174c	                JSL VEC_INT23_VDMA            ; And call its handler
.18191c		e2 20		sep #$20	                SEP #$20        ; set A short
.18191e						continue
.18191e		89 10		bit #$10	                BIT #FNX2_INT04_COL2           ; Check to see if the bit is set
.181920		f0 0c		beq $18192e	                BEQ continue            ; If not: skip the rest of this macro
.181922		29 10		and #$10	                AND #FNX2_INT04_COL2           ; Mask out all other pending interrupts
.181924		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181928		22 50 17 00	jsl $001750	                JSL VEC_INT24_COL2            ; And call its handler
.18192c		e2 20		sep #$20	                SEP #$20        ; set A short
.18192e						continue
.18192e		89 20		bit #$20	                BIT #FNX2_INT05_GABE_INT2           ; Check to see if the bit is set
.181930		f0 0c		beq $18193e	                BEQ continue            ; If not: skip the rest of this macro
.181932		29 20		and #$20	                AND #FNX2_INT05_GABE_INT2           ; Mask out all other pending interrupts
.181934		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181938		22 54 17 00	jsl $001754	                JSL VEC_INT25_GABE2            ; And call its handler
.18193c		e2 20		sep #$20	                SEP #$20        ; set A short
.18193e						continue
.18193e		89 40		bit #$40	                BIT #FNX2_INT06_EXT           ; Check to see if the bit is set
.181940		f0 0c		beq $18194e	                BEQ continue            ; If not: skip the rest of this macro
.181942		29 40		and #$40	                AND #FNX2_INT06_EXT           ; Mask out all other pending interrupts
.181944		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181948		22 58 17 00	jsl $001758	                JSL VEC_INT26_EXT            ; And call its handler
.18194c		e2 20		sep #$20	                SEP #$20        ; set A short
.18194e						continue
.18194e		89 80		bit #$80	                BIT #FNX2_INT07_SDCARD_INS           ; Check to see if the bit is set
.181950		f0 0c		beq $18195e	                BEQ continue            ; If not: skip the rest of this macro
.181952		29 80		and #$80	                AND #FNX2_INT07_SDCARD_INS           ; Mask out all other pending interrupts
.181954		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181958		22 5c 17 00	jsl $00175c	                JSL VEC_INT17_SDINS            ; And call its handler
.18195c		e2 20		sep #$20	                SEP #$20        ; set A short
.18195e						continue
.18195e						CHECK_PENDING_REG3
.18195e		af 43 01 00	lda $000143	                LDA @l INT_PENDING_REG3
.181962		f0 30		beq $181994	                BEQ EXIT_IRQ_HANDLE
.181964		89 01		bit #$01	                BIT #FNX3_INT00_OPN2           ; Check to see if the bit is set
.181966		f0 0c		beq $181974	                BEQ continue            ; If not: skip the rest of this macro
.181968		29 01		and #$01	                AND #FNX3_INT00_OPN2           ; Mask out all other pending interrupts
.18196a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18196e		22 60 17 00	jsl $001760	                JSL VEC_INT30_OPN2            ; And call its handler
.181972		e2 20		sep #$20	                SEP #$20        ; set A short
.181974						continue
.181974		89 02		bit #$02	                BIT #FNX3_INT01_OPM           ; Check to see if the bit is set
.181976		f0 0c		beq $181984	                BEQ continue            ; If not: skip the rest of this macro
.181978		29 02		and #$02	                AND #FNX3_INT01_OPM           ; Mask out all other pending interrupts
.18197a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18197e		22 64 17 00	jsl $001764	                JSL VEC_INT31_OPM            ; And call its handler
.181982		e2 20		sep #$20	                SEP #$20        ; set A short
.181984						continue
.181984		89 04		bit #$04	                BIT #FNX3_INT02_IDE           ; Check to see if the bit is set
.181986		f0 0c		beq $181994	                BEQ continue            ; If not: skip the rest of this macro
.181988		29 04		and #$04	                AND #FNX3_INT02_IDE           ; Mask out all other pending interrupts
.18198a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18198e		22 68 17 00	jsl $001768	                JSL VEC_INT32_IDE            ; And call its handler
.181992		e2 20		sep #$20	                SEP #$20        ; set A short
.181994						continue
.181994						EXIT_IRQ_HANDLE
.181994		28		plp		                PLP
.181995		6b		rtl		                RTL
.181996		6b		rtl		NMI_HANDLER     RTL
.181997						HANDLE_TIMER0
.181997		48		pha		                PHA
.181998		08		php		                PHP
.181999		e2 20		sep #$20	                SEP #$20        ; set A short
.18199b		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.18199f		09 80		ora #$80	                ORA #TIMER0TRIGGER
.1819a1		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.1819a5		28		plp		                PLP
.1819a6		68		pla		                PLA
.1819a7		6b		rtl		                RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/super_io_def.asm

=$af1060					SIO_KB                  = $AF1060
=$af1100					PME_STS_REG             = $AF1100
=$af1102					PME_EN_REG		        = $AF1102
=$af1104					PME_STS1_REG		    = $AF1104
=$af1105					PME_STS2_REG		    = $AF1105
=$af1106					PME_STS3_REG		    = $AF1106
=$af1107					PME_STS4_REG		    = $AF1107
=$af1108					PME_STS5_REG		    = $AF1108
=$af110a					PME_EN1_REG             = $AF110A
=$af110b					PME_EN2_REG             = $AF110B
=$af110c					PME_EN3_REG             = $AF110C
=$af110d					PME_EN4_REG             = $AF110D
=$af110e					PME_EN5_REG             = $AF110E
=$af1110					SMI_STS1_REG		    = $AF1110
=$af1111					SMI_STS2_REG		    = $AF1111
=$af1112					SMI_STS3_REG		    = $AF1112
=$af1113					SMI_STS4_REG		    = $AF1113
=$af1114					SMI_STS5_REG		    = $AF1114
=$af1116					SMI_EN1_REG             = $AF1116
=$af1117					SMI_EN2_REG             = $AF1117
=$af1118					SMI_EN3_REG             = $AF1118
=$af1119					SMI_EN4_REG             = $AF1119
=$af111a					SMI_EN5_REG             = $AF111A
=$af111c					MSC_ST_REG              = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		    = $AF1123
=$af1124					GP11_REG    		    = $AF1124
=$af1125					GP12_REG    		    = $AF1125
=$af1126					GP13_REG    		    = $AF1126
=$af1127					GP14_REG    		    = $AF1127
=$af1128					GP15_REG    		    = $AF1128
=$af1129					GP16_REG    		    = $AF1129
=$af112a					GP17_REG    		    = $AF112A
=$af112b					GP20_REG    		    = $AF112B
=$af112c					GP21_REG    		    = $AF112C
=$af112d					GP22_REG		        = $AF112D
=$af112f					GP24_REG		        = $AF112F
=$af1130					GP25_REG		        = $AF1130
=$af1131					GP26_REG		        = $AF1131
=$af1132					GP27_REG		        = $AF1132
=$af1133					GP30_REG		        = $AF1133
=$af1134					GP31_REG		        = $AF1134
=$af1135					GP32_REG		        = $AF1135
=$af1136					GP33_REG		        = $AF1136
=$af1137					GP34_REG		        = $AF1137
=$af1138					GP35_REG		        = $AF1138
=$af1139					GP36_REG		        = $AF1139
=$af113a					GP37_REG		        = $AF113A
=$af113b					GP40_REG		        = $AF113B
=$af113c					GP41_REG		        = $AF113C
=$af113d					GP42_REG		        = $AF113D
=$af113e					GP43_REG		        = $AF113E
=$af113f					GP50_REG		        = $AF113F
=$af1140					GP51_REG		        = $AF1140
=$af1141					GP52_REG		        = $AF1141
=$af1142					GP53_REG		        = $AF1142
=$af1143					GP54_REG		        = $AF1143
=$af1144					GP55_REG		        = $AF1144
=$af1145					GP56_REG		        = $AF1145
=$af1146					GP57_REG		        = $AF1146
=$af1147					GP60_REG		        = $AF1147
=$af1148					GP61_REG		        = $AF1148
=$af114b					GP1_REG			        = $AF114B
=$af114c					GP2_REG			        = $AF114C
=$af114d					GP3_REG			        = $AF114D
=$af114e					GP4_REG			        = $AF114E
=$af114f					GP5_REG			        = $AF114F
=$af1150					GP6_REG			        = $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG                = $AF1157
=$af1158					FAN_CTRL_REG  	        = $AF1158
=$af1159					FAN1_TACH_REG           = $AF1159
=$af115a					FAN2_TACH_REG           = $AF115A
=$af115b					FAN1_PRELOAD_REG        = $AF115B
=$af115c					FAN2_PRELOAD_REG        = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE      = $AF115F
=$af1200					SIO_JOY                 = $AF1200
=$af12f8					SIO_COM1                = $AF12F8
=$af1330					SIO_MPU                 = $AF1330
=$af1378					SIO_LPT0                = $AF1378
=$af13f0					SIO_FDC                 = $AF13F0
=$af13f0					SIO_FDC_SRA             = $AF13F0 ; Read Only - Status Register A
=$af13f1					SIO_FDC_SRB             = $AF13F1 ; Read Only - Status Register B
=$af13f2					SIO_FDC_DOR             = $AF13F2 ; Read/Write - Digital Output Register
=$af13f3					SIO_FDC_TSR             = $AF13F3 ; Read/Write - Tape Drive Status
=$af13f4					SIO_FDC_MSR             = $AF13F4 ; Read - Main Status Register
=$af13f4					SIO_FDC_DSR             = $AF13F4 ; Write - Data Select Register
=$af13f5					SIO_FDC_DTA             = $AF13F5 ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV             = $AF13F6 ; Reserved
=$af13f7					SIO_FDC_DIR             = $AF13F7 ; Read - Digital Input Register
=$af13f8					SIO_FDC_CCR             = $AF13F8 ; Write - Configuration Control Register
=$af13f8					SIO_COM0                = $AF13F8

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/keyboard_def.asm

=$af1807					    STATUS_PORT 	= $AF1807
=$af1807					    KBD_STATUS      = $AF1807
=$af1807					    KBD_CMD_BUF		= $AF1807
=$af1803					    KBD_OUT_BUF 	= $AF1803
=$af1803					    KBD_INPT_BUF	= $AF1803
=$af1803					    KBD_DATA_BUF	= $AF1803
=$af180a					    PORT_A		    = $AF180A   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$af180b					    PORT_B			= $AF180B   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=4						CHAN_EVID     = 4           ; ID for the second video port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src/kernel.asm

.190400						IBOOT
.190400		18		clc		                CLC               ; clear the carry flag
.190401		fb		xce		                XCE               ; move carry to emulation flag.
.190402		78		sei		                SEI               ; Disable interrupts
.190403		c2 30		rep #$30	                REP #$30        ; set A&X long
.190405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.190408		1b		tcs		                TAS
.190409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.19040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.19040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.190412		54 00 18	mvn #$18,#$00	                MVN $18,$00       ; Or during soft loading of the kernel from the debug port
.190415		48		pha		                PHA             ; begin setdp macro
.190416		08		php		                PHP
.190417		c2 20		rep #$20	                REP #$20        ; set A long
.190419		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19041c		5b		tcd		                TCD
.19041d		28		plp		                PLP
.19041e		68		pla		                PLA             ; end setdp macro
.19041f		e2 20		sep #$20	                SEP #$20        ; set A short
.190421		a2 00 00	ldx #$0000	                LDX #$0000
.190424		a9 00		lda #$00	                LDA #$00
.190426						CLEAR_MEM_LOOP
.190426		95 00		sta $00,x	                STA $0000, X
.190428		e8		inx		                INX
.190429		e0 00 01	cpx #$0100	                CPX #$0100
.19042c		d0 f8		bne $190426	                BNE CLEAR_MEM_LOOP
.19042e		ea		nop		                NOP
.19042f		a9 ff		lda #$ff	                LDA #$FF
.190431		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.190435		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.190439		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.19043d		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.190441		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.190445		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190449		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.19044d		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.190451		22 b8 0c 19	jsl $190cb8	                JSL INITRTC               ; Initialize the RTC
.190455		e2 20		sep #$20	                SEP #$20        ; set A short
.190457		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.19045b		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.19045d		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.19045f		d0 1e		bne $19047f	                BNE SkipInitExpC100C200
.190461		c2 20		rep #$20	                REP #$20        ; set A long
.190463		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.190467		c9 64 00	cmp #$0064	                CMP #$0064
.19046a		f0 0f		beq $19047b	                BEQ InitC100ESID
.19046c		c9 c8 00	cmp #$00c8	                CMP #$00C8
.19046f		d0 0e		bne $19047f	                BNE SkipInitExpC100C200
.190471		22 2f 62 19	jsl $19622f	                JSL SIMPLE_INIT_ETHERNET_CTRL
.190475		22 b6 62 19	jsl $1962b6	                JSL INIT_EVID_VID_MODE
.190479		80 04		bra $19047f	                BRA SkipInitExpC100C200
.19047b						InitC100ESID:
.19047b		22 2f 62 19	jsl $19622f	                JSL SIMPLE_INIT_ETHERNET_CTRL
.19047f						SkipInitExpC100C200:
.19047f		e2 20		sep #$20	                SEP #$20        ; set A short
.190481		c2 10		rep #$10	                REP #$10        ; set X long
.190483		a9 9f		lda #$9f	                LDA #$9F              ; Channel 1 - Full Atteniation
.190485		8f 00 f1 af	sta $aff100	                STA $AFF100
.190489		a9 bf		lda #$bf	                LDA #$BF              ; Channel 2 - Full Atteniation
.19048b		8f 00 f1 af	sta $aff100	                STA $AFF100
.19048f		a9 df		lda #$df	                LDA #$DF              ; Channel 3 - No Atteniation
.190491		8f 00 f1 af	sta $aff100	                STA $AFF100
.190495		a9 ff		lda #$ff	                LDA #$FF              ; Channel 4 - No Atteniation
.190497		8f 00 f1 af	sta $aff100	                STA $AFF100
.19049b		a9 70		lda #$70	                LDA #$70                  ; Set the default text color to dim white on black
.19049d		85 1e		sta $1e		                STA CURCOLOR
.19049f		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.1904a3		29 01		and #$01	                AND #$01
.1904a5		c9 01		cmp #$01	                CMP #$01
.1904a7		d0 14		bne $1904bd	                BNE Alreadyin640480Mode
.1904a9		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904ad		29 fc		and #$fc	                AND #$FC
.1904af		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904b3		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904b7		09 01		ora #$01	                ORA #$01
.1904b9		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904bd						Alreadyin640480Mode
.1904bd		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904c1		29 fc		and #$fc	                AND #$FC
.1904c3		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.1904c7		a9 00		lda #$00	                LDA #0
.1904c9		22 38 10 00	jsl $001038	                JSL SETIN
.1904cd		22 3c 10 00	jsl $00103c	                JSL SETOUT
.1904d1		22 24 64 19	jsl $196424	                JSL ANSI_INIT
.1904d5		22 2c 11 00	jsl $00112c	                JSL SETSIZES
.1904d9		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.1904dd		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.1904e1		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.1904e5		22 7b 0b 19	jsl $190b7b	                JSL INITMOUSEPOINTER
.1904e9		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.1904ed		c2 20		rep #$20	                REP #$20        ; set A long
.1904ef		48		pha		                PHA             ; begin setdp macro
.1904f0		08		php		                PHP
.1904f1		c2 20		rep #$20	                REP #$20        ; set A long
.1904f3		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1904f6		5b		tcd		                TCD
.1904f7		28		plp		                PLP
.1904f8		68		pla		                PLA             ; end setdp macro
.1904f9		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD        ; Initialize the keyboard
.1904fd		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE           ; Initialize the mouse
.190501		58		cli		                CLI
.190502		a9 00 00	lda #$0000	                LDA #0
.190505		8d e0 00	sta $00e0	                STA @w MOUSE_IDX
.190508		e2 20		sep #$20	                SEP #$20        ; set A short
.19050a		c2 10		rep #$10	                REP #$10        ; set X long
.19050c		48		pha		                PHA             ; begin setdbr macro
.19050d		08		php		                PHP
.19050e		e2 20		sep #$20	                SEP #$20        ; set A short
.190510		a9 19		lda #$19	                LDA #`greet_msg
.190512		48		pha		                PHA
.190513		ab		plb		                PLB
.190514		28		plp		                PLP
.190515		68		pla		                PLA             ; end setdbr macro
.190516		a2 00 00	ldx #$0000	                LDX #0
.190519		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.19051d		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.190521		e8		inx		                INX
.190522		e0 00 10	cpx #$1000	                CPX #$1000
.190525		d0 f2		bne $190519	                BNE jmpcopy
.190527						retry_boot
.190527		22 2b 3e 19	jsl $193e2b	                JSL DOS_INIT            ; Initialize the "disc operating system"
.19052b		22 66 79 19	jsl $197966	                JSL BOOT_SOUND          ; Play the boot sound
.19052f		22 00 00 1e	jsl $1e0000	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.190533		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN           ; Clear Screen and Set a standard color in Color Memory
.190537		22 a0 10 00	jsl $0010a0	                JSL CSRHOME             ; Move to the home position
.19053b						greet
.19053b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19053d		48		pha		                PHA             ; begin setdbr macro
.19053e		08		php		                PHP
.19053f		e2 20		sep #$20	                SEP #$20        ; set A short
.190541		a9 19		lda #$19	                LDA #`greet_msg
.190543		48		pha		                PHA
.190544		ab		plb		                PLB
.190545		28		plp		                PLP
.190546		68		pla		                PLA             ; end setdbr macro
.190547		a2 1d 7a	ldx #$7a1d	                LDX #<>greet_msg
.19054a		22 01 07 19	jsl $190701	                JSL IPRINT              ; print the first line
.19054e		22 10 09 19	jsl $190910	                JSL ICOLORFLAG          ; This is to set the color memory for the text logo
.190552		22 96 63 19	jsl $196396	                JSL EVID_GREET          ; Print the EVID greeting, if the EVID card is installed
.190556		c2 30		rep #$30	                REP #$30        ; set A&X long
.190558		a9 ff fe	lda #$feff	                LDA #STACK_END          ; We are the root, let's make sure from now on, that we start clean
.19055b		1b		tcs		                TAS
.19055c		e2 20		sep #$20	                SEP #$20        ; set A short
.19055e		c2 10		rep #$10	                REP #$10        ; set X long
.190560		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.190564		c9 39		cmp #$39	                CMP #SCAN_SP          ; Did the user press SPACE?
.190566		f0 10		beq $190578	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.190568		c9 1c		cmp #$1c	                CMP #SCAN_CR          ; Did the user press RETURN?
.19056a		f0 1e		beq $19058a	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.19056c		c9 3b		cmp #$3b	                CMP #CHAR_F1          ; Did the user press F1?
.19056e		f0 62		beq $1905d2	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.190570		c9 3c		cmp #$3c	                CMP #CHAR_F2          ; Did the user press F2?
.190572		f0 1d		beq $190591	                BEQ BOOTSDC           ; Yes: boot via the SDC
.190574		c9 3d		cmp #$3d	                CMP #CHAR_F3          ; Did the user press F3?
.190576		f0 39		beq $1905b1	                BEQ BOOTIDE           ; Yes: boot via the IDE
.190578		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.19057c		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.19057e		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.190580		f0 2f		beq $1905b1	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.190582		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.190584		f0 0b		beq $190591	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.190586		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.190588		f0 48		beq $1905d2	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.19058a						IRESTORE
.19058a		5c 00 00 1a	jmp $1a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.19058e		ea		nop		CREDIT_LOCK     NOP
.19058f		80 fd		bra $19058e	                BRA CREDIT_LOCK
.190591		a2 4c 7e	ldx #$7e4c	BOOTSDC         LDX #<>sdc_boot
.190594		22 01 07 19	jsl $190701	                JSL IPRINT
.190598		e2 20		sep #$20	                SEP #$20        ; set A short
.19059a		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.19059c		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905a0		22 fd 3e 19	jsl $193efd	                JSL DOS_MOUNT         ; Mount the SDC
.1905a4		90 06		bcc $1905ac	                BCC sdc_error         ; Print an error message if couldn't get anything
.1905a6		22 b8 40 19	jsl $1940b8	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.1905aa		80 de		bra $19058a	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.1905ac		a2 d0 7d	ldx #$7dd0	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.1905af		80 40		bra $1905f1	                BRA PR_BOOT_ERROR
.1905b1		a2 63 7e	ldx #$7e63	BOOTIDE         LDX #<>ide_boot
.1905b4		22 01 07 19	jsl $190701	                JSL IPRINT
.1905b8		e2 20		sep #$20	                SEP #$20        ; set A short
.1905ba		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.1905bc		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905c0		22 fd 3e 19	jsl $193efd	                JSL DOS_MOUNT         ; Mount the IDE drive
.1905c4		90 07		bcc $1905cd	                BCC hdc_error         ; Print an error message if couldn't get anything
.1905c6		22 b8 40 19	jsl $1940b8	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.1905ca		82 bd ff	brl $19058a	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.1905cd		a2 ec 7d	ldx #$7dec	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.1905d0		80 1f		bra $1905f1	                BRA PR_BOOT_ERROR
.1905d2		a2 35 7e	ldx #$7e35	BOOTFLOPPY      LDX #<>fdc_boot
.1905d5		22 01 07 19	jsl $190701	                JSL IPRINT
.1905d9		e2 20		sep #$20	                SEP #$20        ; set A short
.1905db		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.1905dd		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905e1		22 24 5e 19	jsl $195e24	                JSL FDC_MOUNT         ; Mount the floppy drive
.1905e5		90 07		bcc $1905ee	                BCC fdc_error         ; Print an error message if couldn't get anything
.1905e7		22 b8 40 19	jsl $1940b8	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.1905eb		82 9c ff	brl $19058a	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.1905ee		a2 0f 7e	ldx #$7e0f	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.1905f1		22 01 07 19	jsl $190701	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.1905f5		a2 ab 7d	ldx #$7dab	                LDX #<>boot_retry     ; Print the boot retry prompt
.1905f8		22 01 07 19	jsl $190701	                JSL IPRINT
.1905fc		22 9b 06 19	jsl $19069b	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.190600		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.190602		d0 03		bne $190607	                BNE chk_r_lc
.190604		82 20 ff	brl $190527	                BRL retry_boot        ; Yes: retry the boot sequence
.190607		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.190609		d0 03		bne $19060e	                BNE chk_b_lc
.19060b		82 19 ff	brl $190527	                BRL retry_boot
.19060e		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.190610		d0 03		bne $190615	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.190612		82 75 ff	brl $19058a	                BRL BOOTBASIC
.190615						chk_b_lc_not:
.190615		c9 42		cmp #$42	                CMP #'B'
.190617		d0 03		bne $19061c	                BNE chk_b_lc_not0
.190619		82 6e ff	brl $19058a	                BRL BOOTBASIC
.19061c						chk_b_lc_not0:
.19061c		80 de		bra $1905fc	                BRA boot_wait_key     ; No: keep waiting
.19061e						IBREAK
.19061e		48		pha		                PHA             ; begin setdp macro
.19061f		08		php		                PHP
.190620		c2 20		rep #$20	                REP #$20        ; set A long
.190622		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190625		5b		tcd		                TCD
.190626		28		plp		                PLP
.190627		68		pla		                PLA             ; end setdp macro
.190628		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.190629		8f 48 02 00	sta $000248	                STA CPUY
.19062d		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.19062e		8f 46 02 00	sta $000246	                STA CPUX
.190632		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.190633		8f 44 02 00	sta $000244	                STA CPUA
.190637		68		pla		                PLA
.190638		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.19063c		e2 20		sep #$20	                SEP #$20        ; set A short
.19063e		68		pla		                PLA             ; Pull Data Bank (8 bits)
.19063f		8f 4e 02 00	sta $00024e	                STA CPUDBR
.190643		68		pla		                PLA             ; Pull Flags (8 bits)
.190644		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.190648		c2 20		rep #$20	                REP #$20        ; set A long
.19064a		68		pla		                PLA             ; Pull Program Counter (16 bits)
.19064b		8f 40 02 00	sta $000240	                STA CPUPC
.19064f		e2 20		sep #$20	                SEP #$20        ; set A short
.190651		68		pla		                PLA             ; Pull Program Bank (8 bits)
.190652		8f 42 02 00	sta $000242	                STA CPUPBR
.190656		c2 20		rep #$20	                REP #$20        ; set A long
.190658		3b		tsc		                TSA             ; Get the stack
.190659		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.19065d		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.190660		1b		tcs		                TAS
.190661		5c 04 00 1a	jmp $1a0004	                JML MONITOR
.190665						IREADY
.190665		48		pha		                PHA             ; begin setdbr macro
.190666		08		php		                PHP
.190667		e2 20		sep #$20	                SEP #$20        ; set A short
.190669		a9 19		lda #$19	                LDA #`ready_msg
.19066b		48		pha		                PHA
.19066c		ab		plb		                PLB
.19066d		28		plp		                PLP
.19066e		68		pla		                PLA             ; end setdbr macro
.19066f		e2 20		sep #$20	                SEP #$20        ; set A short
.190671		a2 7e 7e	ldx #$7e7e	                LDX #<>ready_msg
.190674		22 01 07 19	jsl $190701	                JSL IPRINT
.190678						IREADYWAIT
.190678		22 92 06 19	jsl $190692	                JSL IGETCHE
.19067c		80 fa		bra $190678	                BRA IREADYWAIT
.19067e		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.19067f		db		stp		IRETURN         STP
.190680		08		php		ISETIN          PHP
.190681		e2 20		sep #$20	                SEP #$20        ; set A short
.190683		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.190687		28		plp		                PLP
.190688		6b		rtl		                RTL
.190689		08		php		ISETOUT         PHP
.19068a		e2 20		sep #$20	                SEP #$20        ; set A short
.19068c		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.190690		28		plp		                PLP
.190691		6b		rtl		                RTL
.190692		22 4c 10 00	jsl $00104c	IGETCHE         JSL GETCHW
.190696		22 18 10 00	jsl $001018	                JSL PUTC
.19069a		6b		rtl		                RTL
.19069b						IGETCHW
.19069b		da		phx		                PHX
.19069c		5a		phy		                PHY
.19069d		8b		phb		                PHB
.19069e		0b		phd		                PHD
.19069f		08		php		                PHP
.1906a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1906a2		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.1906a6		f0 1b		beq $1906c3	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.1906a8		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1906aa		f0 0d		beq $1906b9	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906ac		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1906ae		f0 09		beq $1906b9	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906b0		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.1906b2		28		plp		                PLP
.1906b3		38		sec		                SEC                 ; And return carry set
.1906b4		2b		pld		                PLD
.1906b5		ab		plb		                PLB
.1906b6		7a		ply		                PLY
.1906b7		fa		plx		                PLX
.1906b8		6b		rtl		                RTL
.1906b9		22 ff 54 19	jsl $1954ff	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.1906bd		22 21 55 19	jsl $195521	                JSL UART_GETC       ; Get the charater from the COM port
.1906c1		80 04		bra $1906c7	                BRA done
.1906c3		22 36 70 19	jsl $197036	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.1906c7		28		plp		done            PLP
.1906c8		18		clc		                CLC                 ; Return carry clear for valid data
.1906c9		2b		pld		                PLD
.1906ca		ab		plb		                PLB
.1906cb		7a		ply		                PLY
.1906cc		fa		plx		                PLX
.1906cd		6b		rtl		                RTL
.1906ce						IGETCH
.1906ce		da		phx		                PHX
.1906cf		5a		phy		                PHY
.1906d0		8b		phb		                PHB
.1906d1		0b		phd		                PHD
.1906d2		08		php		                PHP
.1906d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1906d5		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.1906d9		f0 1b		beq $1906f6	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.1906db		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1906dd		f0 0d		beq $1906ec	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906df		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1906e1		f0 09		beq $1906ec	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906e3		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.1906e5		28		plp		                PLP
.1906e6		38		sec		                SEC                 ; And return carry set
.1906e7		2b		pld		                PLD
.1906e8		ab		plb		                PLB
.1906e9		7a		ply		                PLY
.1906ea		fa		plx		                PLX
.1906eb		6b		rtl		                RTL
.1906ec		22 ff 54 19	jsl $1954ff	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.1906f0		22 21 55 19	jsl $195521	                JSL UART_GETC       ; Get the charater from the COM port
.1906f4		80 04		bra $1906fa	                BRA done
.1906f6		22 42 70 19	jsl $197042	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.1906fa		28		plp		done            PLP
.1906fb		18		clc		                CLC                 ; Return carry clear for valid data
.1906fc		2b		pld		                PLD
.1906fd		ab		plb		                PLB
.1906fe		7a		ply		                PLY
.1906ff		fa		plx		                PLX
.190700		6b		rtl		                RTL
.190701		22 1c 10 00	jsl $00101c	IPRINT          JSL PUTS
.190705		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.190709		6b		rtl		                RTL
.19070a		48		pha		IPUTS           PHA
.19070b		08		php		                PHP
.19070c		e2 20		sep #$20	                SEP #$20        ; set A short
.19070e		c2 10		rep #$10	                REP #$10        ; set X long
.190710		bd 00 00	lda $190000,x	iputs1          LDA $0,b,x      ; read from the string
.190713		f0 08		beq $19071d	                BEQ iputs_done
.190715		22 18 10 00	jsl $001018	iputs2          JSL PUTC
.190719		e8		inx		iputs3          INX
.19071a		4c 10 07	jmp $190710	                JMP iputs1
.19071d		e8		inx		iputs_done      INX
.19071e		28		plp		                PLP
.19071f		68		pla		                PLA
.190720		6b		rtl		                RTL
.190721						IPUTC
.190721		da		phx		                PHX
.190722		5a		phy		                PHY
.190723		0b		phd		                PHD
.190724		8b		phb		                PHB
.190725		08		php		                PHP                 ; stash the flags (we'll be changing M)
.190726		48		pha		                PHA             ; begin setdp macro
.190727		08		php		                PHP
.190728		c2 20		rep #$20	                REP #$20        ; set A long
.19072a		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19072d		5b		tcd		                TCD
.19072e		28		plp		                PLP
.19072f		68		pla		                PLA             ; end setdp macro
.190730		48		pha		                PHA             ; begin setdbr macro
.190731		08		php		                PHP
.190732		e2 20		sep #$20	                SEP #$20        ; set A short
.190734		a9 00		lda #$00	                LDA #0
.190736		48		pha		                PHA
.190737		ab		plb		                PLB
.190738		28		plp		                PLP
.190739		68		pla		                PLA             ; end setdbr macro
.19073a		e2 20		sep #$20	                SEP #$20        ; set A short
.19073c		c2 10		rep #$10	                REP #$10        ; set X long
.19073e		48		pha		                PHA                 ; Save the character to print
.19073f		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.190743		f0 1a		beq $19075f	                BEQ putc_ansi       ; If it's 0: print to the screen
.190745		c9 04		cmp #$04	                CMP #CHAN_EVID      ; Check to see if it's the second video port
.190747		f0 16		beq $19075f	                BEQ putc_ansi       ; Yes: handle printing to the second video port
.190749		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.19074b		f0 07		beq $190754	                BEQ putc_uart       ; Yes: handle printing to the UART
.19074d		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.19074f		f0 03		beq $190754	                BEQ putc_uart       ; Yes: handle printing to the UART
.190751		68		pla		                PLA                 ; Otherwise, just exit
.190752		80 10		bra $190764	                BRA done
.190754		22 ff 54 19	jsl $1954ff	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.190758		68		pla		                PLA                 ; Recover the character to send
.190759		22 42 55 19	jsl $195542	                JSL UART_PUTC       ; Send the character
.19075d		80 05		bra $190764	                BRA done
.19075f		68		pla		putc_ansi       PLA                 ; Recover the character to send
.190760		22 63 66 19	jsl $196663	                JSL ANSI_PUTC       ; Print to the current selected ANSI screen
.190764		28		plp		done            PLP
.190765		ab		plb		                PLB
.190766		2b		pld		                PLD
.190767		7a		ply		                PLY
.190768		fa		plx		                PLX
.190769		6b		rtl		                RTL
.19076a		da		phx		SCRSHIFTLL      PHX
.19076b		5a		phy		                PHY
.19076c		48		pha		                PHA
.19076d		0b		phd		                PHD
.19076e		08		php		                PHP
.19076f		48		pha		                PHA             ; begin setdp macro
.190770		08		php		                PHP
.190771		c2 20		rep #$20	                REP #$20        ; set A long
.190773		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190776		5b		tcd		                TCD
.190777		28		plp		                PLP
.190778		68		pla		                PLA             ; end setdp macro
.190779		c2 30		rep #$30	                REP #$30        ; set A&X long
.19077b		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.19077d		a8		tay		                TAY                 ; Set it as the destination
.19077e		aa		tax		                TAX
.19077f		e8		inx		                INX                 ; And set the next cell as the source
.190780		18		clc		                CLC                 ; Calculate the length of the block to move
.190781		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.190783		e5 1a		sbc $1a		                SBC CURSORX
.190785		54 af af	mvn #$af,#$af	                MVN $AF, $AF        ; And move the block
.190788		28		plp		                PLP
.190789		2b		pld		                PLD
.19078a		68		pla		                PLA
.19078b		7a		ply		                PLY
.19078c		fa		plx		                PLX
.19078d		6b		rtl		                RTL
.19078e		da		phx		SCRSHIFTLR      PHX
.19078f		48		pha		                PHA
.190790		0b		phd		                PHD
.190791		08		php		                PHP
.190792		48		pha		                PHA             ; begin setdp macro
.190793		08		php		                PHP
.190794		c2 20		rep #$20	                REP #$20        ; set A long
.190796		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190799		5b		tcd		                TCD
.19079a		28		plp		                PLP
.19079b		68		pla		                PLA             ; end setdp macro
.19079c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19079e		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.1907a0		1a		inc a		                INC A
.1907a1		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.1907a3		b0 1b		bcs $1907c0	                BGE done            ; Yes: just skip the whole thing
.1907a5		38		sec		                SEC                 ; Calculate the length of the block to move
.1907a6		a5 0f		lda $0f		                LDA COLS_VISIBLE
.1907a8		e5 1a		sbc $1a		                SBC CURSORX
.1907aa		1a		inc a		                INC A
.1907ab		18		clc		                CLC
.1907ac		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.1907ae		3a		dec a		                DEC A
.1907af		a8		tay		                TAY                 ; Make it the destination
.1907b0		3a		dec a		                DEC A               ; Move to the previous column
.1907b1		aa		tax		                TAX                 ; Make it the source
.1907b2		38		sec		                SEC                 ; Calculate the length of the block to move
.1907b3		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.1907b5		e5 1a		sbc $1a		                SBC CURSORX
.1907b7		44 af af	mvp #$af,#$af	                MVP $AF, $AF        ; And move the block
.1907ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1907bc		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.1907be		87 17		sta [$17]	                STA [CURSORPOS]
.1907c0		28		plp		done            PLP
.1907c1		2b		pld		                PLD
.1907c2		68		pla		                PLA
.1907c3		fa		plx		                PLX
.1907c4		6b		rtl		                RTL
.1907c5						IPUTB
.1907c5		6b		rtl		                RTL
.1907c6						IPRINTCR
.1907c6		da		phx		                PHX
.1907c7		5a		phy		                PHY
.1907c8		8b		phb		                PHB
.1907c9		0b		phd		                PHD
.1907ca		08		php		                PHP
.1907cb		48		pha		                PHA             ; begin setdbr macro
.1907cc		08		php		                PHP
.1907cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1907cf		a9 00		lda #$00	                LDA #0
.1907d1		48		pha		                PHA
.1907d2		ab		plb		                PLB
.1907d3		28		plp		                PLP
.1907d4		68		pla		                PLA             ; end setdbr macro
.1907d5		48		pha		                PHA             ; begin setdp macro
.1907d6		08		php		                PHP
.1907d7		c2 20		rep #$20	                REP #$20        ; set A long
.1907d9		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1907dc		5b		tcd		                TCD
.1907dd		28		plp		                PLP
.1907de		68		pla		                PLA             ; end setdp macro
.1907df		e2 20		sep #$20	                SEP #$20        ; set A short
.1907e1		c2 10		rep #$10	                REP #$10        ; set X long
.1907e3		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.1907e7		f0 1c		beq $190805	                BEQ scr_printcr
.1907e9		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1907eb		f0 06		beq $1907f3	                BEQ uart_printcr    ; Yes: handle printing to the UART
.1907ed		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1907ef		f0 02		beq $1907f3	                BEQ uart_printcr    ; Yes: handle printing to the UART
.1907f1		80 1c		bra $19080f	                BRA done
.1907f3		22 ff 54 19	jsl $1954ff	uart_printcr    JSL UART_SELECT
.1907f7		a9 0d		lda #$0d	                LDA #CHAR_CR
.1907f9		22 18 10 00	jsl $001018	                JSL PUTC
.1907fd		a9 0a		lda #$0a	                LDA #CHAR_LF
.1907ff		22 18 10 00	jsl $001018	                JSL PUTC
.190803		80 0a		bra $19080f	                BRA done
.190805		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.190808		a4 1c		ldy $1c		                LDY CURSORY
.19080a		c8		iny		                INY
.19080b		22 84 10 00	jsl $001084	                JSL LOCATE
.19080f		28		plp		done            PLP
.190810		2b		pld		                PLD
.190811		ab		plb		                PLB
.190812		7a		ply		                PLY
.190813		fa		plx		                PLX
.190814		6b		rtl		                RTL
.190815		da		phx		ICSRHOME        PHX
.190816		5a		phy		                PHY
.190817		08		php		                PHP
.190818		a2 00 00	ldx #$0000	                LDX #0
.19081b		a0 00 00	ldy #$0000	                LDY #0
.19081e		22 84 10 00	jsl $001084	                JSL LOCATE
.190822		28		plp		                PLP
.190823		7a		ply		                PLY
.190824		fa		plx		                PLX
.190825		6b		rtl		                RTL
.190826		da		phx		ICSRRIGHT       PHX
.190827		5a		phy		                PHY
.190828		48		pha		                PHA
.190829		0b		phd		                PHD
.19082a		08		php		                PHP
.19082b		22 1b 6b 19	jsl $196b1b	                JSL ANSI_CSRRIGHT
.19082f		28		plp		                PLP
.190830		2b		pld		                PLD
.190831		68		pla		                PLA
.190832		7a		ply		                PLY
.190833		fa		plx		                PLX
.190834		6b		rtl		                RTL
.190835						ICSRLEFT
.190835		da		phx		                PHX
.190836		5a		phy		                PHY
.190837		48		pha		                PHA
.190838		0b		phd		                PHD
.190839		08		php		                PHP
.19083a		22 46 6b 19	jsl $196b46	                JSL ANSI_CSRLEFT
.19083e		28		plp		                PLP
.19083f		2b		pld		                PLD
.190840		68		pla		                PLA
.190841		7a		ply		                PLY
.190842		fa		plx		                PLX
.190843		6b		rtl		                RTL
.190844						ICSRUP
.190844		da		phx		                PHX
.190845		5a		phy		                PHY
.190846		48		pha		                PHA
.190847		0b		phd		                PHD
.190848		08		php		                PHP
.190849		22 64 6b 19	jsl $196b64	                JSL ANSI_CSRUP
.19084d		28		plp		                PLP
.19084e		2b		pld		                PLD
.19084f		68		pla		                PLA
.190850		7a		ply		                PLY
.190851		fa		plx		                PLX
.190852		6b		rtl		                RTL
.190853		da		phx		ICSRDOWN        PHX
.190854		5a		phy		                PHY
.190855		0b		phd		                PHD
.190856		22 82 6b 19	jsl $196b82	                JSL ANSI_CSRDOWN
.19085a		2b		pld		                PLD
.19085b		7a		ply		                PLY
.19085c		fa		plx		                PLX
.19085d		6b		rtl		                RTL
.19085e		48		pha		ILOCATE         PHA
.19085f		0b		phd		                PHD
.190860		08		php		                PHP
.190861		22 a5 6b 19	jsl $196ba5	                JSL ANSI_LOCATE
.190865		28		plp		ilocate_done    PLP
.190866		2b		pld		                PLD
.190867		68		pla		                PLA
.190868		6b		rtl		                RTL
.190869						ISCROLLUP
.190869		48		pha		                PHA
.19086a		da		phx		                PHX
.19086b		5a		phy		                PHY
.19086c		8b		phb		                PHB
.19086d		0b		phd		                PHD
.19086e		08		php		                PHP
.19086f		22 09 6c 19	jsl $196c09	                JSL ANSI_SCROLLUP
.190873		28		plp		                PLP
.190874		2b		pld		                PLD
.190875		ab		plb		                PLB
.190876		7a		ply		                PLY
.190877		fa		plx		                PLX
.190878		68		pla		                PLA
.190879		6b		rtl		                RTL
.19087a		08		php		IPRINTH         PHP
.19087b		48		pha		                PHA
.19087c						iprinth1
.19087c		e2 20		sep #$20	                SEP #$20        ; set A short
.19087e		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.190881		4a		lsr a		                LSR
.190882		4a		lsr a		                LSR
.190883		4a		lsr a		                LSR
.190884		4a		lsr a		                LSR
.190885		22 d4 08 19	jsl $1908d4	                JSL iprint_digit
.190889		bd 00 00	lda $0000,x	                LDA #0,b,x
.19088c		22 d4 08 19	jsl $1908d4	                JSL iprint_digit
.190890		ca		dex		                DEX
.190891		88		dey		                DEY
.190892		d0 e8		bne $19087c	                BNE iprinth1
.190894		68		pla		                PLA
.190895		28		plp		                PLP
.190896		6b		rtl		                RTL
.190897						IPRINTAH
.190897		48		pha		                PHA
.190898		08		php		                PHP
.190899		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.19089d		08		php		                PHP                   ; Get the processor status into A
.19089e		e2 20		sep #$20	                SEP #$20        ; set A short
.1908a0		c2 10		rep #$10	                REP #$10        ; set X long
.1908a2		68		pla		                PLA
.1908a3		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.1908a5		c9 20		cmp #$20	                CMP #%00100000
.1908a7		f0 14		beq $1908bd	                BEQ eight_bit
.1908a9		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.1908ad		4a		lsr a		                LSR A
.1908ae		4a		lsr a		                LSR A
.1908af		4a		lsr a		                LSR A
.1908b0		4a		lsr a		                LSR A
.1908b1		22 d4 08 19	jsl $1908d4	                JSL iprint_digit      ; And print it
.1908b5		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.1908b9		22 d4 08 19	jsl $1908d4	                JSL iprint_digit      ; And print it
.1908bd		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.1908c1		4a		lsr a		                LSR A
.1908c2		4a		lsr a		                LSR A
.1908c3		4a		lsr a		                LSR A
.1908c4		4a		lsr a		                LSR A
.1908c5		22 d4 08 19	jsl $1908d4	                JSL iprint_digit      ; And print it
.1908c9		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.1908cd		22 d4 08 19	jsl $1908d4	                JSL iprint_digit      ; And print it
.1908d1		28		plp		                PLP
.1908d2		68		pla		                PLA
.1908d3		6b		rtl		                RTL
.1908d4		da		phx		iprint_digit    PHX
.1908d5		c2 20		rep #$20	                REP #$20        ; set A long
.1908d7		29 0f 00	and #$000f	                AND #$0F
.1908da		aa		tax		                TAX
.1908db		bf 92 7e 19	lda $197e92,x	                LDA hex_digits,X
.1908df		22 21 07 19	jsl $190721	                JSL IPUTC       ; Print the digit
.1908e3		fa		plx		                PLX
.1908e4		6b		rtl		                RTL
.1908e5		48		pha		ICLRSCREEN	    PHA
.1908e6		da		phx		                PHX
.1908e7		08		php		                PHP
.1908e8		22 9e 6c 19	jsl $196c9e	                JSL ANSI_CLRSCREEN
.1908ec		28		plp		                PLP
.1908ed		fa		plx		                PLX
.1908ee		68		pla		                PLA
.1908ef		6b		rtl		                RTL
.1908f0						COPYBYTES42
.1908f0		08		php		                PHP
.1908f1		0b		phd		                PHD
.1908f2		48		pha		                PHA             ; begin setdp macro
.1908f3		08		php		                PHP
.1908f4		c2 20		rep #$20	                REP #$20        ; set A long
.1908f6		a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.1908f9		5b		tcd		                TCD
.1908fa		28		plp		                PLP
.1908fb		68		pla		                PLA             ; end setdp macro
.1908fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1908fe		c2 10		rep #$10	                REP #$10        ; set X long
.190900		a0 00 00	ldy #$0000	                LDY #0
.190903		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.190905		97 04		sta [$04],y	                STA [TMPPTR2],Y
.190907		c8		iny		                INY
.190908		c0 2a 00	cpy #$002a	                CPY #42
.19090b		d0 f6		bne $190903	                BNE copy_loop
.19090d		2b		pld		                PLD
.19090e		28		plp		                PLP
.19090f		60		rts		                RTS
.190910						ICOLORFLAG
.190910		48		pha		                PHA
.190911		da		phx		                PHX
.190912		5a		phy		                PHY
.190913		08		php		                PHP
.190914		8b		phb		                PHB
.190915		0b		phd		                PHD
.190916		48		pha		                PHA             ; begin setdp macro
.190917		08		php		                PHP
.190918		c2 20		rep #$20	                REP #$20        ; set A long
.19091a		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19091d		5b		tcd		                TCD
.19091e		28		plp		                PLP
.19091f		68		pla		                PLA             ; end setdp macro
.190920		c2 30		rep #$30	                REP #$30        ; set A&X long
.190922		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.190925		85 04		sta $04		                STA TMPPTR2
.190927		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.19092a		85 06		sta $06		                STA TMPPTR2+2
.19092c		a9 ef 7a	lda #$7aef	                LDA #<>greet_clr_line1
.19092f		85 00		sta $00		                STA TMPPTR1
.190931		a9 19 00	lda #$0019	                LDA #`greet_clr_line1
.190934		85 02		sta $02		                STA TMPPTR1+2
.190936		20 f0 08	jsr $1908f0	                JSR COPYBYTES42
.190939		18		clc		                CLC
.19093a		a5 04		lda $04		                LDA TMPPTR2
.19093c		65 11		adc $11		                ADC COLS_PER_LINE
.19093e		85 04		sta $04		                STA TMPPTR2
.190940		a9 19 7b	lda #$7b19	                LDA #<>greet_clr_line2
.190943		85 00		sta $00		                STA TMPPTR1
.190945		a9 19 00	lda #$0019	                LDA #`greet_clr_line2
.190948		85 02		sta $02		                STA TMPPTR1+2
.19094a		20 f0 08	jsr $1908f0	                JSR COPYBYTES42
.19094d		18		clc		                CLC
.19094e		a5 04		lda $04		                LDA TMPPTR2
.190950		65 11		adc $11		                ADC COLS_PER_LINE
.190952		85 04		sta $04		                STA TMPPTR2
.190954		a9 43 7b	lda #$7b43	                LDA #<>greet_clr_line3
.190957		85 00		sta $00		                STA TMPPTR1
.190959		a9 19 00	lda #$0019	                LDA #`greet_clr_line3
.19095c		85 02		sta $02		                STA TMPPTR1+2
.19095e		20 f0 08	jsr $1908f0	                JSR COPYBYTES42
.190961		18		clc		                CLC
.190962		a5 04		lda $04		                LDA TMPPTR2
.190964		65 11		adc $11		                ADC COLS_PER_LINE
.190966		85 04		sta $04		                STA TMPPTR2
.190968		a9 6d 7b	lda #$7b6d	                LDA #<>greet_clr_line4
.19096b		85 00		sta $00		                STA TMPPTR1
.19096d		a9 19 00	lda #$0019	                LDA #`greet_clr_line4
.190970		85 02		sta $02		                STA TMPPTR1+2
.190972		20 f0 08	jsr $1908f0	                JSR COPYBYTES42
.190975		18		clc		                CLC
.190976		a5 04		lda $04		                LDA TMPPTR2
.190978		65 11		adc $11		                ADC COLS_PER_LINE
.19097a		85 04		sta $04		                STA TMPPTR2
.19097c		a9 97 7b	lda #$7b97	                LDA #<>greet_clr_line5
.19097f		85 00		sta $00		                STA TMPPTR1
.190981		a9 19 00	lda #$0019	                LDA #`greet_clr_line5
.190984		85 02		sta $02		                STA TMPPTR1+2
.190986		20 f0 08	jsr $1908f0	                JSR COPYBYTES42
.190989		2b		pld		                PLD
.19098a		ab		plb		                PLB
.19098b		28		plp		                PLP
.19098c		7a		ply		                PLY
.19098d		fa		plx		                PLX
.19098e		68		pla		                PLA
.19098f		6b		rtl		                RTL
.190990		0b		phd		IINITCHLUT		  PHD
.190991		08		php		                PHP
.190992		48		pha		                PHA
.190993		da		phx		                PHX
.190994		22 69 64 19	jsl $196469	                JSL ANSI_INIT_LUTS
.190998		fa		plx		                PLX
.190999		68		pla		                PLA
.19099a		28		plp		                PLP
.19099b		2b		pld		                PLD
.19099c		6b		rtl		                RTL
.19099d						IINITGAMMATABLE
.19099d		e2 20		sep #$20	                SEP #$20        ; set A short
.19099f		c2 10		rep #$10	                REP #$10        ; set X long
.1909a1		a2 00 00	ldx #$0000	                ldx #$0000
.1909a4		bf 00 83 19	lda $198300,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.1909a8		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.1909ac		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.1909b0		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.1909b4		e8		inx		                inx
.1909b5		e0 00 01	cpx #$0100	                cpx #$0100
.1909b8		d0 ea		bne $1909a4	                bne initgammaloop
.1909ba		c2 30		rep #$30	                REP #$30        ; set A&X long
.1909bc		6b		rtl		                RTL
.1909bd		48		pha		IINITALLLUT     PHA
.1909be		da		phx		                PHX
.1909bf		a2 00 00	ldx #$0000	                LDX #$0000
.1909c2		e2 20		sep #$20	                SEP #$20        ; set A short
.1909c4		a9 00		lda #$00	                LDA #$00
.1909c6		85 0a		sta $0a		                STA $0A     ; Temp Location
.1909c8						iinit_lut_loop
.1909c8		86 02		stx $02		                STX $02
.1909ca		a6 0a		ldx $0a		                LDX $0A
.1909cc		bf 00 82 19	lda $198200,x	                LDA GAMMA_2_2_Tbl, x
.1909d0		49 55		eor #$55	                EOR  #$55
.1909d2		a6 02		ldx $02		                LDX $02
.1909d4		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.1909d8		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.1909dc		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.1909e0		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.1909e4		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.1909e8		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.1909ec		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.1909f0		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.1909f4		e8		inx		                inx
.1909f5		86 02		stx $02		                STX $02
.1909f7		a6 0a		ldx $0a		                LDX $0A
.1909f9		bf 00 84 19	lda $198400,x	                LDA RANDOM_LUT_Tbl, x
.1909fd		a6 02		ldx $02		                LDX $02
.1909ff		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a03		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a07		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a0b		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a0f		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a13		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a17		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a1b		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a1f		e8		inx		                inx
.190a20		86 02		stx $02		                STX $02
.190a22		a6 0a		ldx $0a		                LDX $0A
.190a24		bf 00 83 19	lda $198300,x	                LDA GAMMA_1_8_Tbl, x
.190a28		49 aa		eor #$aa	                EOR  #$AA
.190a2a		a6 02		ldx $02		                LDX $02
.190a2c		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a30		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a34		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a38		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a3c		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a40		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a44		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a48		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a4c		e8		inx		                inx
.190a4d		a9 ff		lda #$ff	                LDA #$FF
.190a4f		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a53		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a57		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a5b		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a5f		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a63		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a67		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a6b		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a6f		e6 0a		inc $0a		                inc $0A
.190a71		e8		inx		                inx
.190a72		e0 00 04	cpx #$0400	                cpx #$0400
.190a75		f0 03		beq $190a7a	                beq iinit_lut_exit
.190a77		82 4e ff	brl $1909c8	                brl iinit_lut_loop
.190a7a						iinit_lut_exit
.190a7a		c2 30		rep #$30	                REP #$30        ; set A&X long
.190a7c		fa		plx		                PLX
.190a7d		68		pla		                PLA
.190a7e		6b		rtl		                RTL
.190a7f						INITVKYTXTMODE_BYPASS_DPSW
.190a7f		48		pha		                PHA
.190a80		08		php		                PHP
.190a81		80 24		bra $190aa7	                BRA WeNeed640480Here
.190a83						IINITVKYTXTMODE
.190a83		48		pha		                PHA
.190a84		08		php		                PHP
.190a85		e2 20		sep #$20	                SEP #$20        ; set A short
.190a87		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.190a8b		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.190a8d		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.190a8f		f0 16		beq $190aa7	                BEQ WeNeed640480Here
.190a91		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190a95		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.190a97		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.190a99		f0 33		beq $190ace	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.190a9b		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.190a9f		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.190aa1		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190aa5		80 27		bra $190ace	                BRA INITVICKYMODEHIRES
.190aa7						WeNeed640480Here:
.190aa7		e2 20		sep #$20	                SEP #$20        ; set A short
.190aa9		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190aad		29 01		and #$01	                AND #$01
.190aaf		c9 01		cmp #$01	                CMP #$01
.190ab1		d0 15		bne $190ac8	                BNE INITVICKYMODE
.190ab3		a9 00		lda #$00	                LDA #$00
.190ab5		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190ab9		ea		nop		                NOP
.190aba		ea		nop		                NOP
.190abb		ea		nop		                NOP
.190abc		ea		nop		                NOP
.190abd		ea		nop		                NOP
.190abe		a9 01		lda #$01	                LDA #$01
.190ac0		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190ac4		ea		nop		                NOP
.190ac5		ea		nop		                NOP
.190ac6		ea		nop		                NOP
.190ac7		ea		nop		                NOP
.190ac8						INITVICKYMODE
.190ac8		a9 00		lda #$00	                LDA #$00
.190aca		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.190ace						INITVICKYMODEHIRES
.190ace		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.190ad0		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.190ad4		e2 20		sep #$20	                SEP #$20        ; set A short
.190ad6		a9 00		lda #$00	                LDA #$00
.190ad8		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.190adc		a9 54		lda #$54	                LDA #$54
.190ade		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.190ae2		a9 54		lda #$54	                LDA #$54
.190ae4		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.190ae8		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.190aea		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.190aee		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.190af0		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.190af4		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.190af8		c2 30		rep #$30	                REP #$30        ; set A&X long
.190afa		22 2c 11 00	jsl $00112c	                JSL SETSIZES                      ; Calculate the size of the text screen
.190afe		28		plp		                PLP
.190aff		68		pla		                PLA
.190b00		6b		rtl		                RTL
.190b01						ISETSIZES
.190b01		22 3a 65 19	jsl $19653a	                JSL ANSI_SETSIZES
.190b05		6b		rtl		                RTL
.190b06						IINITVKYGRPMODE
.190b06		48		pha		                PHA
.190b07		e2 20		sep #$20	                SEP #$20        ; set A short
.190b09		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190b0b		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.190b0f		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190b11		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.190b15		a9 c0		lda #$c0	                LDA #$C0
.190b17		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.190b1b		a9 00		lda #$00	                LDA #$00
.190b1d		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.190b21		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190b23		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.190b27		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190b29		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.190b2d		a9 c0		lda #$c0	                LDA #$C0
.190b2f		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.190b33		a9 00		lda #$00	                LDA #$00
.190b35		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.190b39		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b3b		68		pla		                PLA
.190b3c		6b		rtl		                RTL
.190b3d						IINITTILEMODE
.190b3d		6b		rtl		                RTL
.190b3e						IREADVRAM
.190b3e		08		php		                PHP
.190b3f		e2 20		sep #$20	                SEP #$20        ; set A short
.190b41		bd 00 00	lda $000000,x	                LDA #0,B,X                      ; Request the byte
.190b44		c2 20		rep #$20	                REP #$20        ; set A long
.190b46		a2 64 00	ldx #$0064	                LDX #100
.190b49		af 02 09 af	lda $af0902	wait_loop       LDA @l VMEM2CPU_Fifo_Count_LO   ; Wait for the FIFO to have data
.190b4d		89 00 80	bit #$8000	                BIT #$8000
.190b50		f0 06		beq $190b58	                BEQ read_byte                   ; If it has data, go read the byte
.190b52		ca		dex		                DEX                             ; Otherwise, decrement timeout counter
.190b53		d0 f4		bne $190b49	                BNE wait_loop                   ; Keep waiting so long as it's not 0
.190b55		28		plp		ret_failure     PLP                             ; Return failure
.190b56		18		clc		                CLC
.190b57		6b		rtl		                RTL
.190b58						read_byte
.190b58		e2 20		sep #$20	                SEP #$20        ; set A short
.190b5a		af 01 09 af	lda $af0901	                LDA @l VMEM2CPU_Data_Port       ; Get the byte from Vicky
.190b5e		28		plp		ret_success     PLP                             ; Return success
.190b5f		18		clc		                CLC
.190b60		6b		rtl		                RTL
.190b61		6b		rtl		INOP            RTL
.190b62						IINITFONTSET
.190b62		48		pha		                PHA
.190b63		da		phx		                PHX
.190b64		5a		phy		                PHY
.190b65		8b		phb		                PHB
.190b66		08		php		                PHP
.190b67		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b69		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.190b6c		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.190b6f		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.190b72		54 af 1f	mvn #$1f,#$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.190b75		28		plp		                PLP
.190b76		ab		plb		                PLB
.190b77		7a		ply		                PLY
.190b78		fa		plx		                PLX
.190b79		68		pla		                PLA
.190b7a		6b		rtl		                RTL
.190b7b						INITMOUSEPOINTER
.190b7b		e2 20		sep #$20	                SEP #$20        ; set A short
.190b7d		c2 10		rep #$10	                REP #$10        ; set X long
.190b7f		a2 00 00	ldx #$0000	                LDX #$0000
.190b82						FILL_MOUSE_MARKER
.190b82		bf 00 85 19	lda $198500,x	                LDA @lMOUSE_POINTER_PTR,X
.190b86		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.190b8a		e8		inx		                INX
.190b8b		e0 00 01	cpx #$0100	                CPX #$0100
.190b8e		d0 f2		bne $190b82	                BNE FILL_MOUSE_MARKER
.190b90		ea		nop		                nop
.190b91		a9 01		lda #$01	                LDA #$01
.190b93		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.190b97		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b99		6b		rtl		                RTL
.190b9a						IINITCURSOR
.190b9a		e2 20		sep #$20	                SEP #$20        ; set A short
.190b9c		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.190b9e		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.190ba2		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.190ba4		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.190ba8		c2 30		rep #$30	                REP #$30        ; set A&X long
.190baa		a9 00 00	lda #$0000	                LDA #$0000;
.190bad		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.190bb1		a9 06 00	lda #$0006	                LDA #$0006;
.190bb4		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.190bb8		6b		rtl		                RTL
.190bb9		0b		phd		IINITSUPERIO	  PHD
.190bba		08		php		                PHP
.190bbb		48		pha		                PHA
.190bbc		e2 20		sep #$20	                SEP #$20        ; set A short
.190bbe		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bc0		8f 23 11 af	sta $af1123	                STA GP10_REG
.190bc4		af 23 11 af	lda $af1123	                LDA GP10_REG
.190bc8		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bca		8f 24 11 af	sta $af1124	                STA GP11_REG
.190bce		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bd0		8f 25 11 af	sta $af1125	                STA GP12_REG
.190bd4		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bd6		8f 26 11 af	sta $af1126	                STA GP13_REG
.190bda		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.190bdc		8f 27 11 af	sta $af1127	                STA GP14_REG
.190be0		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.190be2		8f 28 11 af	sta $af1128	                STA GP15_REG
.190be6		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.190be8		8f 29 11 af	sta $af1129	                STA GP16_REG
.190bec		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.190bee		8f 2a 11 af	sta $af112a	                STA GP17_REG
.190bf2		a9 00		lda #$00	                LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.190bf4		8f 2b 11 af	sta $af112b	                STA GP20_REG
.190bf8		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bfa		8f 2f 11 af	sta $af112f	                STA GP24_REG
.190bfe		a9 05		lda #$05	                LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.190c00		8f 30 11 af	sta $af1130	                STA GP25_REG
.190c04		a9 84		lda #$84	                LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.190c06		8f 31 11 af	sta $af1131	                STA GP26_REG
.190c0a		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.190c0c		8f 33 11 af	sta $af1133	                STA GP30_REG
.190c10		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.190c12		8f 34 11 af	sta $af1134	                STA GP31_REG
.190c16		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.190c18		8f 35 11 af	sta $af1135	                STA GP32_REG
.190c1c		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.190c1e		8f 36 11 af	sta $af1136	                STA GP33_REG
.190c22		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.190c24		8f 37 11 af	sta $af1137	                STA GP34_REG
.190c28		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.190c2a		8f 38 11 af	sta $af1138	                STA GP35_REG
.190c2e		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.190c30		8f 39 11 af	sta $af1139	                STA GP36_REG
.190c34		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.190c36		8f 3a 11 af	sta $af113a	                STA GP37_REG
.190c3a		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190c3c		8f 3d 11 af	sta $af113d	                STA GP42_REG
.190c40		a9 01		lda #$01	                LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.190c42		8f 3e 11 af	sta $af113e	                STA GP43_REG
.190c46		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.190c48		8f 3f 11 af	sta $af113f	                STA GP50_REG
.190c4c		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.190c4e		8f 40 11 af	sta $af1140	                STA GP51_REG
.190c52		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.190c54		8f 41 11 af	sta $af1141	                STA GP52_REG
.190c58		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.190c5a		8f 42 11 af	sta $af1142	                STA GP53_REG
.190c5e		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.190c60		8f 43 11 af	sta $af1143	                STA GP54_REG
.190c64		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.190c66		8f 44 11 af	sta $af1144	                STA GP55_REG
.190c6a		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.190c6c		8f 45 11 af	sta $af1145	                STA GP56_REG
.190c70		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.190c72		8f 46 11 af	sta $af1146	                STA GP57_REG
.190c76		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.190c78		8f 47 11 af	sta $af1147	                STA GP60_REG
.190c7c		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.190c7e		8f 48 11 af	sta $af1148	                STA GP61_REG
.190c82		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.190c84		8f 4b 11 af	sta $af114b	                STA GP1_REG
.190c88		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.190c8a		8f 4c 11 af	sta $af114c	                STA GP2_REG
.190c8e		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.190c90		8f 4d 11 af	sta $af114d	                STA GP3_REG
.190c94		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.190c96		8f 4e 11 af	sta $af114e	                STA GP4_REG
.190c9a		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.190c9c		8f 4f 11 af	sta $af114f	                STA GP5_REG
.190ca0		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.190ca2		8f 50 11 af	sta $af1150	                STA GP6_REG
.190ca6		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.190ca8		8f 5d 11 af	sta $af115d	                STA LED1_REG
.190cac		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.190cae		8f 5e 11 af	sta $af115e	                STA LED2_REG
.190cb2		c2 20		rep #$20	                REP #$20        ; set A long
.190cb4		68		pla		                PLA
.190cb5		28		plp			              PLP
.190cb6		2b		pld				            PLD
.190cb7		6b		rtl		                RTL
.190cb8		48		pha		INITRTC         PHA
.190cb9		08		php		                PHP
.190cba		e2 20		sep #$20	                SEP #$20        ; set A short
.190cbc		a9 00		lda #$00	                LDA #0
.190cbe		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.190cc2		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.190cc6		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.190cca		09 04		ora #$04	                ORA #%00000100
.190ccc		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.190cd0		28		plp		                PLP
.190cd1		68		pla		                PLA
.190cd2		6b		rtl		                RTL
.190cd3		48		pha		IINITCODEC      PHA
.190cd4		08		php		                PHP
.190cd5		c2 20		rep #$20	                REP #$20        ; set A long
.190cd7		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.190cda		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190cde		a9 01 00	lda #$0001	                LDA #$0001
.190ce1		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190ce5		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190ce8		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.190ceb		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190cef		a9 01 00	lda #$0001	                LDA #$0001
.190cf2		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190cf6		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190cf9		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.190cfc		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d00		a9 01 00	lda #$0001	                LDA #$0001
.190d03		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d07		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d0a		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.190d0d		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d11		a9 01 00	lda #$0001	                LDA #$0001
.190d14		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d18		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d1b		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.190d1e		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d22		a9 01 00	lda #$0001	                LDA #$0001
.190d25		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d29		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d2c		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.190d2f		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d33		a9 01 00	lda #$0001	                LDA #$0001
.190d36		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d3a		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d3d		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.190d40		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d44		a9 01 00	lda #$0001	                LDA #$0001
.190d47		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d4b		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d4e		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.190d51		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d55		a9 01 00	lda #$0001	                LDA #$0001
.190d58		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d5c		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d5f		28		plp		                PLP
.190d60		68		pla		                PLA
.190d61		6b		rtl		                RTL
.190d62						IRESETCODEC
.190d62		c2 20		rep #$20	                REP #$20        ; set A long
.190d64		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.190d67		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d6b		a9 01 00	lda #$0001	                LDA #$0001
.190d6e		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d72		20 76 0d	jsr $190d76	                JSR CODEC_TRF_FINISHED
.190d75		6b		rtl		                RTL
.190d76						CODEC_TRF_FINISHED
.190d76		e2 20		sep #$20	                SEP #$20        ; set A short
.190d78		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.190d7c		29 01		and #$01	                AND #$01
.190d7e		c9 01		cmp #$01	                CMP #$01
.190d80		f0 f6		beq $190d78	                BEQ CODEC_LOOP
.190d82		c2 20		rep #$20	                REP #$20        ; set A long
.190d84		60		rts		                RTS
.190d85						IBM_FILL_SCREEN
.190d85		c2 30		rep #$30	                REP #$30        ; set A&X long
.190d87		a9 00 00	lda #$0000	                LDA #$0000
.190d8a		a2 00 00	ldx #$0000	                LDX #$0000
.190d8d						BM_FILL_SCREEN_LOOPY
.190d8d		a0 00 00	ldy #$0000	                LDY #$0000
.190d90		e2 20		sep #$20	                SEP #$20        ; set A short
.190d92						BM_FILL_SCREEN_LOOPX
.190d92		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190d94		c8		iny		                INY
.190d95		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.190d97		d0 f9		bne $190d92	                BNE BM_FILL_SCREEN_LOOPX
.190d99		20 a4 0d	jsr $190da4	                JSR BM_FILL_COMPUTE_Y_DST
.190d9c		e8		inx		                INX
.190d9d		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.190d9f		d0 ec		bne $190d8d	                BNE BM_FILL_SCREEN_LOOPY
.190da1		c2 30		rep #$30	                REP #$30        ; set A&X long
.190da3		6b		rtl		                RTL
.190da4						BM_FILL_COMPUTE_Y_DST
.190da4		c2 20		rep #$20	                REP #$20        ; set A long
.190da6		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190da8		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190dac		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.190dae		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190db2		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.190db5		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190db9		a9 00 00	lda #$0000	                LDA #$0000
.190dbc		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190dc0		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190dc4		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190dc6		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190dca		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190dcc		a9 00 00	lda #$0000	                LDA #$0000
.190dcf		60		rts		                RTS
.190dd0						IBMP_PARSER
.190dd0		c2 30		rep #$30	                REP #$30        ; set A&X long
.190dd2		a0 00 00	ldy #$0000	                LDY #$0000
.190dd5		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.190dd7		c9 42 4d	cmp #$4d42	                CMP #$4D42
.190dda		f0 03		beq $190ddf	                BEQ IBMP_PARSER_CONT
.190ddc		82 04 01	brl $190ee3	                BRL BMP_PARSER_END_WITH_ERROR
.190ddf						IBMP_PARSER_CONT
.190ddf		a0 02 00	ldy #$0002	                LDY #$0002
.190de2		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.190de4		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190de8		a0 04 00	ldy #$0004	                LDY #$0004
.190deb		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.190ded		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190df1		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.190df4		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190df8		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190dfc		18		clc		                CLC
.190dfd		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190e01		85 50		sta $50		                STA BMP_FILE_SIZE
.190e03		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190e07		85 52		sta $52		                STA BMP_FILE_SIZE+2
.190e09		a0 12 00	ldy #$0012	                LDY #$0012
.190e0c		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e0e		85 40		sta $40		                STA BMP_X_SIZE
.190e10		a0 16 00	ldy #$0016	                LDY #$0016
.190e13		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e15		85 42		sta $42		                STA BMP_Y_SIZE
.190e17		a0 2e 00	ldy #$002e	                LDY #$002E
.190e1a		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e1c		0a		asl a		                ASL A; Multiply by 2
.190e1d		0a		asl a		                ASL A; Multiply by 2
.190e1e		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.190e20		e0 00 00	cpx #$0000	                CPX #$0000
.190e23		d0 05		bne $190e2a	                BNE BMP_LUT1_PICK
.190e25		20 eb 0e	jsr $190eeb	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.190e28		80 08		bra $190e32	                BRA DONE_TRANSFER_LUT;
.190e2a						  BMP_LUT1_PICK
.190e2a		e0 01 00	cpx #$0001	                CPX #$0001
.190e2d		d0 03		bne $190e32	                BNE BMP_LUT2_PICK
.190e2f		20 1b 0f	jsr $190f1b	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.190e32						  BMP_LUT2_PICK
.190e32						  DONE_TRANSFER_LUT
.190e32		a5 56		lda $56		                LDA BMP_POSITION_Y
.190e34		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.190e38		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.190e3a		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.190e3e		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.190e42		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190e46		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.190e4a		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190e4e		a5 54		lda $54		                LDA BMP_POSITION_X
.190e50		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.190e54		a9 00 00	lda #$0000	                LDA #$0000
.190e57		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190e5b		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.190e5f		85 f0		sta $f0		                STA USER_TEMP
.190e61		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.190e65		85 f2		sta $f2		                STA USER_TEMP+2
.190e67		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190e69		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190e6d		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190e6f		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190e73		a5 f0		lda $f0		                LDA USER_TEMP
.190e75		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.190e79		a5 f2		lda $f2		                LDA USER_TEMP+2
.190e7b		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.190e7f		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.190e83		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190e85		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.190e89		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190e8b		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.190e8d		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190e91		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.190e93		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190e97		a5 50		lda $50		                LDA BMP_FILE_SIZE
.190e99		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190e9d		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.190e9f		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190ea3		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190ea7		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190ea9		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190ead		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190eaf		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190eb1		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190eb5		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190eb7		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190ebb		18		clc		                CLC
.190ebc		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.190ebe		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.190ec1		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.190ec4		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.190ec8		a9 ff ff	lda #$ffff	                LDA #$FFFF
.190ecb		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.190ecf		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190ed3		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190ed5		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190ed9		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190edb		20 4b 0f	jsr $190f4b	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.190ede		a2 53 7d	ldx #$7d53	                LDX #<>bmp_parser_msg0
.190ee1		80 03		bra $190ee6	                BRA BMP_PARSER_END_NO_ERROR
.190ee3						BMP_PARSER_END_WITH_ERROR
.190ee3		a2 3f 7d	ldx #$7d3f	                LDX #<>bmp_parser_err0
.190ee6						BMP_PARSER_END_NO_ERROR
.190ee6		22 01 07 19	jsl $190701	                JSL IPRINT       ; print the first line
.190eea		6b		rtl		                RTL
.190eeb						BMP_PARSER_UPDATE_LUT0
.190eeb		38		sec		                SEC
.190eec		a0 7a 00	ldy #$007a	                LDY #$007A
.190eef		a2 00 00	ldx #$0000	                LDX #$0000
.190ef2		e2 20		sep #$20	                SEP #$20        ; set A short
.190ef4						BMP_PARSER_UPDATE_LOOP
.190ef4		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190ef6		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.190efa		c8		iny		                INY
.190efb		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190efd		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.190f01		c8		iny		                INY
.190f02		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190f04		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.190f08		c8		iny		                INY
.190f09		a9 80		lda #$80	                LDA #$80
.190f0b		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.190f0f		c8		iny		                INY ; For the Alpha Value, nobody cares
.190f10		e8		inx		                INX
.190f11		e8		inx		                INX
.190f12		e8		inx		                INX
.190f13		e8		inx		                INX
.190f14		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190f16		d0 dc		bne $190ef4	                BNE BMP_PARSER_UPDATE_LOOP
.190f18		c2 20		rep #$20	                REP #$20        ; set A long
.190f1a		60		rts		                RTS
.190f1b						BMP_PARSER_UPDATE_LUT1
.190f1b		38		sec		                SEC
.190f1c		a0 36 00	ldy #$0036	                LDY #$0036
.190f1f		a2 00 00	ldx #$0000	                LDX #$0000
.190f22		e2 20		sep #$20	                SEP #$20        ; set A short
.190f24						PALETTE_LUT1_LOOP
.190f24		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190f26		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.190f2a		c8		iny		                INY
.190f2b		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190f2d		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.190f31		c8		iny		                INY
.190f32		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190f34		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.190f38		c8		iny		                INY
.190f39		a9 80		lda #$80	                LDA #$80
.190f3b		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.190f3f		c8		iny		                INY ; For the Alpha Value, nobody cares
.190f40		e8		inx		                INX
.190f41		e8		inx		                INX
.190f42		e8		inx		                INX
.190f43		e8		inx		                INX
.190f44		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190f46		d0 dc		bne $190f24	                BNE PALETTE_LUT1_LOOP
.190f48		c2 20		rep #$20	                REP #$20        ; set A long
.190f4a		60		rts		                RTS
.190f4b						BMP_PARSER_DMA_SHIT_OUT
.190f4b		a2 00 00	ldx #$0000	                LDX #$0000
.190f4e						BMP_PARSER_LOOPY
.190f4e		a0 00 00	ldy #$0000	                LDY #$0000
.190f51		e2 20		sep #$20	                SEP #$20        ; set A short
.190f53						BMP_PARSER_LOOPX
.190f53		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.190f55		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190f57		c8		iny		                INY
.190f58		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.190f5a		d0 f7		bne $190f53	                BNE BMP_PARSER_LOOPX
.190f5c		20 68 0f	jsr $190f68	                JSR BMP_PARSER_COMPUTE_Y_SRC
.190f5f		20 83 0f	jsr $190f83	                JSR BMP_PARSER_COMPUTE_Y_DST
.190f62		e8		inx		                INX
.190f63		e4 42		cpx $42		                CPX BMP_Y_SIZE
.190f65		d0 e7		bne $190f4e	                BNE BMP_PARSER_LOOPY
.190f67		60		rts		                RTS
.190f68						BMP_PARSER_COMPUTE_Y_SRC
.190f68		c2 20		rep #$20	                REP #$20        ; set A long
.190f6a		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190f6c		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190f70		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190f72		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190f76		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190f7a		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190f7c		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190f80		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190f82		60		rts		                RTS
.190f83						BMP_PARSER_COMPUTE_Y_DST
.190f83		c2 20		rep #$20	                REP #$20        ; set A long
.190f85		18		clc		                CLC
.190f86		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190f88		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.190f8a		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190f8c		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190f8e		69 00 00	adc #$0000	                ADC #$0000
.190f91		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190f93		60		rts		                RTS
.190f94		ea		nop		ILOOP           NOP
.190f95		ea		nop		                NOP
.190f96		ea		nop		                NOP
.190f97		ea		nop		                NOP
.190f98		ea		nop		                NOP
.190f99		ea		nop		                NOP
.190f9a		ea		nop		                NOP
.190f9b		ea		nop		                NOP
.190f9c		ea		nop		                NOP
.190f9d		ea		nop		                NOP
.190f9e		6b		rtl		                RTL
.190f9f		22 94 0f 19	jsl $190f94	ILOOP_1         JSL ILOOP
.190fa3		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fa7		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fab		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190faf		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fb3		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fb7		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fbb		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fbf		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fc3		22 94 0f 19	jsl $190f94	                JSL ILOOP
.190fc7		6b		rtl		                RTL
.190fc8		22 9f 0f 19	jsl $190f9f	ILOOP_1MS       JSL ILOOP_1
.190fcc		6b		rtl		                RTL
.190fcd		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.190fd0		f0 07		beq $190fd9	                BEQ LOOP_MS_END
.190fd2		22 c8 0f 19	jsl $190fc8	                JSL ILOOP_1MS
.190fd6		ca		dex		                DEX
.190fd7		80 f4		bra $190fcd	                BRA ILOOP_MS
.190fd9		6b		rtl		LOOP_MS_END     RTL
.190fda						IDELAY
.190fda		48		pha		                PHA
.190fdb		8b		phb		                PHB
.190fdc		08		php		                PHP
.190fdd		48		pha		                PHA             ; begin setdbr macro
.190fde		08		php		                PHP
.190fdf		e2 20		sep #$20	                SEP #$20        ; set A short
.190fe1		a9 00		lda #$00	                LDA #0
.190fe3		48		pha		                PHA
.190fe4		ab		plb		                PLB
.190fe5		28		plp		                PLP
.190fe6		68		pla		                PLA             ; end setdbr macro
.190fe7		c2 30		rep #$30	                REP #$30        ; set A&X long
.190fe9		da		phx		                PHX                         ; Save the delay amount
.190fea		5a		phy		                PHY
.190feb		a9 02 00	lda #$0002	                LDA #$02                    ; Set the handler for TIMER0 interrupts
.190fee		a0 18 00	ldy #$0018	                LDY #`HANDLE_TIMER0
.190ff1		a2 97 19	ldx #$1997	                LDX #<>HANDLE_TIMER0
.190ff4		22 48 11 00	jsl $001148	                JSL SETHANDLER
.190ff8		7a		ply		                PLY                         ; Restore the delay amount
.190ff9		fa		plx		                PLX
.190ffa		e2 20		sep #$20	                SEP #$20        ; set A short
.190ffc		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.190ffe		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.191002		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.191006		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.191008		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.19100c		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.19100e		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.191011		a9 00		lda #$00	                LDA #0
.191013		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.191017		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.19101b		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.19101f		c2 30		rep #$30	                REP #$30        ; set A&X long
.191021		8a		txa		                TXA
.191022		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.191026		98		tya		                TYA
.191027		e2 20		sep #$20	                SEP #$20        ; set A short
.191029		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.19102d		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.19102f		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.191033		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.191035		cb		wai		loop            WAI                         ; Wait for an interrupt
.191036		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.191039		f0 fa		beq $191035	                BEQ loop                    ; Keep checking until it's set
.19103b		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.19103d		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.191041		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.191043		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.191046		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.19104a		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.19104c		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.191050		28		plp		                PLP
.191051		ab		plb		                PLB
.191052		68		pla		                PLA
.191053		6b		rtl		                RTL
.191054						SHOW_CREDITS
.191054		48		pha		                PHA
.191055		da		phx		                PHX
.191056		5a		phy		                PHY
.191057		08		php		                PHP
.191058		e2 20		sep #$20	                SEP #$20        ; set A short
.19105a		c2 10		rep #$10	                REP #$10        ; set X long
.19105c		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.191060		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.191062		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.191066		a2 00 00	ldx #$0000	                LDX #0
.191069		bf 00 00 1b	lda $1b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.19106d		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.191071		bf 00 18 1b	lda $1b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.191075		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.191079		e8		inx		                INX
.19107a		e0 00 20	cpx #$2000	                CPX #128 * 64
.19107d		d0 ea		bne $191069	                BNE credit_loop
.19107f		22 9b 06 19	jsl $19069b	                JSL IGETCHW                     ; Wait for a keypress
.191083		22 e5 08 19	jsl $1908e5	                JSL ICLRSCREEN                  ; Then clear the screen and return
.191087		22 15 08 19	jsl $190815	                JSL ICSRHOME                    ; Move cursor to the home position
.19108b		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.19108f		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.191091		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.191095		28		plp		                PLP
.191096		7a		ply		                PLY
.191097		fa		plx		                PLX
.191098		68		pla		                PLA
.191099		6b		rtl		                RTL
.19109a		00		brk #		ISCINIT         BRK ;
.19109b		00		brk #		IIOINIT         BRK ;
.19109c		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.19109d		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.19109e		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.19109f		00		brk #		ICLOSE          BRK ; Close a channel
.1910a0		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.1910a1		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.1910a2		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.1910a3		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.1910a4		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.1910a5		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.1910a6		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.1910a7		00		brk #		IPRINTF         BRK ; Print a float value
.1910a8		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.1910a9		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.1910aa		00		brk #		IPUSHKEY        BRK ;
.1910ab		00		brk #		IPUSHKEYS       BRK ;
.1910ac		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.1910ad		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.1910ae		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src/Libraries/OPL2_Library.asm


;******  Processing file: src/Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>1910af		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>1910b7		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>1910c7		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>1910cf		12
>1910d0		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>1910d8		15
>1910d9		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>1910df		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>1910e4		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src/Libraries/OPL2_Library.asm


;******  Processing file: src/Libraries/OPL2_Instruments.asm

>1910ea		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>1910f2		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>191100		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>191108		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>191116		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>19111e		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>19112c		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>191134		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>191142		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>19114a		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>191158		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>191160		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>19116e		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>191176		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>191184		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>19118c		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>19119a		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>1911a2		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>1911b0		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>1911b8		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>1911c6		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>1911ce		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>1911dc		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>1911e4		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>1911f2		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>1911fa		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>191208		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>191210		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>19121e		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>191226		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>191234		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>19123c		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>19124a		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>191252		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>191260		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>191268		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>191276		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>19127e		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>19128c		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>191294		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>1912a2		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>1912aa		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>1912b8		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>1912c0		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>1912ce		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>1912d6		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>1912e4		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>1912ec		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>1912fa		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>191302		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>191310		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>191318		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>191326		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>19132e		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>19133c		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>191344		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>191352		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>19135a		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>191368		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>191370		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>19137e		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>191386		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>191394		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>19139c		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>1913aa		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>1913b2		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>1913c0		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>1913c8		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>1913d6		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>1913de		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>1913ec		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>1913f4		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>191402		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>19140a		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>191418		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>191420		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>19142e		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>191436		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>191444		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>19144c		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>19145a		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>191462		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>191470		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>191478		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>191486		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>19148e		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>19149c		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>1914a4		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>1914b2		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>1914ba		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>1914c8		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>1914d0		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>1914de		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>1914e6		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>1914f4		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>1914fc		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>19150a		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>191512		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>191520		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>191528		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>191536		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>19153e		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>19154c		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>191554		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>191562		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>19156a		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>191578		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>191580		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>19158e		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>191596		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>1915a4		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>1915ac		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>1915ba		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>1915c2		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>1915d0		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>1915d8		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>1915e6		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>1915ee		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>1915fc		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>191604		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>191612		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>19161a		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>191628		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>191630		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>19163e		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>191646		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>191654		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>19165c		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>19166a		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>191672		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>191680		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>191688		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>191696		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>19169e		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>1916ac		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>1916b4		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>1916c2		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>1916ca		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>1916d8		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>1916e0		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>1916ee		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>1916f6		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>191704		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>19170c		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>19171a		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>191722		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>191730		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>191738		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>191746		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>19174e		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>19175c		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>191764		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>191772		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>19177a		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>191788		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>191790		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>19179e		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>1917a6		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>1917b4		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>1917bc		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>1917ca		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>1917d2		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>1917e0		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>1917e8		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>1917f6		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>1917fe		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>19180c		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>191814		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>191822		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>19182a		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>191838		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>191840		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>19184e		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>191856		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>191864		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>19186c		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>19187a		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>191882		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>191890		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>191898		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>1918a6		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>1918ae		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>1918bc		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>1918c4		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>1918d2		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>1918da		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>1918e8		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>1918f0		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>1918fe		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>191906		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>191914		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>19191c		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>19192a		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>191932		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>191940		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>191948		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>191956		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>19195e		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>19196c		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>191974		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>191982		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>19198a		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>191998		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>1919a0		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>1919ae		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>1919b6		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>1919c4		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>1919cc		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>1919da		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>1919e2		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>1919f0		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>1919f8		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>191a06		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>191a0e		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>191a1c		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>191a24		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>191a32		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>191a3a		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>191a48		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>191a50		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>191a5e		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>191a66		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>191a74		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>191a7c		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>191a8a		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>191a92		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>191aa0		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>191aa8		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>191ab6		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>191abe		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>191acc		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>191ad4		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>191ae2		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>191aea		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>191af8		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>191b00		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>191b0e		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>191b16		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>191b24		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>191b2c		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>191b3a		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>191b42		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>191b50		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>191b58		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>191b66		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>191b6e		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>191b7c		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>191b84		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>191b92		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>191b9a		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>191ba8		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>191bb0		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>191bbe		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>191bc6		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>191bd4		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>191bdc		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>191bea		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>191bf2		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>191c00		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>191c08		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>191c16		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>191c1e		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>191c2c		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>191c34		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>191c42		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>191c4a		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>191c58		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>191c60		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>191c6e		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>191c76		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>191c84		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>191c8c		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>191c9a		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>191ca2		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>191cb0		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>191cb8		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>191cc6		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>191cce		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>191cdc		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>191ce4		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>191cf2		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>191cfa		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>191d08		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>191d10		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>191d1e		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>191d26		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>191d34		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>191d3c		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>191d4a		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>191d52		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src/Libraries/OPL2_Library.asm


;******  Processing file: src/Libraries/OPL2_Midi_Drums.asm

>191d60		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>191d68		00 87 fa 00
>191d6c		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>191d74		00 88 98 03
>191d78		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>191d80		00 88 98 03
>191d84		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191d8c		00 f9 69 00
>191d90		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>191d98		80 e8 4a 00
>191d9c		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191da4		00 f6 9a 00
>191da8		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>191db0		1b f2 34 00
>191db4		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>191dbc		00 f7 8a 00
>191dc0		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>191dc8		00 f6 47 00
>191dcc		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191dd4		00 f9 69 00
>191dd8		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>191de0		00 f7 a9 00
>191de4		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>191dec		00 87 fa 00
>191df0		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>191df8		00 f7 a9 00
>191dfc		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e04		00 f5 f5 00
>191e08		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>191e10		06 b8 d8 03
>191e14		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e1c		00 f5 f5 00
>191e20		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>191e28		06 b8 d8 03
>191e2c		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e34		00 f5 f5 00
>191e38		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>191e40		10 74 f8 03
>191e44		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e4c		00 f5 f5 00
>191e50		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e58		00 f5 f5 00
>191e5c		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191e64		05 c5 d4 03
>191e68		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e70		00 f5 f5 00
>191e74		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191e7c		04 f9 44 03
>191e80		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191e88		05 c5 d4 03
>191e8c		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191e94		04 f9 44 03
>191e98		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>191ea0		03 87 f7 03
>191ea4		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191eac		05 c5 d4 03
>191eb0		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>191eb8		00 f6 28 00
>191ebc		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191ec4		05 c5 d4 03
>191ec8		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>191ed0		00 f5 f7 01
>191ed4		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191edc		04 f9 44 03
>191ee0		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>191ee8		00 99 f9 00
>191eec		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>191ef4		00 a8 f7 00
>191ef8		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>191f00		00 99 f9 00
>191f04		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>191f0c		00 a6 f6 00
>191f10		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>191f18		00 a6 f6 00
>191f1c		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>191f24		00 f6 36 02
>191f28		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>191f30		00 f6 36 02
>191f34		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>191f3c		00 96 e8 01
>191f40		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>191f48		00 96 e8 01
>191f4c		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191f54		02 79 77 03
>191f58		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191f60		02 79 77 03
>191f64		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>191f6c		00 a5 2b 02
>191f70		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>191f78		00 93 3b 02
>191f7c		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>191f84		01 89 3b 03
>191f88		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>191f90		0a 53 2b 02
>191f94		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>191f9c		00 f6 89 00
>191fa0		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191fa8		00 f6 9a 00
>191fac		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191fb4		00 f6 9a 00
>191fb8		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>191fc0		00 87 4b 01
>191fc4		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>191fcc		00 78 67 01
>191fd0		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>191fd8		02 f8 fc 00
>191fdc		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>191fe4		40 f5 f5 00
>191fe8		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191ff0		02 79 77 03
>191ff4		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>191ffc		40 f5 f5 00
>192000		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>192008		40 f5 f5 00
>19200c		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>192014		00 f9 69 00
>192018		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>192020		00 f9 69 00
>192024		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>19202c		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>192030		60 1d 19 00 6c 1d 19 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>192038		78 1d 19 00 84 1d 19 00
>192040		90 1d 19 00 9c 1d 19 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>192048		a8 1d 19 00 b4 1d 19 00
>192050		c0 1d 19 00 cc 1d 19 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>192058		d8 1d 19 00 e4 1d 19 00
>192060		f0 1d 19 00 fc 1d 19 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>192068		08 1e 19 00 14 1e 19 00
>192070		20 1e 19 00 2c 1e 19 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>192078		38 1e 19 00 44 1e 19 00
>192080		50 1e 19 00 5c 1e 19 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>192088		68 1e 19 00 74 1e 19 00
>192090		80 1e 19 00 8c 1e 19 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>192098		98 1e 19 00 a4 1e 19 00
>1920a0		b0 1e 19 00 bc 1e 19 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>1920a8		c8 1e 19 00 d4 1e 19 00
>1920b0		e0 1e 19 00 ec 1e 19 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>1920b8		f8 1e 19 00 04 1f 19 00
>1920c0		10 1f 19 00 1c 1f 19 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>1920c8		28 1f 19 00 34 1f 19 00
>1920d0		40 1f 19 00 4c 1f 19 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>1920d8		58 1f 19 00 64 1f 19 00
>1920e0		70 1f 19 00 7c 1f 19 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>1920e8		88 1f 19 00 94 1f 19 00
>1920f0		a0 1f 19 00 ac 1f 19 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>1920f8		b8 1f 19 00 c4 1f 19 00
>192100		d0 1f 19 00 dc 1f 19 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>192108		e8 1f 19 00 f4 1f 19 00
>192110		00 20 19 00 0c 20 19 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>192118		18 20 19 00 24 20 19 00

;******  Return to file: src/Libraries/OPL2_Library.asm


;******  Processing file: src/Libraries/OPL2_Midi_Instruments.asm

>192120		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>192128		00 b1 f5 01
>19212c		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>192134		03 f1 f5 00
>192138		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>192140		03 c1 f5 00
>192144		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>19214c		00 92 f5 01
>192150		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>192158		00 f1 f9 00
>19215c		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>192164		00 f1 f5 00
>192168		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>192170		02 81 f6 01
>192174		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>19217c		00 c2 b9 01
>192180		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>192188		05 b2 35 00
>19218c		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>192194		1b f2 34 00
>192198		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>1921a0		01 f5 74 00
>1921a4		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>1921ac		00 61 e3 00
>1921b0		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>1921b8		00 a4 64 00
>1921bc		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>1921c4		07 b5 f5 00
>1921c8		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>1921d0		00 f3 74 00
>1921d4		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>1921dc		00 c3 94 01
>1921e0		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>1921e8		00 f4 0d 01
>1921ec		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>1921f4		00 f5 0b 01
>1921f8		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>192200		00 bf 07 00
>192204		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>19220c		00 6d 08 01
>192210		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>192218		00 51 17 01
>19221c		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>192224		00 51 17 01
>192228		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>192230		00 53 08 01
>192234		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>19223c		00 53 06 01
>192240		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>192248		00 d2 f8 00
>19224c		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>192254		00 e2 c7 01
>192258		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>192260		00 f1 9c 00
>192264		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>19226c		02 f2 c9 01
>192270		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>192278		03 95 fb 00
>19227c		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>192284		04 a1 59 00
>192288		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>192290		03 91 fc 03
>192294		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>19229c		02 b4 ec 00
>1922a0		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>1922a8		00 93 f7 00
>1922ac		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>1922b4		04 c1 58 00
>1922b8		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>1922c0		02 c3 6a 00
>1922c4		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>1922cc		00 62 87 00
>1922d0		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>1922d8		00 f3 97 00
>1922dc		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>1922e4		00 b3 97 00
>1922e8		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>1922f0		04 f3 cc 00
>1922f4		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>1922fc		00 93 aa 00
>192300		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>192308		00 78 08 01
>19230c		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>192314		00 78 08 01
>192318		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>192320		00 54 27 01
>192324		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>19232c		00 61 56 00
>192330		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>192338		00 75 16 01
>19233c		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>192344		00 f5 f6 01
>192348		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>192350		80 f3 e3 00
>192354		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>19235c		00 b5 f5 00
>192360		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>192368		80 71 16 00
>19236c		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>192374		00 30 55 01
>192378		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>192380		00 62 36 01
>192384		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>19238c		02 51 07 00
>192390		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>192398		00 62 39 00
>19239c		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>1923a4		00 66 27 00
>1923a8		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>1923b0		00 73 46 00
>1923b4		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>1923bc		00 74 76 01
>1923c0		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>1923c8		81 92 38 00
>1923cc		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>1923d4		02 71 19 00
>1923d8		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>1923e0		01 81 09 00
>1923e4		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>1923ec		00 83 4b 02
>1923f0		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>1923f8		05 71 59 00
>1923fc		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>192404		03 82 39 00
>192408		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>192410		82 84 17 00
>192414		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>19241c		02 72 16 00
>192420		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>192428		00 7b 0a 00
>19242c		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>192434		00 85 0c 01
>192438		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>192440		00 7b 0a 01
>192444		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>19244c		00 79 18 01
>192450		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>192458		01 73 08 00
>19245c		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>192464		04 77 0a 00
>192468		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>192470		00 51 19 00
>192474		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>19247c		01 74 09 00
>192480		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>192488		01 63 28 00
>19248c		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>192494		00 65 0a 00
>192498		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>1924a0		00 67 29 00
>1924a4		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>1924ac		00 67 09 00
>1924b0		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>1924b8		01 6a 28 00
>1924bc		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>1924c4		00 55 27 00
>1924c8		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>1924d0		00 6f 08 00
>1924d4		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>1924dc		00 7a 07 00
>1924e0		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>1924e8		06 a2 0d 00
>1924ec		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>1924f4		00 a3 5f 00
>1924f8		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>192500		00 42 27 00
>192504		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>19250c		05 b2 49 00
>192510		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>192518		00 b2 79 01
>19251c		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>192524		00 7a 1a 00
>192528		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>192530		00 82 28 01
>192534		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>19253c		02 c3 5f 00
>192540		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>192548		86 c4 95 01
>19254c		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>192554		00 44 15 00
>192558		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>192560		00 d1 06 00
>192564		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>19256c		00 82 37 00
>192570		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>192578		00 41 35 00
>19257c		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>192584		02 32 f5 01
>192588		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>192590		00 61 26 00
>192594		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>19259c		84 3f 05 01
>1925a0		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>1925a8		01 d1 f6 00
>1925ac		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>1925b4		00 41 05 01
>1925b8		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>1925c0		05 f3 e4 00
>1925c4		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>1925cc		00 92 f5 01
>1925d0		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>1925d8		04 f2 e4 01
>1925dc		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>1925e4		00 45 25 00
>1925e8		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>1925f0		01 a3 36 00
>1925f4		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>1925fc		01 98 05 01
>192600		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>192608		02 a3 f6 01
>19260c		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>192614		00 f6 f8 00
>192618		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>192620		00 f3 f5 00
>192624		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>19262c		00 94 e5 01
>192630		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>192638		00 84 44 00
>19263c		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>192644		03 83 18 01
>192648		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>192650		01 78 08 01
>192654		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>19265c		03 8e 08 01
>192660		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>192668		09 f2 46 00
>19266c		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>192674		00 96 e8 01
>192678		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>192680		00 f6 f6 01
>192684		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>19268c		00 f6 9a 00
>192690		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>192698		00 c6 45 00
>19269c		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>1926a4		00 f4 b4 00
>1926a8		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>1926b0		00 d5 25 00
>1926b4		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>1926bc		0e 21 2d 00
>1926c0		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>1926c8		00 55 87 02
>1926cc		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>1926d4		08 98 87 01
>1926d8		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>1926e0		04 17 04 03
>1926e4		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>1926ec		05 77 f9 02
>1926f0		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>1926f8		02 f4 08 00
>1926fc		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>192704		00 36 05 01
>192708		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>192710		05 32 55 03
>192714		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>19271c		00 f3 df 00
>192720		20 21 19 00 2c 21 19 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>192728		38 21 19 00 44 21 19 00 50 21 19 00 5c 21 19 00
>192738		68 21 19 00 74 21 19 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>192740		80 21 19 00 8c 21 19 00 98 21 19 00 a4 21 19 00
>192750		b0 21 19 00 bc 21 19 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>192758		c8 21 19 00 d4 21 19 00 e0 21 19 00 ec 21 19 00
>192768		f8 21 19 00 04 22 19 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>192770		10 22 19 00 1c 22 19 00 28 22 19 00 34 22 19 00
>192780		40 22 19 00 4c 22 19 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>192788		58 22 19 00 64 22 19 00 70 22 19 00 7c 22 19 00
>192798		88 22 19 00 94 22 19 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>1927a0		a0 22 19 00 ac 22 19 00 b8 22 19 00 c4 22 19 00
>1927b0		d0 22 19 00 dc 22 19 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>1927b8		e8 22 19 00 f4 22 19 00 00 23 19 00 0c 23 19 00
>1927c8		18 23 19 00 24 23 19 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>1927d0		30 23 19 00 3c 23 19 00 48 23 19 00 54 23 19 00
>1927e0		60 23 19 00 6c 23 19 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>1927e8		78 23 19 00 84 23 19 00 90 23 19 00 9c 23 19 00
>1927f8		a8 23 19 00 b4 23 19 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>192800		c0 23 19 00 cc 23 19 00 d8 23 19 00 e4 23 19 00
>192810		f0 23 19 00 fc 23 19 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>192818		08 24 19 00 14 24 19 00 20 24 19 00 2c 24 19 00
>192828		38 24 19 00 44 24 19 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>192830		50 24 19 00 5c 24 19 00 68 24 19 00 74 24 19 00
>192840		80 24 19 00 8c 24 19 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>192848		98 24 19 00 a4 24 19 00 b0 24 19 00 bc 24 19 00
>192858		c8 24 19 00 d4 24 19 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>192860		e0 24 19 00 ec 24 19 00 f8 24 19 00 04 25 19 00
>192870		10 25 19 00 1c 25 19 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>192878		28 25 19 00 34 25 19 00 40 25 19 00 4c 25 19 00
>192888		58 25 19 00 64 25 19 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>192890		70 25 19 00 7c 25 19 00 88 25 19 00 94 25 19 00
>1928a0		a0 25 19 00 ac 25 19 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>1928a8		b8 25 19 00 c4 25 19 00 d0 25 19 00 dc 25 19 00
>1928b8		e8 25 19 00 f4 25 19 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>1928c0		00 26 19 00 0c 26 19 00 18 26 19 00 24 26 19 00
>1928d0		30 26 19 00 3c 26 19 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>1928d8		48 26 19 00 54 26 19 00 60 26 19 00 6c 26 19 00
>1928e8		78 26 19 00 84 26 19 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>1928f0		90 26 19 00 9c 26 19 00 a8 26 19 00 b4 26 19 00
>192900		c0 26 19 00 cc 26 19 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>192908		d8 26 19 00 e4 26 19 00 f0 26 19 00 fc 26 19 00
>192918		08 27 19 00 14 27 19 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src/Libraries/OPL2_Library.asm


;******  Processing file: src/Libraries/OPL2_Midi_Instruments_Win31.asm

>192920		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>192928		0d f2 f7 00
>19292c		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>192934		07 f2 f7 00
>192938		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>192940		07 f2 f6 00
>192944		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>19294c		07 f2 f7 00
>192950		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>192958		07 f2 f7 00
>19295c		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>192964		07 f2 f7 00
>192968		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192970		00 00 00 00
>192974		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>19297c		00 00 00 00
>192980		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192988		00 00 00 00
>19298c		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>192994		87 f2 f1 00
>192998		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>1929a0		07 f4 f4 00
>1929a4		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>1929ac		07 f2 f6 00
>1929b0		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>1929b8		07 e7 f7 00
>1929bc		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>1929c4		07 f6 f6 00
>1929c8		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>1929d0		87 a3 f3 00
>1929d4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929dc		00 00 00 00
>1929e0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929e8		00 00 00 00
>1929ec		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929f4		00 00 00 00
>1929f8		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>192a00		07 8a 08 00
>192a04		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>192a0c		07 55 14 00
>192a10		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>192a18		87 55 04 00
>192a1c		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>192a24		07 46 1a 00
>192a28		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>192a30		07 61 07 00
>192a34		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>192a3c		90 61 07 00
>192a40		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a48		00 00 00 00
>192a4c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a54		00 00 00 00
>192a58		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a60		00 00 00 00
>192a64		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>192a6c		87 f3 f8 00
>192a70		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>192a78		07 f6 3a 00
>192a7c		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>192a84		0c 84 19 00
>192a88		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>192a90		07 94 19 00
>192a94		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>192a9c		87 d1 f8 00
>192aa0		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>192aa8		07 c3 a6 00
>192aac		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ab4		00 00 00 00
>192ab8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ac0		00 00 00 00
>192ac4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192acc		00 00 00 00
>192ad0		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>192ad8		47 f2 df 00
>192adc		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>192ae4		0f a1 df 00
>192ae8		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>192af0		07 f1 78 00
>192af4		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>192afc		07 f1 18 00
>192b00		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>192b08		07 56 26 00
>192b0c		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>192b14		07 66 06 00
>192b18		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b20		00 00 00 00
>192b24		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b2c		00 00 00 00
>192b30		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b38		00 00 00 00
>192b3c		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>192b44		87 85 35 00
>192b48		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>192b50		87 f3 f4 00
>192b54		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>192b5c		07 f2 c3 00
>192b60		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>192b68		08 72 08 00
>192b6c		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>192b74		07 3f 07 01
>192b78		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>192b80		07 4f 05 00
>192b84		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b8c		00 00 00 00
>192b90		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b98		00 00 00 00
>192b9c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ba4		00 00 00 00
>192ba8		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>192bb0		07 7a 05 00
>192bb4		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>192bbc		07 a5 45 00
>192bc0		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>192bc8		08 8f 09 00
>192bcc		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>192bd4		0c 8f 09 00
>192bd8		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>192be0		07 82 37 00
>192be4		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>192bec		07 62 2c 01
>192bf0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192bf8		00 00 00 00
>192bfc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c04		00 00 00 00
>192c08		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c10		00 00 00 00
>192c14		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>192c1c		07 a6 1c 00
>192c20		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>192c28		07 72 0b 00
>192c2c		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>192c34		07 72 09 00
>192c38		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>192c40		07 82 09 00
>192c44		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>192c4c		07 72 0f 00
>192c50		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>192c58		07 8f 0a 00
>192c5c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c64		00 00 00 00
>192c68		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c70		00 00 00 00
>192c74		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c7c		00 00 00 00
>192c80		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>192c88		07 65 1a 00
>192c8c		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>192c94		07 65 1a 00
>192c98		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>192ca0		07 75 0a 00
>192ca4		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>192cac		07 65 1a 00
>192cb0		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>192cb8		07 65 26 00
>192cbc		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>192cc4		07 55 36 00
>192cc8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192cd0		00 00 00 00
>192cd4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192cdc		00 00 00 00
>192ce0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ce8		00 00 00 00
>192cec		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>192cf4		07 ff 0f 01
>192cf8		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>192d00		87 64 18 00
>192d04		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>192d0c		07 96 0a 00
>192d10		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>192d18		07 91 2a 00
>192d1c		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>192d24		47 6f 07 00
>192d28		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>192d30		07 8f 06 02
>192d34		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d3c		00 00 00 00
>192d40		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d48		00 00 00 00
>192d4c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d54		00 00 00 00
>192d58		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>192d60		07 55 16 00
>192d64		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>192d6c		07 6a 03 00
>192d70		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>192d78		07 42 35 00
>192d7c		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>192d84		07 31 47 01
>192d88		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>192d90		0a 42 25 00
>192d94		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>192d9c		07 cf 07 00
>192da0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192da8		00 00 00 00
>192dac		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192db4		00 00 00 00
>192db8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192dc0		00 00 00 00
>192dc4		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>192dcc		8a f2 26 00
>192dd0		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>192dd8		07 f2 f5 00
>192ddc		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>192de4		87 11 13 00
>192de8		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>192df0		87 1d 03 00
>192df4		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>192dfc		07 81 23 00
>192e00		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>192e08		0a f2 f6 01
>192e0c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e14		00 00 00 00
>192e18		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e20		00 00 00 00
>192e24		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e2c		00 00 00 00
>192e30		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>192e38		07 c2 05 00
>192e3c		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>192e44		07 6f 0c 01
>192e48		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>192e50		07 56 16 00
>192e54		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>192e5c		88 8f 0b 00
>192e60		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>192e68		87 c3 e5 00
>192e6c		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>192e74		07 f8 16 00
>192e78		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e80		00 00 00 00
>192e84		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e8c		00 00 00 00
>192e90		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e98		00 00 00 00
>192e9c		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>192ea4		0a f3 03 00
>192ea8		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>192eb0		07 f3 02 00
>192eb4		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>192ebc		07 1f ff 03
>192ec0		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>192ec8		8f 56 84 02
>192ecc		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>192ed4		0c 34 04 03
>192ed8		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>192ee0		07 1f 02 03
>192ee4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192eec		00 00 00 00
>192ef0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ef8		00 00 00 00
>192efc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192f04		00 00 00 00
>192f08		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>192f10		07 12 16 01
>192f14		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>192f1c		07 f6 c9 02
>192f20		20 29 19 00 2c 29 19 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>192f28		38 29 19 00 44 29 19 00 50 29 19 00 5c 29 19 00
>192f38		68 29 19 00 74 29 19 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>192f40		80 29 19 00 8c 29 19 00 98 29 19 00 a4 29 19 00
>192f50		b0 29 19 00 bc 29 19 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>192f58		c8 29 19 00 d4 29 19 00 e0 29 19 00 ec 29 19 00
>192f68		f8 29 19 00 04 2a 19 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>192f70		10 2a 19 00 1c 2a 19 00 28 2a 19 00 34 2a 19 00
>192f80		40 2a 19 00 4c 2a 19 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>192f88		58 2a 19 00 64 2a 19 00 70 2a 19 00 7c 2a 19 00
>192f98		88 2a 19 00 94 2a 19 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>192fa0		a0 2a 19 00 ac 2a 19 00 b8 2a 19 00 c4 2a 19 00
>192fb0		d0 2a 19 00 dc 2a 19 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>192fb8		e8 2a 19 00 f4 2a 19 00 00 2b 19 00 0c 2b 19 00
>192fc8		18 2b 19 00 24 2b 19 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>192fd0		30 2b 19 00 3c 2b 19 00 48 2b 19 00 54 2b 19 00
>192fe0		60 2b 19 00 6c 2b 19 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>192fe8		78 2b 19 00 84 2b 19 00 90 2b 19 00 9c 2b 19 00
>192ff8		a8 2b 19 00 b4 2b 19 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>193000		c0 2b 19 00 cc 2b 19 00 d8 2b 19 00 e4 2b 19 00
>193010		f0 2b 19 00 fc 2b 19 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>193018		08 2c 19 00 14 2c 19 00 20 2c 19 00 2c 2c 19 00
>193028		38 2c 19 00 44 2c 19 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>193030		50 2c 19 00 5c 2c 19 00 68 2c 19 00 74 2c 19 00
>193040		80 2c 19 00 8c 2c 19 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>193048		98 2c 19 00 a4 2c 19 00 b0 2c 19 00 bc 2c 19 00
>193058		c8 2c 19 00 d4 2c 19 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>193060		e0 2c 19 00 ec 2c 19 00 f8 2c 19 00 04 2d 19 00
>193070		10 2d 19 00 1c 2d 19 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>193078		28 2d 19 00 34 2d 19 00 40 2d 19 00 4c 2d 19 00
>193088		58 2d 19 00 64 2d 19 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>193090		70 2d 19 00 7c 2d 19 00 88 2d 19 00 94 2d 19 00
>1930a0		a0 2d 19 00 ac 2d 19 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>1930a8		b8 2d 19 00 c4 2d 19 00 d0 2d 19 00 dc 2d 19 00
>1930b8		e8 2d 19 00 f4 2d 19 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>1930c0		00 2e 19 00 0c 2e 19 00 18 2e 19 00 24 2e 19 00
>1930d0		30 2e 19 00 3c 2e 19 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>1930d8		48 2e 19 00 54 2e 19 00 60 2e 19 00 6c 2e 19 00
>1930e8		78 2e 19 00 84 2e 19 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>1930f0		90 2e 19 00 9c 2e 19 00 a8 2e 19 00 b4 2e 19 00
>193100		c0 2e 19 00 cc 2e 19 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>193108		d8 2e 19 00 e4 2e 19 00 f0 2e 19 00 fc 2e 19 00
>193118		08 2f 19 00 14 2f 19 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src/Libraries/OPL2_Library.asm

>193120		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.193128						IOPL2_TONE_TEST
.193128		e2 20		sep #$20	                SEP #$20        ; set A short
.19312a		c2 10		rep #$10	                REP #$10        ; set X long
.19312c		a2 00 00	ldx #$0000	                LDX #0
.19312f						OPL2_TONE_TESTING_L1
.19312f		bf 20 31 19	lda $193120,x	                LDA NOTE_INTRO, X
.193133		29 0f		and #$0f	                AND #$F
.193135		85 30		sta $30		                STA OPL2_NOTE ; start at C
.193137		bf 20 31 19	lda $193120,x	                LDA NOTE_INTRO, X
.19313b		29 70		and #$70	                AND #$70
.19313d		4a		lsr a		                LSR A
.19313e		4a		lsr a		                LSR A
.19313f		4a		lsr a		                LSR A
.193140		4a		lsr a		                LSR A
.193141		85 31		sta $31		                STA OPL2_OCTAVE
.193143		8a		txa		                TXA
.193144		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.193146		85 27		sta $27		                STA OPL2_CHANNEL
.193148		22 18 33 19	jsl $193318	                JSL OPL2_PLAYNOTE
.19314c		a0 00 00	ldy #$0000	                LDY #$0000
.19314f						OPL2_TONE_TESTING_L2
.19314f		ea		nop		                NOP
.193150		ea		nop		                NOP
.193151		ea		nop		                NOP
.193152		ea		nop		                NOP
.193153		c8		iny		                INY
.193154		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.193157		d0 f6		bne $19314f	                BNE OPL2_TONE_TESTING_L2
.193159		e8		inx		                INX
.19315a		e0 08 00	cpx #$0008	                CPX #8
.19315d		d0 d0		bne $19312f	                BNE OPL2_TONE_TESTING_L1
.19315f		6b		rtl		                RTL
.193160						OPL2_INIT
.193160		c2 20		rep #$20	                REP #$20        ; set A long
.193162		a9 00 00	lda #$0000	                LDA #$0000
.193165		85 28		sta $28		                STA OPL2_REG_REGION
.193167		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193169		85 30		sta $30		                STA OPL2_NOTE
.19316b		85 32		sta $32		                STA OPL2_PARAMETER0
.19316d		85 34		sta $34		                STA OPL2_PARAMETER2
.19316f		a9 ea 10	lda #$10ea	                LDA #<>INSTRUMENT_ACCORDN
.193172		85 50		sta $50		                STA RAD_ADDR
.193174		a9 19 00	lda #$0019	                LDA #<`INSTRUMENT_ACCORDN
.193177		85 52		sta $52		                STA RAD_ADDR + 2
.193179		e2 20		sep #$20	                SEP #$20        ; set A short
.19317b		6b		rtl		                RTL
.19317c						OPL2_Reset
.19317c		6b		rtl		                RTL
.19317d						OPL2_Get_FrequencyBlock
.19317d		6b		rtl		                RTL
.19317e						OPL2_GET_REGISTER
.19317e		48		pha		                PHA             ; begin setdp macro
.19317f		08		php		                PHP
.193180		c2 20		rep #$20	                REP #$20        ; set A long
.193182		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193185		5b		tcd		                TCD
.193186		28		plp		                PLP
.193187		68		pla		                PLA             ; end setdp macro
.193188		c2 20		rep #$20	                REP #$20        ; set A long
.19318a		18		clc		              CLC
.19318b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19318e		65 32		adc $32		              ADC OPL2_PARAMETER0
.193190		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193192		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193195		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193197		e2 20		sep #$20	                SEP #$20        ; set A short
.193199		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19319b		6b		rtl		              RTL
.19319c						OPL2_GET_WAVEFORM_SELECT
.19319c		48		pha		                PHA             ; begin setdp macro
.19319d		08		php		                PHP
.19319e		c2 20		rep #$20	                REP #$20        ; set A long
.1931a0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1931a3		5b		tcd		                TCD
.1931a4		28		plp		                PLP
.1931a5		68		pla		                PLA             ; end setdp macro
.1931a6		c2 20		rep #$20	                REP #$20        ; set A long
.1931a8		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1931ab		69 01 00	adc #$0001	              ADC #$0001
.1931ae		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1931b0		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1931b3		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1931b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1931b7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1931b9		29 20		and #$20	              AND #$20
.1931bb		6b		rtl		              RTL
.1931bc						OPL2_GET_SCALINGLEVEL
.1931bc		48		pha		                PHA             ; begin setdp macro
.1931bd		08		php		                PHP
.1931be		c2 20		rep #$20	                REP #$20        ; set A long
.1931c0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1931c3		5b		tcd		                TCD
.1931c4		28		plp		                PLP
.1931c5		68		pla		                PLA             ; end setdp macro
.1931c6		c2 20		rep #$20	                REP #$20        ; set A long
.1931c8		a9 40 00	lda #$0040	              LDA #$0040  ;
.1931cb		85 28		sta $28		              STA OPL2_REG_REGION
.1931cd		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.1931d0		e2 20		sep #$20	                SEP #$20        ; set A short
.1931d2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1931d4		29 c0		and #$c0	              AND #$C0
.1931d6		4a		lsr a		              LSR A
.1931d7		4a		lsr a		              LSR A
.1931d8		4a		lsr a		              LSR A
.1931d9		4a		lsr a		              LSR A
.1931da		4a		lsr a		              LSR A
.1931db		4a		lsr a		              LSR A
.1931dc		6b		rtl		              RTL
.1931dd						OPL2_GET_BLOCK
.1931dd		48		pha		                PHA             ; begin setdp macro
.1931de		08		php		                PHP
.1931df		c2 20		rep #$20	                REP #$20        ; set A long
.1931e1		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1931e4		5b		tcd		                TCD
.1931e5		28		plp		                PLP
.1931e6		68		pla		                PLA             ; end setdp macro
.1931e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1931e9		18		clc		              CLC
.1931ea		a5 27		lda $27		              LDA OPL2_CHANNEL
.1931ec		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.1931ee		69 b0		adc #$b0	              ADC #$B0
.1931f0		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.1931f2		a9 00		lda #$00	              LDA #$00
.1931f4		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.1931f6		c2 30		rep #$30	                REP #$30        ; set A&X long
.1931f8		18		clc		              CLC
.1931f9		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1931fc		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.1931fe		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193200		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193203		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193205		e2 20		sep #$20	                SEP #$20        ; set A short
.193207		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193209		29 1c		and #$1c	              AND #$1C
.19320b		4a		lsr a		              LSR A
.19320c		4a		lsr a		              LSR A
.19320d		6b		rtl		              RTL
.19320e						OPL2_GET_KEYON
.19320e		48		pha		                PHA             ; begin setdp macro
.19320f		08		php		                PHP
.193210		c2 20		rep #$20	                REP #$20        ; set A long
.193212		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193215		5b		tcd		                TCD
.193216		28		plp		                PLP
.193217		68		pla		                PLA             ; end setdp macro
.193218		e2 20		sep #$20	                SEP #$20        ; set A short
.19321a		18		clc		              CLC
.19321b		a5 27		lda $27		              LDA OPL2_CHANNEL
.19321d		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19321f		69 b0		adc #$b0	              ADC #$B0
.193221		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193223		a9 00		lda #$00	              LDA #$00
.193225		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193227		c2 30		rep #$30	                REP #$30        ; set A&X long
.193229		18		clc		              CLC
.19322a		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19322d		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19322f		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193231		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193234		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193236		e2 20		sep #$20	                SEP #$20        ; set A short
.193238		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19323a		29 20		and #$20	              AND #$20
.19323c		6b		rtl		              RTL
.19323d						OPL2_GET_FEEDBACK
.19323d		48		pha		                PHA             ; begin setdp macro
.19323e		08		php		                PHP
.19323f		c2 20		rep #$20	                REP #$20        ; set A long
.193241		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193244		5b		tcd		                TCD
.193245		28		plp		                PLP
.193246		68		pla		                PLA             ; end setdp macro
.193247		e2 20		sep #$20	                SEP #$20        ; set A short
.193249		18		clc		              CLC
.19324a		a5 27		lda $27		              LDA OPL2_CHANNEL
.19324c		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19324e		69 c0		adc #$c0	              ADC #$C0
.193250		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193252		a9 00		lda #$00	              LDA #$00
.193254		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193256		c2 30		rep #$30	                REP #$30        ; set A&X long
.193258		18		clc		              CLC
.193259		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19325c		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19325e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193260		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193263		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193265		e2 20		sep #$20	                SEP #$20        ; set A short
.193267		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193269		29 e0		and #$e0	              AND #$E0
.19326b		4a		lsr a		              LSR
.19326c		6b		rtl		              RTL
.19326d						OPL2_GET_SYNTHMODE
.19326d		48		pha		                PHA             ; begin setdp macro
.19326e		08		php		                PHP
.19326f		c2 20		rep #$20	                REP #$20        ; set A long
.193271		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193274		5b		tcd		                TCD
.193275		28		plp		                PLP
.193276		68		pla		                PLA             ; end setdp macro
.193277		e2 20		sep #$20	                SEP #$20        ; set A short
.193279		18		clc		              CLC
.19327a		a5 27		lda $27		              LDA OPL2_CHANNEL
.19327c		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19327e		69 c0		adc #$c0	              ADC #$C0
.193280		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193282		a9 00		lda #$00	              LDA #$00
.193284		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193286		c2 30		rep #$30	                REP #$30        ; set A&X long
.193288		18		clc		              CLC
.193289		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19328c		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19328e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193290		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193293		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193295		e2 20		sep #$20	                SEP #$20        ; set A short
.193297		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193299		29 01		and #$01	              AND #$01
.19329b		6b		rtl		              RTL
.19329c						OPL2_GET_DEEPTREMOLO
.19329c		48		pha		                PHA             ; begin setdp macro
.19329d		08		php		                PHP
.19329e		c2 20		rep #$20	                REP #$20        ; set A long
.1932a0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932a3		5b		tcd		                TCD
.1932a4		28		plp		                PLP
.1932a5		68		pla		                PLA             ; end setdp macro
.1932a6		c2 20		rep #$20	                REP #$20        ; set A long
.1932a8		a9 bd 00	lda #$00bd	              LDA #$00BD;
.1932ab		85 28		sta $28		              STA OPL2_REG_REGION
.1932ad		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.1932b0		e2 20		sep #$20	                SEP #$20        ; set A short
.1932b2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932b4		29 80		and #$80	              AND #$80
.1932b6		6b		rtl		              RTL
.1932b7						OPL2_GET_DEEPVIBRATO
.1932b7		48		pha		                PHA             ; begin setdp macro
.1932b8		08		php		                PHP
.1932b9		c2 20		rep #$20	                REP #$20        ; set A long
.1932bb		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932be		5b		tcd		                TCD
.1932bf		28		plp		                PLP
.1932c0		68		pla		                PLA             ; end setdp macro
.1932c1		c2 20		rep #$20	                REP #$20        ; set A long
.1932c3		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1932c6		69 bd 00	adc #$00bd	              ADC #$00BD
.1932c9		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1932cb		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1932ce		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1932d0		e2 20		sep #$20	                SEP #$20        ; set A short
.1932d2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932d4		29 40		and #$40	              AND #$40
.1932d6		6b		rtl		              RTL
.1932d7						OPL2_GET_PERCUSSION
.1932d7		48		pha		                PHA             ; begin setdp macro
.1932d8		08		php		                PHP
.1932d9		c2 20		rep #$20	                REP #$20        ; set A long
.1932db		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932de		5b		tcd		                TCD
.1932df		28		plp		                PLP
.1932e0		68		pla		                PLA             ; end setdp macro
.1932e1		c2 20		rep #$20	                REP #$20        ; set A long
.1932e3		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1932e6		69 bd 00	adc #$00bd	              ADC #$00BD
.1932e9		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1932eb		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1932ee		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1932f0		e2 20		sep #$20	                SEP #$20        ; set A short
.1932f2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932f4		29 20		and #$20	              AND #$20
.1932f6		6b		rtl		              RTL
.1932f7						OPL2_GET_DRUMS
.1932f7		48		pha		                PHA             ; begin setdp macro
.1932f8		08		php		                PHP
.1932f9		c2 20		rep #$20	                REP #$20        ; set A long
.1932fb		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932fe		5b		tcd		                TCD
.1932ff		28		plp		                PLP
.193300		68		pla		                PLA             ; end setdp macro
.193301		c2 20		rep #$20	                REP #$20        ; set A long
.193303		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193306		69 bd 00	adc #$00bd	              ADC #$00BD
.193309		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19330b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19330e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193310		e2 20		sep #$20	                SEP #$20        ; set A short
.193312		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193314		29 1f		and #$1f	              AND #$1F
.193316		6b		rtl		              RTL
.193317						OPL2_Get_WaveForm
.193317		6b		rtl		                RTL
.193318						OPL2_PLAYNOTE
.193318		48		pha		                PHA             ; begin setdp macro
.193319		08		php		                PHP
.19331a		c2 20		rep #$20	                REP #$20        ; set A long
.19331c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19331f		5b		tcd		                TCD
.193320		28		plp		                PLP
.193321		68		pla		                PLA             ; end setdp macro
.193322		e2 20		sep #$20	                SEP #$20        ; set A short
.193324		da		phx		                PHX
.193325		a9 00		lda #$00	                LDA #$00
.193327		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.193329		20 00 39	jsr $193900	                JSR OPL2_SET_KEYON
.19332c		20 c5 38	jsr $1938c5	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.19332f		e2 10		sep #$10	                SEP #$10        ; set X short
.193331		a5 30		lda $30		                LDA OPL2_NOTE
.193333		3a		dec a		                DEC A
.193334		0a		asl a		                ASL A
.193335		aa		tax		                TAX
.193336		bf af 10 19	lda $1910af,x	                LDA @lnoteFNumbers,X
.19333a		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.19333c		e8		inx		                INX
.19333d		bf af 10 19	lda $1910af,x	                LDA @lnoteFNumbers,X
.193341		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.193343		22 43 38 19	jsl $193843	                JSL OPL2_SET_FNUMBER
.193347		a9 01		lda #$01	                LDA #$01
.193349		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.19334b		20 00 39	jsr $193900	                JSR OPL2_SET_KEYON
.19334e		c2 10		rep #$10	                REP #$10        ; set X long
.193350		fa		plx		                PLX
.193351		6b		rtl		                RTL
.193352						OPL2_PLAYDRUM
.193352		6b		rtl		                RTL
.193353						OPL2_SET_INSTRUMENT
.193353		48		pha		                PHA             ; begin setdp macro
.193354		08		php		                PHP
.193355		c2 20		rep #$20	                REP #$20        ; set A long
.193357		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19335a		5b		tcd		                TCD
.19335b		28		plp		                PLP
.19335c		68		pla		                PLA             ; end setdp macro
.19335d		38		sec		              SEC ; Set the WaveFormSelect to True
.19335e		22 41 35 19	jsl $193541	              JSL OPL2_SET_WAVEFORMSELECT;
.193362		e2 20		sep #$20	                SEP #$20        ; set A short
.193364		c2 10		rep #$10	                REP #$10        ; set X long
.193366		a0 00 00	ldy #$0000	              LDY #$0000
.193369		a2 00 00	ldx #$0000	              LDX #$0000
.19336c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.19336e		85 35		sta $35		              STA OPL2_PARAMETER3
.193370		c8		iny		              INY
.193371		c9 06		cmp #$06	              CMP #$06
.193373		d0 03		bne $193378	              BNE PERCUSSION_NEXT07
.193375		82 70 01	brl $1934e8	              BRL Percussion_6
.193378						PERCUSSION_NEXT07
.193378		c9 07		cmp #$07	              CMP #$07
.19337a		d0 03		bne $19337f	              BNE PERCUSSION_NEXT08
.19337c		82 44 01	brl $1934c3	              BRL Percussion_7
.19337f						PERCUSSION_NEXT08
.19337f		c9 08		cmp #$08	              CMP #$08
.193381		d0 03		bne $193386	              BNE PERCUSSION_NEXT09
.193383		82 18 01	brl $19349e	              BRL Percussion_8
.193386						PERCUSSION_NEXT09
.193386		c9 09		cmp #$09	              CMP #$09
.193388		d0 03		bne $19338d	              BNE PERCUSSION_NEXT0A
.19338a		82 ec 00	brl $193479	              BRL Percussion_9
.19338d						PERCUSSION_NEXT0A
.19338d		c9 0a		cmp #$0a	              CMP #$0A
.19338f		d0 03		bne $193394	              BNE Percussion_Default
.193391		82 c0 00	brl $193454	              BRL Percussion_A
.193394						Percussion_Default
.193394		a9 00		lda #$00	              LDA #$00
.193396		85 26		sta $26		              STA OPL2_OPERATOR
.193398		c2 20		rep #$20	                REP #$20        ; set A long
.19339a		a9 20 00	lda #$0020	              LDA #$0020;
.19339d		85 28		sta $28		              STA OPL2_REG_REGION
.19339f		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.1933a2		e2 20		sep #$20	                SEP #$20        ; set A short
.1933a4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1933a6		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933a8		c8		iny		              INY
.1933a9		c2 20		rep #$20	                REP #$20        ; set A long
.1933ab		a9 40 00	lda #$0040	              LDA #$0040;
.1933ae		85 28		sta $28		              STA OPL2_REG_REGION
.1933b0		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.1933b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1933b5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1933b7		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933b9		c8		iny		              INY
.1933ba		c2 20		rep #$20	                REP #$20        ; set A long
.1933bc		a9 60 00	lda #$0060	              LDA #$0060;
.1933bf		85 28		sta $28		              STA OPL2_REG_REGION
.1933c1		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.1933c4		e2 20		sep #$20	                SEP #$20        ; set A short
.1933c6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1933c8		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933ca		c8		iny		              INY
.1933cb		c2 20		rep #$20	                REP #$20        ; set A long
.1933cd		a9 80 00	lda #$0080	              LDA #$0080;
.1933d0		85 28		sta $28		              STA OPL2_REG_REGION
.1933d2		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.1933d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1933d7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1933d9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933db		c8		iny		              INY
.1933dc		c2 20		rep #$20	                REP #$20        ; set A long
.1933de		a9 e0 00	lda #$00e0	              LDA #$00E0;
.1933e1		85 28		sta $28		              STA OPL2_REG_REGION
.1933e3		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.1933e6		e2 20		sep #$20	                SEP #$20        ; set A short
.1933e8		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1933ea		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933ec		c8		iny		              INY
.1933ed		e2 10		sep #$10	                SEP #$10        ; set X short
.1933ef		a5 27		lda $27		              LDA OPL2_CHANNEL
.1933f1		29 0f		and #$0f	              AND #$0F
.1933f3		aa		tax		              TAX
.1933f4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.1933f6		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.1933fa		c8		iny		              INY
.1933fb		a9 01		lda #$01	              LDA #$01
.1933fd		85 26		sta $26		              STA OPL2_OPERATOR
.1933ff		c2 20		rep #$20	                REP #$20        ; set A long
.193401		a9 20 00	lda #$0020	              LDA #$0020;
.193404		85 28		sta $28		              STA OPL2_REG_REGION
.193406		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.193409		e2 20		sep #$20	                SEP #$20        ; set A short
.19340b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.19340d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19340f		c8		iny		              INY
.193410		c2 20		rep #$20	                REP #$20        ; set A long
.193412		a9 40 00	lda #$0040	              LDA #$0040;
.193415		85 28		sta $28		              STA OPL2_REG_REGION
.193417		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.19341a		e2 20		sep #$20	                SEP #$20        ; set A short
.19341c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.19341e		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193420		c8		iny		              INY
.193421		c2 20		rep #$20	                REP #$20        ; set A long
.193423		a9 60 00	lda #$0060	              LDA #$0060;
.193426		85 28		sta $28		              STA OPL2_REG_REGION
.193428		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.19342b		e2 20		sep #$20	                SEP #$20        ; set A short
.19342d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.19342f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193431		c8		iny		              INY
.193432		c2 20		rep #$20	                REP #$20        ; set A long
.193434		a9 80 00	lda #$0080	              LDA #$0080;
.193437		85 28		sta $28		              STA OPL2_REG_REGION
.193439		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.19343c		e2 20		sep #$20	                SEP #$20        ; set A short
.19343e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.193440		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193442		c8		iny		              INY
.193443		c2 20		rep #$20	                REP #$20        ; set A long
.193445		a9 e0 00	lda #$00e0	              LDA #$00E0;
.193448		85 28		sta $28		              STA OPL2_REG_REGION
.19344a		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.19344d		e2 20		sep #$20	                SEP #$20        ; set A short
.19344f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.193451		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193453		6b		rtl		                RTL
.193454						Percussion_A
.193454		e2 20		sep #$20	                SEP #$20        ; set A short
.193456		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193458		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.19345c		c8		iny		              INY
.19345d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.19345f		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.193463		c8		iny		              INY
.193464		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193466		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.19346a		c8		iny		              INY
.19346b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.19346d		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.193471		c8		iny		              INY
.193472		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193474		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.193478		6b		rtl		                RTL
.193479						Percussion_9
.193479		e2 20		sep #$20	                SEP #$20        ; set A short
.19347b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.19347d		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.193481		c8		iny		              INY
.193482		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.193484		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.193488		c8		iny		              INY
.193489		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.19348b		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.19348f		c8		iny		              INY
.193490		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193492		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.193496		c8		iny		              INY
.193497		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193499		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.19349d		6b		rtl		              RTL
.19349e						Percussion_8
.19349e		e2 20		sep #$20	                SEP #$20        ; set A short
.1934a0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1934a2		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.1934a6		c8		iny		              INY
.1934a7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1934a9		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.1934ad		c8		iny		              INY
.1934ae		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1934b0		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.1934b4		c8		iny		              INY
.1934b5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1934b7		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.1934bb		c8		iny		              INY
.1934bc		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1934be		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.1934c2		6b		rtl		              RTL
.1934c3						Percussion_7
.1934c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1934c5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1934c7		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.1934cb		c8		iny		              INY
.1934cc		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1934ce		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.1934d2		c8		iny		              INY
.1934d3		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1934d5		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.1934d9		c8		iny		              INY
.1934da		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1934dc		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.1934e0		c8		iny		              INY
.1934e1		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1934e3		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.1934e7		6b		rtl		              RTL
.1934e8						Percussion_6
.1934e8		e2 20		sep #$20	                SEP #$20        ; set A short
.1934ea		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1934ec		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.1934f0		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.1934f4		c8		iny		              INY
.1934f5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1934f7		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.1934fb		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.1934ff		c8		iny		              INY
.193500		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193502		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.193506		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.19350a		c8		iny		              INY
.19350b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.19350d		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.193511		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.193515		c8		iny		              INY
.193516		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193518		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.19351c		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.193520		6b		rtl		              RTL
.193521						OPL2_SET_REGISTER
.193521		48		pha		                PHA             ; begin setdp macro
.193522		08		php		                PHP
.193523		c2 20		rep #$20	                REP #$20        ; set A long
.193525		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193528		5b		tcd		                TCD
.193529		28		plp		                PLP
.19352a		68		pla		                PLA             ; end setdp macro
.19352b		c2 20		rep #$20	                REP #$20        ; set A long
.19352d		18		clc		              CLC
.19352e		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193531		65 32		adc $32		              ADC OPL2_PARAMETER0
.193533		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193535		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193538		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19353a		e2 20		sep #$20	                SEP #$20        ; set A short
.19353c		a5 33		lda $33		              LDA OPL2_PARAMETER1
.19353e		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193540		6b		rtl		              RTL
.193541						OPL2_SET_WAVEFORMSELECT
.193541		48		pha		                PHA             ; begin setdp macro
.193542		08		php		                PHP
.193543		c2 20		rep #$20	                REP #$20        ; set A long
.193545		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193548		5b		tcd		                TCD
.193549		28		plp		                PLP
.19354a		68		pla		                PLA             ; end setdp macro
.19354b		c2 20		rep #$20	                REP #$20        ; set A long
.19354d		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.193550		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193552		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193555		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193557		e2 20		sep #$20	                SEP #$20        ; set A short
.193559		b0 07		bcs $193562	              BCS OPL2_Set_WaveFormSelect_set
.19355b		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19355d		29 df		and #$df	              AND #$DF
.19355f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193561		6b		rtl		              RTL
.193562						OPL2_Set_WaveFormSelect_set
.193562		48		pha		                PHA             ; begin setdp macro
.193563		08		php		                PHP
.193564		c2 20		rep #$20	                REP #$20        ; set A long
.193566		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193569		5b		tcd		                TCD
.19356a		28		plp		                PLP
.19356b		68		pla		                PLA             ; end setdp macro
.19356c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19356e		09 20 00	ora #$0020	              ORA #$20
.193571		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193573		6b		rtl		                RTL
.193574						OPL2_SET_TREMOLO
.193574		48		pha		                PHA             ; begin setdp macro
.193575		08		php		                PHP
.193576		c2 20		rep #$20	                REP #$20        ; set A long
.193578		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19357b		5b		tcd		                TCD
.19357c		28		plp		                PLP
.19357d		68		pla		                PLA             ; end setdp macro
.19357e		08		php		                PHP ; Push the Carry
.19357f		c2 20		rep #$20	                REP #$20        ; set A long
.193581		18		clc		                CLC
.193582		a9 20 00	lda #$0020	                LDA #$0020 ;
.193585		85 28		sta $28		                STA OPL2_REG_REGION
.193587		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.19358a		28		plp		                PLP ; Pull the Carry out
.19358b		e2 20		sep #$20	                SEP #$20        ; set A short
.19358d		b0 08		bcs $193597	                BCS OPL2_Set_Tremolo_Set;
.19358f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193591		29 7f		and #$7f	                AND #$7F
.193593		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193595		80 06		bra $19359d	                BRA OPL2_Set_Tremolo_Exit
.193597						OPL2_Set_Tremolo_Set
.193597		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193599		09 80		ora #$80	                ORA #$80
.19359b		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19359d						OPL2_Set_Tremolo_Exit
.19359d		6b		rtl		                RTL
.19359e						OPL2_GET_TREMOLO
.19359e		48		pha		                PHA             ; begin setdp macro
.19359f		08		php		                PHP
.1935a0		c2 20		rep #$20	                REP #$20        ; set A long
.1935a2		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935a5		5b		tcd		                TCD
.1935a6		28		plp		                PLP
.1935a7		68		pla		                PLA             ; end setdp macro
.1935a8		c2 20		rep #$20	                REP #$20        ; set A long
.1935aa		a9 20 00	lda #$0020	                LDA #$0020;
.1935ad		85 28		sta $28		                STA OPL2_REG_REGION
.1935af		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.1935b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1935b4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935b6		29 80		and #$80	                AND #$80
.1935b8		6b		rtl		                RTL
.1935b9						OPL2_SET_VIBRATO
.1935b9		48		pha		                PHA             ; begin setdp macro
.1935ba		08		php		                PHP
.1935bb		c2 20		rep #$20	                REP #$20        ; set A long
.1935bd		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935c0		5b		tcd		                TCD
.1935c1		28		plp		                PLP
.1935c2		68		pla		                PLA             ; end setdp macro
.1935c3		08		php		                PHP ; Push the Carry
.1935c4		c2 20		rep #$20	                REP #$20        ; set A long
.1935c6		18		clc		                CLC
.1935c7		a9 20 00	lda #$0020	                LDA #$0020;
.1935ca		85 28		sta $28		                STA OPL2_REG_REGION
.1935cc		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.1935cf		28		plp		                PLP ; Pull the Carry out
.1935d0		e2 20		sep #$20	                SEP #$20        ; set A short
.1935d2		b0 08		bcs $1935dc	                BCS OPL2_Set_Vibrato_Set;
.1935d4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935d6		29 bf		and #$bf	                AND #$BF
.1935d8		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1935da		80 06		bra $1935e2	                BRA OPL2_Set_Vibrato_Exit
.1935dc						OPL2_Set_Vibrato_Set
.1935dc		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935de		09 40		ora #$40	                ORA #$40
.1935e0		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1935e2						OPL2_Set_Vibrato_Exit
.1935e2		6b		rtl		                RTL
.1935e3						OPL2_GET_VIBRATO
.1935e3		48		pha		                PHA             ; begin setdp macro
.1935e4		08		php		                PHP
.1935e5		c2 20		rep #$20	                REP #$20        ; set A long
.1935e7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935ea		5b		tcd		                TCD
.1935eb		28		plp		                PLP
.1935ec		68		pla		                PLA             ; end setdp macro
.1935ed		c2 20		rep #$20	                REP #$20        ; set A long
.1935ef		a9 20 00	lda #$0020	                LDA #$0020;
.1935f2		85 28		sta $28		                STA OPL2_REG_REGION
.1935f4		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.1935f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1935f9		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935fb		29 40		and #$40	                AND #$40
.1935fd		6b		rtl		                RTL
.1935fe						OPL2_SET_MAINTAINSUSTAIN
.1935fe		48		pha		                PHA             ; begin setdp macro
.1935ff		08		php		                PHP
.193600		c2 20		rep #$20	                REP #$20        ; set A long
.193602		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193605		5b		tcd		                TCD
.193606		28		plp		                PLP
.193607		68		pla		                PLA             ; end setdp macro
.193608		08		php		              PHP ; Push the Carry
.193609		c2 20		rep #$20	                REP #$20        ; set A long
.19360b		18		clc		              CLC
.19360c		a9 20 00	lda #$0020	              LDA #$0020;
.19360f		85 28		sta $28		              STA OPL2_REG_REGION
.193611		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.193614		28		plp		              PLP ; Pull the Carry out
.193615		e2 20		sep #$20	                SEP #$20        ; set A short
.193617		b0 08		bcs $193621	              BCS OPL2_Set_MaintainSustain_Set;
.193619		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19361b		29 df		and #$df	              AND #$DF
.19361d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19361f		80 06		bra $193627	              BRA OPL2_Set_MaintainSustain_Exit
.193621						OPL2_Set_MaintainSustain_Set
.193621		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193623		09 20		ora #$20	              ORA #$20
.193625		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193627						OPL2_Set_MaintainSustain_Exit
.193627		6b		rtl		                RTL
.193628						OPL2_GET_MAINTAINSUSTAIN
.193628		48		pha		                PHA             ; begin setdp macro
.193629		08		php		                PHP
.19362a		c2 20		rep #$20	                REP #$20        ; set A long
.19362c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19362f		5b		tcd		                TCD
.193630		28		plp		                PLP
.193631		68		pla		                PLA             ; end setdp macro
.193632		c2 20		rep #$20	                REP #$20        ; set A long
.193634		a9 20 00	lda #$0020	              LDA #$0020;
.193637		85 28		sta $28		              STA OPL2_REG_REGION
.193639		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.19363c		e2 20		sep #$20	                SEP #$20        ; set A short
.19363e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193640		29 20		and #$20	              AND #$20
.193642		6b		rtl		                RTL
.193643						OPL2_SET_ENVELOPESCALING
.193643		48		pha		                PHA             ; begin setdp macro
.193644		08		php		                PHP
.193645		c2 20		rep #$20	                REP #$20        ; set A long
.193647		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19364a		5b		tcd		                TCD
.19364b		28		plp		                PLP
.19364c		68		pla		                PLA             ; end setdp macro
.19364d		08		php		              PHP ; Push the Carry
.19364e		c2 20		rep #$20	                REP #$20        ; set A long
.193650		18		clc		              CLC
.193651		a9 20 00	lda #$0020	              LDA #$0020;
.193654		85 28		sta $28		              STA OPL2_REG_REGION
.193656		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.193659		28		plp		              PLP ; Pull the Carry out
.19365a		e2 20		sep #$20	                SEP #$20        ; set A short
.19365c		b0 08		bcs $193666	              BCS OPL2_Set_EnvelopeScaling_Set;
.19365e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193660		29 ef		and #$ef	              AND #$EF
.193662		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193664		80 06		bra $19366c	              BRA OPL2_Set_EnvelopeScaling_Exit
.193666						OPL2_Set_EnvelopeScaling_Set
.193666		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193668		09 10		ora #$10	              ORA #$10
.19366a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19366c						OPL2_Set_EnvelopeScaling_Exit
.19366c		6b		rtl		                RTL
.19366d						OPL2_GET_ENVELOPESCALING
.19366d		48		pha		                PHA             ; begin setdp macro
.19366e		08		php		                PHP
.19366f		c2 20		rep #$20	                REP #$20        ; set A long
.193671		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193674		5b		tcd		                TCD
.193675		28		plp		                PLP
.193676		68		pla		                PLA             ; end setdp macro
.193677		c2 20		rep #$20	                REP #$20        ; set A long
.193679		a9 20 00	lda #$0020	              LDA #$0020;
.19367c		85 28		sta $28		              STA OPL2_REG_REGION
.19367e		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.193681		e2 20		sep #$20	                SEP #$20        ; set A short
.193683		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193685		29 10		and #$10	              AND #$10
.193687		6b		rtl		                RTL
.193688						OPL2_GET_MODFREQMULTIPLE
.193688		48		pha		                PHA             ; begin setdp macro
.193689		08		php		                PHP
.19368a		c2 20		rep #$20	                REP #$20        ; set A long
.19368c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19368f		5b		tcd		                TCD
.193690		28		plp		                PLP
.193691		68		pla		                PLA             ; end setdp macro
.193692		c2 20		rep #$20	                REP #$20        ; set A long
.193694		a9 20 00	lda #$0020	              LDA #$0020;
.193697		85 28		sta $28		              STA OPL2_REG_REGION
.193699		20 7f 3a	jsr $193a7f	              JSR OPL2_GET_REG_OFFSET
.19369c		e2 20		sep #$20	                SEP #$20        ; set A short
.19369e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1936a0		29 0f		and #$0f	              AND #$0F
.1936a2		6b		rtl		              RTL
.1936a3						OPL2_SET_MODFREQMULTIPLE
.1936a3		48		pha		                PHA             ; begin setdp macro
.1936a4		08		php		                PHP
.1936a5		c2 20		rep #$20	                REP #$20        ; set A long
.1936a7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936aa		5b		tcd		                TCD
.1936ab		28		plp		                PLP
.1936ac		68		pla		                PLA             ; end setdp macro
.1936ad		c2 20		rep #$20	                REP #$20        ; set A long
.1936af		a9 20 00	lda #$0020	                LDA #$0020;
.1936b2		85 28		sta $28		                STA OPL2_REG_REGION
.1936b4		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.1936b7		e2 20		sep #$20	                SEP #$20        ; set A short
.1936b9		a5 32		lda $32		                LDA OPL2_PARAMETER0
.1936bb		29 0f		and #$0f	                AND #$0F
.1936bd		85 32		sta $32		                STA OPL2_PARAMETER0
.1936bf		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936c1		29 f0		and #$f0	                AND #$F0
.1936c3		05 32		ora $32		                ORA OPL2_PARAMETER0
.1936c5		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1936c7		6b		rtl		                RTL
.1936c8						OPL2_SET_SCALINGLEVEL
.1936c8		48		pha		                PHA             ; begin setdp macro
.1936c9		08		php		                PHP
.1936ca		c2 20		rep #$20	                REP #$20        ; set A long
.1936cc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936cf		5b		tcd		                TCD
.1936d0		28		plp		                PLP
.1936d1		68		pla		                PLA             ; end setdp macro
.1936d2		c2 20		rep #$20	                REP #$20        ; set A long
.1936d4		a9 40 00	lda #$0040	                LDA #$0040;
.1936d7		85 28		sta $28		                STA OPL2_REG_REGION
.1936d9		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.1936dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1936de		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1936e0		29 03		and #$03	                AND #$03
.1936e2		0a		asl a		                ASL
.1936e3		0a		asl a		                ASL
.1936e4		0a		asl a		                ASL
.1936e5		0a		asl a		                ASL
.1936e6		0a		asl a		                ASL
.1936e7		0a		asl a		                ASL
.1936e8		85 32		sta $32		                STA OPL2_PARAMETER0
.1936ea		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936ec		29 3f		and #$3f	                AND #$3F
.1936ee		05 32		ora $32		                ORA OPL2_PARAMETER0
.1936f0		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1936f2		6b		rtl		                RTL
.1936f3						OPL2_SET_VOLUME
.1936f3		48		pha		                PHA             ; begin setdp macro
.1936f4		08		php		                PHP
.1936f5		c2 20		rep #$20	                REP #$20        ; set A long
.1936f7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936fa		5b		tcd		                TCD
.1936fb		28		plp		                PLP
.1936fc		68		pla		                PLA             ; end setdp macro
.1936fd		c2 20		rep #$20	                REP #$20        ; set A long
.1936ff		a9 40 00	lda #$0040	                LDA #$0040  ;
.193702		85 28		sta $28		                STA OPL2_REG_REGION
.193704		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.193707		e2 20		sep #$20	                SEP #$20        ; set A short
.193709		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.19370b		29 3f		and #$3f	                AND #$3F
.19370d		85 32		sta $32		                STA OPL2_PARAMETER0
.19370f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193711		29 c0		and #$c0	                AND #$C0
.193713		05 32		ora $32		                ORA OPL2_PARAMETER0
.193715		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193717		6b		rtl		                RTL
.193718						OPL2_GET_VOLUME
.193718		48		pha		                PHA             ; begin setdp macro
.193719		08		php		                PHP
.19371a		c2 20		rep #$20	                REP #$20        ; set A long
.19371c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19371f		5b		tcd		                TCD
.193720		28		plp		                PLP
.193721		68		pla		                PLA             ; end setdp macro
.193722		c2 20		rep #$20	                REP #$20        ; set A long
.193724		a9 40 00	lda #$0040	                LDA #$0040  ;
.193727		85 28		sta $28		                STA OPL2_REG_REGION
.193729		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.19372c		e2 20		sep #$20	                SEP #$20        ; set A short
.19372e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193730		29 3f		and #$3f	                AND #$3F
.193732		6b		rtl		                RTL
.193733						OPL2_SET_ATTACK
.193733		48		pha		                PHA             ; begin setdp macro
.193734		08		php		                PHP
.193735		c2 20		rep #$20	                REP #$20        ; set A long
.193737		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19373a		5b		tcd		                TCD
.19373b		28		plp		                PLP
.19373c		68		pla		                PLA             ; end setdp macro
.19373d		c2 20		rep #$20	                REP #$20        ; set A long
.19373f		a9 60 00	lda #$0060	                LDA #$0060  ;
.193742		85 28		sta $28		                STA OPL2_REG_REGION
.193744		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.193747		e2 20		sep #$20	                SEP #$20        ; set A short
.193749		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.19374b		29 0f		and #$0f	                AND #$0F
.19374d		0a		asl a		                ASL
.19374e		0a		asl a		                ASL
.19374f		0a		asl a		                ASL
.193750		0a		asl a		                ASL
.193751		85 32		sta $32		                STA OPL2_PARAMETER0
.193753		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193755		29 0f		and #$0f	                AND #$0F
.193757		05 32		ora $32		                ORA OPL2_PARAMETER0
.193759		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19375b		6b		rtl		                RTL
.19375c						OPL2_GET_ATTACK
.19375c		48		pha		                PHA             ; begin setdp macro
.19375d		08		php		                PHP
.19375e		c2 20		rep #$20	                REP #$20        ; set A long
.193760		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193763		5b		tcd		                TCD
.193764		28		plp		                PLP
.193765		68		pla		                PLA             ; end setdp macro
.193766		c2 20		rep #$20	                REP #$20        ; set A long
.193768		a9 60 00	lda #$0060	                LDA #$0060
.19376b		85 28		sta $28		                STA OPL2_REG_REGION
.19376d		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.193770		e2 20		sep #$20	                SEP #$20        ; set A short
.193772		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193774		29 f0		and #$f0	                AND #$F0
.193776		4a		lsr a		                LSR
.193777		4a		lsr a		                LSR
.193778		4a		lsr a		                LSR
.193779		4a		lsr a		                LSR
.19377a		6b		rtl		                RTL
.19377b						OPL2_SET_DECAY
.19377b		48		pha		                PHA             ; begin setdp macro
.19377c		08		php		                PHP
.19377d		c2 20		rep #$20	                REP #$20        ; set A long
.19377f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193782		5b		tcd		                TCD
.193783		28		plp		                PLP
.193784		68		pla		                PLA             ; end setdp macro
.193785		c2 20		rep #$20	                REP #$20        ; set A long
.193787		a9 60 00	lda #$0060	                LDA #$0060;
.19378a		85 28		sta $28		                STA OPL2_REG_REGION
.19378c		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.19378f		e2 20		sep #$20	                SEP #$20        ; set A short
.193791		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193793		29 0f		and #$0f	                AND #$0F
.193795		85 32		sta $32		                STA OPL2_PARAMETER0
.193797		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193799		29 f0		and #$f0	                AND #$F0
.19379b		05 32		ora $32		                ORA OPL2_PARAMETER0
.19379d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19379f		6b		rtl		                RTL
.1937a0						OPL2_GET_DECAY
.1937a0		48		pha		                PHA             ; begin setdp macro
.1937a1		08		php		                PHP
.1937a2		c2 20		rep #$20	                REP #$20        ; set A long
.1937a4		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937a7		5b		tcd		                TCD
.1937a8		28		plp		                PLP
.1937a9		68		pla		                PLA             ; end setdp macro
.1937aa		c2 20		rep #$20	                REP #$20        ; set A long
.1937ac		a9 60 00	lda #$0060	                LDA #$0060
.1937af		85 28		sta $28		                STA OPL2_REG_REGION
.1937b1		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.1937b4		e2 20		sep #$20	                SEP #$20        ; set A short
.1937b6		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937b8		29 0f		and #$0f	                AND #$0F
.1937ba		6b		rtl		                RTL
.1937bb						OPL2_SET_SUSTAIN
.1937bb		48		pha		                PHA             ; begin setdp macro
.1937bc		08		php		                PHP
.1937bd		c2 20		rep #$20	                REP #$20        ; set A long
.1937bf		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937c2		5b		tcd		                TCD
.1937c3		28		plp		                PLP
.1937c4		68		pla		                PLA             ; end setdp macro
.1937c5		c2 20		rep #$20	                REP #$20        ; set A long
.1937c7		a9 80 00	lda #$0080	                LDA #$0080;
.1937ca		85 28		sta $28		                STA OPL2_REG_REGION
.1937cc		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.1937cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1937d1		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1937d3		29 0f		and #$0f	                AND #$0F
.1937d5		0a		asl a		                ASL
.1937d6		0a		asl a		                ASL
.1937d7		0a		asl a		                ASL
.1937d8		0a		asl a		                ASL
.1937d9		85 32		sta $32		                STA OPL2_PARAMETER0
.1937db		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937dd		29 0f		and #$0f	                AND #$0F
.1937df		05 32		ora $32		                ORA OPL2_PARAMETER0
.1937e1		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1937e3		6b		rtl		                RTL
.1937e4						OPL2_GET_SUSTAIN
.1937e4		48		pha		                PHA             ; begin setdp macro
.1937e5		08		php		                PHP
.1937e6		c2 20		rep #$20	                REP #$20        ; set A long
.1937e8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937eb		5b		tcd		                TCD
.1937ec		28		plp		                PLP
.1937ed		68		pla		                PLA             ; end setdp macro
.1937ee		c2 20		rep #$20	                REP #$20        ; set A long
.1937f0		a9 80 00	lda #$0080	                LDA #$0080
.1937f3		85 28		sta $28		                STA OPL2_REG_REGION
.1937f5		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.1937f8		e2 20		sep #$20	                SEP #$20        ; set A short
.1937fa		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937fc		29 f0		and #$f0	                AND #$F0
.1937fe		4a		lsr a		                LSR
.1937ff		4a		lsr a		                LSR
.193800		4a		lsr a		                LSR
.193801		4a		lsr a		                LSR
.193802		6b		rtl		                RTL
.193803						OPL2_SET_RELEASE
.193803		48		pha		                PHA             ; begin setdp macro
.193804		08		php		                PHP
.193805		c2 20		rep #$20	                REP #$20        ; set A long
.193807		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19380a		5b		tcd		                TCD
.19380b		28		plp		                PLP
.19380c		68		pla		                PLA             ; end setdp macro
.19380d		c2 20		rep #$20	                REP #$20        ; set A long
.19380f		a9 80 00	lda #$0080	                LDA #$0080;
.193812		85 28		sta $28		                STA OPL2_REG_REGION
.193814		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.193817		e2 20		sep #$20	                SEP #$20        ; set A short
.193819		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.19381b		29 0f		and #$0f	                AND #$0F
.19381d		85 32		sta $32		                STA OPL2_PARAMETER0
.19381f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193821		29 f0		and #$f0	                AND #$F0
.193823		05 32		ora $32		                ORA OPL2_PARAMETER0
.193825		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193827		6b		rtl		                RTL
.193828						OPL2_GET_RELEASE
.193828		48		pha		                PHA             ; begin setdp macro
.193829		08		php		                PHP
.19382a		c2 20		rep #$20	                REP #$20        ; set A long
.19382c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19382f		5b		tcd		                TCD
.193830		28		plp		                PLP
.193831		68		pla		                PLA             ; end setdp macro
.193832		c2 20		rep #$20	                REP #$20        ; set A long
.193834		a9 80 00	lda #$0080	                LDA #$0080
.193837		85 28		sta $28		                STA OPL2_REG_REGION
.193839		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.19383c		e2 20		sep #$20	                SEP #$20        ; set A short
.19383e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193840		29 0f		and #$0f	                AND #$0F
.193842		6b		rtl		                RTL
.193843						OPL2_SET_FNUMBER
.193843		48		pha		                PHA             ; begin setdp macro
.193844		08		php		                PHP
.193845		c2 20		rep #$20	                REP #$20        ; set A long
.193847		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19384a		5b		tcd		                TCD
.19384b		28		plp		                PLP
.19384c		68		pla		                PLA             ; end setdp macro
.19384d		e2 20		sep #$20	                SEP #$20        ; set A short
.19384f		18		clc		                CLC
.193850		a5 27		lda $27		                LDA OPL2_CHANNEL
.193852		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193854		69 a0		adc #$a0	                ADC #$A0
.193856		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193858		a9 00		lda #$00	                LDA #$00
.19385a		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.19385c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19385e		18		clc		                CLC
.19385f		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193862		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193864		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193866		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193869		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.19386b		e2 20		sep #$20	                SEP #$20        ; set A short
.19386d		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.19386f		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.193871		18		clc		                CLC
.193872		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.193874		69 10		adc #$10	                ADC #$10
.193876		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193878		a5 33		lda $33		                LDA OPL2_PARAMETER1
.19387a		29 03		and #$03	                AND #$03
.19387c		85 33		sta $33		                STA OPL2_PARAMETER1
.19387e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193880		29 fc		and #$fc	                AND #$FC
.193882		05 33		ora $33		                ORA OPL2_PARAMETER1
.193884		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193886		6b		rtl		                RTL
.193887						OPL2_GET_FNUMBER
.193887		48		pha		                PHA             ; begin setdp macro
.193888		08		php		                PHP
.193889		c2 20		rep #$20	                REP #$20        ; set A long
.19388b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19388e		5b		tcd		                TCD
.19388f		28		plp		                PLP
.193890		68		pla		                PLA             ; end setdp macro
.193891		e2 20		sep #$20	                SEP #$20        ; set A short
.193893		18		clc		                CLC
.193894		a5 27		lda $27		                LDA OPL2_CHANNEL
.193896		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193898		69 a0		adc #$a0	                ADC #$A0
.19389a		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.19389c		a9 00		lda #$00	                LDA #$00
.19389e		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1938a0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1938a2		18		clc		                CLC
.1938a3		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.1938a6		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.1938a8		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1938aa		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.1938ad		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1938af		e2 20		sep #$20	                SEP #$20        ; set A short
.1938b1		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938b3		85 32		sta $32		                STA OPL2_PARAMETER0
.1938b5		18		clc		                CLC
.1938b6		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.1938b8		69 10		adc #$10	                ADC #$10
.1938ba		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1938bc		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938be		29 03		and #$03	                AND #$03
.1938c0		85 33		sta $33		                STA OPL2_PARAMETER1
.1938c2		6b		rtl		                RTL
.1938c3						OPL2_Set_Frequency
.1938c3		6b		rtl		                RTL
.1938c4						OPL2_Get_Frequency
.1938c4		6b		rtl		                RTL
.1938c5						OPL2_SET_BLOCK
.1938c5		48		pha		                PHA             ; begin setdp macro
.1938c6		08		php		                PHP
.1938c7		c2 20		rep #$20	                REP #$20        ; set A long
.1938c9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1938cc		5b		tcd		                TCD
.1938cd		28		plp		                PLP
.1938ce		68		pla		                PLA             ; end setdp macro
.1938cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1938d1		18		clc		                CLC
.1938d2		a5 27		lda $27		                LDA OPL2_CHANNEL
.1938d4		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.1938d6		69 b0		adc #$b0	                ADC #$B0
.1938d8		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1938da		a9 00		lda #$00	                LDA #$00
.1938dc		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1938de		c2 30		rep #$30	                REP #$30        ; set A&X long
.1938e0		18		clc		                CLC
.1938e1		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.1938e4		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.1938e6		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1938e8		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.1938eb		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1938ed		e2 20		sep #$20	                SEP #$20        ; set A short
.1938ef		a5 31		lda $31		                LDA OPL2_OCTAVE
.1938f1		29 07		and #$07	                AND #$07
.1938f3		0a		asl a		                ASL
.1938f4		0a		asl a		                ASL
.1938f5		85 31		sta $31		                STA OPL2_OCTAVE
.1938f7		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938f9		29 e3		and #$e3	                AND #$E3
.1938fb		05 31		ora $31		                ORA OPL2_OCTAVE
.1938fd		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1938ff		60		rts		                RTS
.193900						OPL2_SET_KEYON
.193900		48		pha		                PHA             ; begin setdp macro
.193901		08		php		                PHP
.193902		c2 20		rep #$20	                REP #$20        ; set A long
.193904		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193907		5b		tcd		                TCD
.193908		28		plp		                PLP
.193909		68		pla		                PLA             ; end setdp macro
.19390a		e2 20		sep #$20	                SEP #$20        ; set A short
.19390c		18		clc		                CLC
.19390d		a5 27		lda $27		                LDA OPL2_CHANNEL
.19390f		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193911		69 b0		adc #$b0	                ADC #$B0
.193913		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193915		a9 00		lda #$00	                LDA #$00
.193917		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193919		c2 30		rep #$30	                REP #$30        ; set A&X long
.19391b		18		clc		                CLC
.19391c		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.19391f		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193921		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193923		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193926		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193928		e2 20		sep #$20	                SEP #$20        ; set A short
.19392a		a5 32		lda $32		                LDA OPL2_PARAMETER0
.19392c		29 01		and #$01	                AND #$01
.19392e		f0 02		beq $193932	                BEQ SET_KEYON_OFF
.193930		a9 20		lda #$20	                LDA #$20
.193932						    SET_KEYON_OFF
.193932		85 32		sta $32		                STA OPL2_PARAMETER0
.193934		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193936		29 df		and #$df	                AND #$DF
.193938		05 32		ora $32		                ORA OPL2_PARAMETER0
.19393a		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19393c		60		rts		                RTS
.19393d						OPL2_SET_FEEDBACK
.19393d		48		pha		                PHA             ; begin setdp macro
.19393e		08		php		                PHP
.19393f		c2 20		rep #$20	                REP #$20        ; set A long
.193941		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193944		5b		tcd		                TCD
.193945		28		plp		                PLP
.193946		68		pla		                PLA             ; end setdp macro
.193947		e2 20		sep #$20	                SEP #$20        ; set A short
.193949		18		clc		              CLC
.19394a		a5 27		lda $27		              LDA OPL2_CHANNEL
.19394c		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19394e		69 c0		adc #$c0	              ADC #$C0
.193950		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193952		a9 00		lda #$00	              LDA #$00
.193954		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193956		c2 30		rep #$30	                REP #$30        ; set A&X long
.193958		18		clc		              CLC
.193959		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19395c		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19395e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193960		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193963		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193965		e2 20		sep #$20	                SEP #$20        ; set A short
.193967		a5 32		lda $32		              LDA OPL2_PARAMETER0
.193969		29 07		and #$07	              AND #$07
.19396b		0a		asl a		              ASL
.19396c		85 32		sta $32		              STA OPL2_PARAMETER0
.19396e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193970		29 01		and #$01	              AND #$01
.193972		05 32		ora $32		              ORA OPL2_PARAMETER0
.193974		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193976		6b		rtl		                RTL
.193977						OPL2_SET_SYNTHMODE
.193977		48		pha		                PHA             ; begin setdp macro
.193978		08		php		                PHP
.193979		c2 20		rep #$20	                REP #$20        ; set A long
.19397b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19397e		5b		tcd		                TCD
.19397f		28		plp		                PLP
.193980		68		pla		                PLA             ; end setdp macro
.193981		08		php		              PHP ; Push the Carry
.193982		e2 20		sep #$20	                SEP #$20        ; set A short
.193984		18		clc		              CLC
.193985		a5 27		lda $27		              LDA OPL2_CHANNEL
.193987		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193989		69 c0		adc #$c0	              ADC #$C0
.19398b		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.19398d		a9 00		lda #$00	              LDA #$00
.19398f		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193991		c2 30		rep #$30	                REP #$30        ; set A&X long
.193993		18		clc		              CLC
.193994		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193997		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193999		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19399b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19399e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1939a0		28		plp		              PLP ; Pull the Carry out
.1939a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1939a3		b0 08		bcs $1939ad	              BCS OPL2_Set_Synthmode_Set;
.1939a5		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939a7		29 fe		and #$fe	              AND #$FE
.1939a9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939ab		80 06		bra $1939b3	              BRA OPL2_Set_Synthmode_Exit
.1939ad						OPL2_Set_Synthmode_Set
.1939ad		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939af		09 01		ora #$01	              ORA #$01
.1939b1		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939b3						OPL2_Set_Synthmode_Exit
.1939b3		6b		rtl		                RTL
.1939b4						OPL2_SET_DEEPTREMOLO
.1939b4		48		pha		                PHA             ; begin setdp macro
.1939b5		08		php		                PHP
.1939b6		c2 20		rep #$20	                REP #$20        ; set A long
.1939b8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939bb		5b		tcd		                TCD
.1939bc		28		plp		                PLP
.1939bd		68		pla		                PLA             ; end setdp macro
.1939be		c2 20		rep #$20	                REP #$20        ; set A long
.1939c0		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.1939c3		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1939c5		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1939c8		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1939ca		e2 20		sep #$20	                SEP #$20        ; set A short
.1939cc		b0 08		bcs $1939d6	              BCS OPL2_Set_DeepTremolo_Set;
.1939ce		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939d0		29 7f		and #$7f	              AND #$7F
.1939d2		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939d4		80 06		bra $1939dc	              BRA OPL2_Set_DeepTremolo_Exit
.1939d6						OPL2_Set_DeepTremolo_Set
.1939d6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939d8		09 80		ora #$80	              ORA #$80
.1939da		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939dc						OPL2_Set_DeepTremolo_Exit
.1939dc		6b		rtl		                RTL
.1939dd						OPL2_SET_DEEPVIBRATO
.1939dd		48		pha		                PHA             ; begin setdp macro
.1939de		08		php		                PHP
.1939df		c2 20		rep #$20	                REP #$20        ; set A long
.1939e1		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939e4		5b		tcd		                TCD
.1939e5		28		plp		                PLP
.1939e6		68		pla		                PLA             ; end setdp macro
.1939e7		c2 20		rep #$20	                REP #$20        ; set A long
.1939e9		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.1939ec		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1939ee		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1939f1		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1939f3		e2 20		sep #$20	                SEP #$20        ; set A short
.1939f5		b0 08		bcs $1939ff	              BCS OPL2_Set_DeepVibrato_Set;
.1939f7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939f9		29 bf		and #$bf	              AND #$BF
.1939fb		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939fd		80 06		bra $193a05	              BRA OPL2_Set_DeepVibrato_Exit
.1939ff						OPL2_Set_DeepVibrato_Set
.1939ff		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193a01		09 40		ora #$40	              ORA #$40
.193a03		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193a05						OPL2_Set_DeepVibrato_Exit
.193a05		6b		rtl		                RTL
.193a06						OPL2_SET_PERCUSSION
.193a06		48		pha		                PHA             ; begin setdp macro
.193a07		08		php		                PHP
.193a08		c2 20		rep #$20	                REP #$20        ; set A long
.193a0a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a0d		5b		tcd		                TCD
.193a0e		28		plp		                PLP
.193a0f		68		pla		                PLA             ; end setdp macro
.193a10		c2 20		rep #$20	                REP #$20        ; set A long
.193a12		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.193a15		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193a17		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193a1a		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193a1c		e2 20		sep #$20	                SEP #$20        ; set A short
.193a1e		b0 08		bcs $193a28	                BCS OPL2_Set_Percussion_Set;
.193a20		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a22		29 df		and #$df	                AND #$DF
.193a24		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a26		80 06		bra $193a2e	                BRA OPL2_Set_Percussion_Exit
.193a28						OPL2_Set_Percussion_Set
.193a28		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a2a		09 20		ora #$20	                ORA #$20
.193a2c		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a2e						OPL2_Set_Percussion_Exit
.193a2e		6b		rtl		                RTL
.193a2f						OPL2_SET_DRUMS
.193a2f		48		pha		                PHA             ; begin setdp macro
.193a30		08		php		                PHP
.193a31		c2 20		rep #$20	                REP #$20        ; set A long
.193a33		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a36		5b		tcd		                TCD
.193a37		28		plp		                PLP
.193a38		68		pla		                PLA             ; end setdp macro
.193a39		c2 20		rep #$20	                REP #$20        ; set A long
.193a3b		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.193a3e		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193a40		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193a43		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193a45		e2 20		sep #$20	                SEP #$20        ; set A short
.193a47		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193a49		29 1f		and #$1f	                AND #$1F
.193a4b		85 32		sta $32		                STA OPL2_PARAMETER0
.193a4d		49 ff		eor #$ff	                EOR #$FF
.193a4f		85 33		sta $33		                STA OPL2_PARAMETER1
.193a51		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a53		25 33		and $33		                AND OPL2_PARAMETER1
.193a55		05 32		ora $32		                ORA OPL2_PARAMETER0
.193a57		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a59		6b		rtl		                RTL
.193a5a						OPL2_SET_WAVEFORM
.193a5a		48		pha		                PHA             ; begin setdp macro
.193a5b		08		php		                PHP
.193a5c		c2 20		rep #$20	                REP #$20        ; set A long
.193a5e		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a61		5b		tcd		                TCD
.193a62		28		plp		                PLP
.193a63		68		pla		                PLA             ; end setdp macro
.193a64		c2 20		rep #$20	                REP #$20        ; set A long
.193a66		a9 e0 00	lda #$00e0	                LDA #$00E0;
.193a69		85 28		sta $28		                STA OPL2_REG_REGION
.193a6b		20 7f 3a	jsr $193a7f	                JSR OPL2_GET_REG_OFFSET
.193a6e		e2 20		sep #$20	                SEP #$20        ; set A short
.193a70		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193a72		29 03		and #$03	                AND #$03
.193a74		85 32		sta $32		                STA OPL2_PARAMETER0
.193a76		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a78		29 fc		and #$fc	                AND #$FC
.193a7a		05 32		ora $32		                ORA OPL2_PARAMETER0
.193a7c		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a7e		6b		rtl		                RTL
.193a7f						OPL2_GET_REG_OFFSET
.193a7f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.193a81		a5 27		lda $27		                LDA OPL2_CHANNEL
.193a83		29 0f		and #$0f	                AND #$0F
.193a85		aa		tax		                TAX
.193a86		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.193a88		d0 06		bne $193a90	                BNE OPL2_Get_Register_Offset_l0
.193a8a		bf c7 10 19	lda $1910c7,x	                LDA @lregisterOffsets_operator0, X
.193a8e		80 04		bra $193a94	                BRA OPL2_Get_Register_Offset_exit
.193a90						OPL2_Get_Register_Offset_l0
.193a90		bf d0 10 19	lda $1910d0,x	                LDA @lregisterOffsets_operator1, X
.193a94						OPL2_Get_Register_Offset_exit
.193a94		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193a96		a9 00		lda #$00	                LDA #$00
.193a98		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193a9a		c2 30		rep #$30	                REP #$30        ; set A&X long
.193a9c		18		clc		                CLC
.193a9d		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193aa0		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193aa2		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.193aa4		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193aa6		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193aa9		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193aab		60		rts		                RTS

;******  Return to file: src/kernel.asm


;******  Processing file: src/Defines/SDCard_Controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src/kernel.asm


;******  Processing file: src/SDOS.asm


;******  Processing file: src/sdos_fat.asm


;******  Processing file: src/sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.193aac						ISETTIMEOUT
.193aac		8b		phb		                PHB
.193aad		0b		phd		                PHD
.193aae		08		php		                PHP
.193aaf		48		pha		                PHA             ; begin setdbr macro
.193ab0		08		php		                PHP
.193ab1		e2 20		sep #$20	                SEP #$20        ; set A short
.193ab3		a9 00		lda #$00	                LDA #0
.193ab5		48		pha		                PHA
.193ab6		ab		plb		                PLB
.193ab7		28		plp		                PLP
.193ab8		68		pla		                PLA             ; end setdbr macro
.193ab9		48		pha		                PHA             ; begin setdp macro
.193aba		08		php		                PHP
.193abb		c2 20		rep #$20	                REP #$20        ; set A long
.193abd		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193ac0		5b		tcd		                TCD
.193ac1		28		plp		                PLP
.193ac2		68		pla		                PLA             ; end setdp macro
.193ac3		78		sei		                SEI                             ; We don't want to be interrupted
.193ac4		e2 20		sep #$20	                SEP #$20        ; set A short
.193ac6		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.193ac8		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.193aca		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.193acc		85 0c		sta $032c	                STA @b BIOS_FLAGS
.193ace		28		plp		done            PLP
.193acf		2b		pld		                PLD
.193ad0		ab		plb		                PLB
.193ad1		6b		rtl		                RTL
.193ad2						ICMDBLOCK
.193ad2		0b		phd		                PHD
.193ad3		08		php		                PHP
.193ad4		48		pha		                PHA             ; begin setdp macro
.193ad5		08		php		                PHP
.193ad6		c2 20		rep #$20	                REP #$20        ; set A long
.193ad8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193adb		5b		tcd		                TCD
.193adc		28		plp		                PLP
.193add		68		pla		                PLA             ; end setdp macro
.193ade		e2 20		sep #$20	                SEP #$20        ; set A short
.193ae0		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.193ae2		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.193ae4		d0 06		bne $193aec	                BNE ret_success             ; No: just return
.193ae6		22 4e 5f 19	jsl $195f4e	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.193aea		90 0c		bcc $193af8	                BCC pass_failure
.193aec						ret_success
.193aec		e2 20		sep #$20	                SEP #$20        ; set A short
.193aee		64 00		stz $0320	                STZ BIOS_STATUS
.193af0		28		plp		                PLP
.193af1		2b		pld		                PLD
.193af2		38		sec		                SEC
.193af3		6b		rtl		                RTL
.193af4						ret_failure
.193af4		e2 20		sep #$20	                SEP #$20        ; set A short
.193af6		85 00		sta $0320	                STA BIOS_STATUS
.193af8		28		plp		pass_failure    PLP
.193af9		2b		pld		                PLD
.193afa		18		clc		                CLC
.193afb		6b		rtl		                RTL
.193afc						IGETBLOCK
.193afc		5a		phy		                PHY
.193afd		0b		phd		                PHD
.193afe		8b		phb		                PHB
.193aff		08		php		                PHP
.193b00		48		pha		                PHA             ; begin setdbr macro
.193b01		08		php		                PHP
.193b02		e2 20		sep #$20	                SEP #$20        ; set A short
.193b04		a9 00		lda #$00	                LDA #0
.193b06		48		pha		                PHA
.193b07		ab		plb		                PLB
.193b08		28		plp		                PLP
.193b09		68		pla		                PLA             ; end setdbr macro
.193b0a		48		pha		                PHA             ; begin setdp macro
.193b0b		08		php		                PHP
.193b0c		c2 20		rep #$20	                REP #$20        ; set A long
.193b0e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193b11		5b		tcd		                TCD
.193b12		28		plp		                PLP
.193b13		68		pla		                PLA             ; end setdp macro
.193b14		e2 20		sep #$20	                SEP #$20        ; set A short
.193b16		a0 00 00	ldy #$0000	                LDY #0
.193b19		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.193b1b		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.193b1d		c8		iny		                INY
.193b1e		c0 00 02	cpy #$0200	                CPY #512
.193b21		d0 f8		bne $193b1b	                BNE clr_loop
.193b23		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.193b25		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.193b27		f0 14		beq $193b3d	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.193b29		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.193b2b		f0 18		beq $193b45	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.193b2d		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193b2f		f0 1c		beq $193b4d	                BEQ hd_getblock
.193b31		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.193b33						ret_failure
.193b33		e2 20		sep #$20	                SEP #$20        ; set A short
.193b35		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.193b37		28		plp		                PLP
.193b38		ab		plb		                PLB
.193b39		2b		pld		                PLD
.193b3a		7a		ply		                PLY
.193b3b		38		sec		                SEC                                 ; Return failure
.193b3c		6b		rtl		                RTL
.193b3d		22 2b 56 19	jsl $19562b	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.193b41		b0 12		bcs $193b55	                BCS ret_success
.193b43		80 ee		bra $193b33	                BRA ret_failure
.193b45		22 53 5d 19	jsl $195d53	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.193b49		b0 0a		bcs $193b55	                BCS ret_success
.193b4b		80 e6		bra $193b33	                BRA ret_failure
.193b4d		22 fa 60 19	jsl $1960fa	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.193b51		b0 02		bcs $193b55	                BCS ret_success
.193b53		80 de		bra $193b33	                BRA ret_failure
.193b55						ret_success
.193b55		e2 20		sep #$20	                SEP #$20        ; set A short
.193b57		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.193b59		28		plp		                PLP
.193b5a		ab		plb		                PLB
.193b5b		2b		pld		                PLD
.193b5c		7a		ply		                PLY
.193b5d		38		sec		                SEC                                 ; Return success
.193b5e		6b		rtl		                RTL
.193b5f						IPUTBLOCK
.193b5f		0b		phd		                PHD
.193b60		8b		phb		                PHB
.193b61		08		php		                PHP
.193b62		48		pha		                PHA             ; begin setdbr macro
.193b63		08		php		                PHP
.193b64		e2 20		sep #$20	                SEP #$20        ; set A short
.193b66		a9 00		lda #$00	                LDA #0
.193b68		48		pha		                PHA
.193b69		ab		plb		                PLB
.193b6a		28		plp		                PLP
.193b6b		68		pla		                PLA             ; end setdbr macro
.193b6c		48		pha		                PHA             ; begin setdp macro
.193b6d		08		php		                PHP
.193b6e		c2 20		rep #$20	                REP #$20        ; set A long
.193b70		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193b73		5b		tcd		                TCD
.193b74		28		plp		                PLP
.193b75		68		pla		                PLA             ; end setdp macro
.193b76		e2 20		sep #$20	                SEP #$20        ; set A short
.193b78		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.193b7a		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.193b7c		f0 13		beq $193b91	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.193b7e		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.193b80		f0 17		beq $193b99	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.193b82		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193b84		f0 1b		beq $193ba1	                BEQ hd_putblock
.193b86		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.193b88						ret_failure
.193b88		e2 20		sep #$20	                SEP #$20        ; set A short
.193b8a		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.193b8c		28		plp		                PLP
.193b8d		ab		plb		                PLB
.193b8e		2b		pld		                PLD
.193b8f		18		clc		                CLC                                 ; Return failure
.193b90		6b		rtl		                RTL
.193b91		22 c8 56 19	jsl $1956c8	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.193b95		90 f1		bcc $193b88	                BCC ret_failure
.193b97		80 10		bra $193ba9	                BRA ret_success
.193b99		22 b8 5d 19	jsl $195db8	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.193b9d		90 e9		bcc $193b88	                BCC ret_failure
.193b9f		80 08		bra $193ba9	                BRA ret_success
.193ba1		22 84 61 19	jsl $196184	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.193ba5		90 e1		bcc $193b88	                BCC ret_failure
.193ba7		80 00		bra $193ba9	                BRA ret_success
.193ba9						ret_success
.193ba9		e2 20		sep #$20	                SEP #$20        ; set A short
.193bab		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.193bad		28		plp		                PLP
.193bae		ab		plb		                PLB
.193baf		2b		pld		                PLD
.193bb0		38		sec		                SEC                                 ; Return success
.193bb1		6b		rtl		                RTL

;******  Return to file: src/sdos_fat.asm


;******  Processing file: src/sdos_dir.asm

.193bb2						DOS_DIROPEN
.193bb2		da		phx		                PHX
.193bb3		5a		phy		                PHY
.193bb4		0b		phd		                PHD
.193bb5		8b		phb		                PHB
.193bb6		08		php		                PHP
.193bb7		48		pha		                PHA             ; begin setdbr macro
.193bb8		08		php		                PHP
.193bb9		e2 20		sep #$20	                SEP #$20        ; set A short
.193bbb		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193bbd		48		pha		                PHA
.193bbe		ab		plb		                PLB
.193bbf		28		plp		                PLP
.193bc0		68		pla		                PLA             ; end setdbr macro
.193bc1		48		pha		                PHA             ; begin setdp macro
.193bc2		08		php		                PHP
.193bc3		c2 20		rep #$20	                REP #$20        ; set A long
.193bc5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193bc8		5b		tcd		                TCD
.193bc9		28		plp		                PLP
.193bca		68		pla		                PLA             ; end setdp macro
.193bcb		ad 20 a0	lda $18a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.193bce		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.193bd1		ad 22 a0	lda $18a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.193bd4		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193bd7		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.193bda		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193bdc		85 18		sta $0338	                STA DOS_DIR_PTR
.193bde		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193be1		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193be3		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193be5		e2 20		sep #$20	                SEP #$20        ; set A short
.193be7		ad 01 a0	lda $18a001	                LDA FILE_SYSTEM             ; Check the file system
.193bea		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.193bec		d0 24		bne $193c12	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.193bee						fetch_fat12
.193bee		e2 20		sep #$20	                SEP #$20        ; set A short
.193bf0		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.193bf2		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.193bf5		c2 20		rep #$20	                REP #$20        ; set A long
.193bf7		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.193bf9		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193bfb		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.193bfd		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193bff		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.193c02		85 02		sta $0322	                STA BIOS_LBA
.193c04		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193c07		85 04		sta $0324	                STA BIOS_LBA+2
.193c09		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.193c0d		b0 1f		bcs $193c2e	                BCS do_success              ; If sucessful, set the directory cursor
.193c0f		82 72 16	brl $195284	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193c12						fetch_fat32
.193c12		e2 20		sep #$20	                SEP #$20        ; set A short
.193c14		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.193c16		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.193c19		c2 20		rep #$20	                REP #$20        ; set A long
.193c1b		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.193c1e		85 10		sta $0330	                STA DOS_CLUS_ID
.193c20		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193c23		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193c25		22 95 41 19	jsl $194195	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.193c29		b0 03		bcs $193c2e	                BCS do_success              ; If successful: set the directory cursor
.193c2b		82 56 16	brl $195284	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193c2e		82 5a 16	brl $19528b	do_success      BRL IF_SUCCESS
.193c31						DOS_DIRFIRST
.193c31		0b		phd		                PHD
.193c32		08		php		                PHP
.193c33		48		pha		                PHA             ; begin setdp macro
.193c34		08		php		                PHP
.193c35		c2 20		rep #$20	                REP #$20        ; set A long
.193c37		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193c3a		5b		tcd		                TCD
.193c3b		28		plp		                PLP
.193c3c		68		pla		                PLA             ; end setdp macro
.193c3d		c2 20		rep #$20	                REP #$20        ; set A long
.193c3f		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.193c42		85 18		sta $0338	                STA DOS_DIR_PTR
.193c44		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193c47		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193c49		28		plp		                PLP
.193c4a		2b		pld		                PLD
.193c4b		6b		rtl		                RTL
.193c4c						DOS_DIRNEXT
.193c4c		da		phx		                PHX
.193c4d		5a		phy		                PHY
.193c4e		0b		phd		                PHD
.193c4f		8b		phb		                PHB
.193c50		08		php		                PHP
.193c51		48		pha		                PHA             ; begin setdbr macro
.193c52		08		php		                PHP
.193c53		e2 20		sep #$20	                SEP #$20        ; set A short
.193c55		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193c57		48		pha		                PHA
.193c58		ab		plb		                PLB
.193c59		28		plp		                PLP
.193c5a		68		pla		                PLA             ; end setdbr macro
.193c5b		48		pha		                PHA             ; begin setdp macro
.193c5c		08		php		                PHP
.193c5d		c2 20		rep #$20	                REP #$20        ; set A long
.193c5f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193c62		5b		tcd		                TCD
.193c63		28		plp		                PLP
.193c64		68		pla		                PLA             ; end setdp macro
.193c65		c2 20		rep #$20	                REP #$20        ; set A long
.193c67		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.193c68		a5 18		lda $0338	                LDA DOS_DIR_PTR
.193c6a		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.193c6d		85 18		sta $0338	                STA DOS_DIR_PTR
.193c6f		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.193c71		69 00 00	adc #$0000	                ADC #0
.193c74		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193c76		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.193c77		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.193c7a		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.193c7c		85 28		sta $0348	                STA DOS_TEMP
.193c7e		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER_END
.193c81		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.193c83		85 2a		sta $034a	                STA DOS_TEMP+2
.193c85		30 0c		bmi $193c93	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.193c87		f0 03		beq $193c8c	                BEQ check_lower
.193c89		82 ff 15	brl $19528b	                BRL IF_SUCCESS
.193c8c		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.193c8e		f0 03		beq $193c93	                BEQ get_next_block
.193c90		82 f8 15	brl $19528b	                BRL IF_SUCCESS
.193c93						get_next_block
.193c93		e2 20		sep #$20	                SEP #$20        ; set A short
.193c95		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.193c98		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.193c9a		f0 38		beq $193cd4	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.193c9c						next_sector
.193c9c		c2 20		rep #$20	                REP #$20        ; set A long
.193c9e		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.193ca1		1a		inc a		                INC A
.193ca2		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.193ca5		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.193ca8		d0 07		bne $193cb1	                BNE read_sector
.193caa		e2 20		sep #$20	                SEP #$20        ; set A short
.193cac		a9 00		lda #$00	                LDA #0
.193cae		82 cf 15	brl $195280	                BRL IF_FAILURE
.193cb1						read_sector
.193cb1		c2 20		rep #$20	                REP #$20        ; set A long
.193cb3		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.193cb6		85 02		sta $0322	                STA BIOS_LBA
.193cb8		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193cbb		85 04		sta $0324	                STA BIOS_LBA+2
.193cbd		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.193cc0		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193cc2		85 18		sta $0338	                STA DOS_DIR_PTR
.193cc4		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193cc7		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193cc9		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193ccb		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.193ccf		b0 39		bcs $193d0a	                BCS do_success              ; If successful: set the directory cursor
.193cd1		82 b0 15	brl $195284	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193cd4						next_cluster
.193cd4		c2 20		rep #$20	                REP #$20        ; set A long
.193cd6		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.193cd9		85 10		sta $0330	                STA DOS_CLUS_ID
.193cdb		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193cde		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193ce0		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.193ce3		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193ce5		85 18		sta $0338	                STA DOS_DIR_PTR
.193ce7		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193cea		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193cec		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193cee		22 6a 45 19	jsl $19456a	                JSL NEXTCLUSTER             ; Try to find the next cluster
.193cf2		b0 03		bcs $193cf7	                BCS set_next
.193cf4		82 8d 15	brl $195284	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.193cf7		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.193cf9		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.193cfc		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.193cfe		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193d01		22 95 41 19	jsl $194195	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.193d05		b0 03		bcs $193d0a	                BCS do_success              ; If successful: set the directory cursor
.193d07		82 7a 15	brl $195284	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193d0a		82 7e 15	brl $19528b	do_success      BRL IF_SUCCESS
.193d0d						DOS_DIRFINDFREE
.193d0d		da		phx		                PHX
.193d0e		5a		phy		                PHY
.193d0f		0b		phd		                PHD
.193d10		8b		phb		                PHB
.193d11		08		php		                PHP
.193d12		48		pha		                PHA             ; begin setdbr macro
.193d13		08		php		                PHP
.193d14		e2 20		sep #$20	                SEP #$20        ; set A short
.193d16		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193d18		48		pha		                PHA
.193d19		ab		plb		                PLB
.193d1a		28		plp		                PLP
.193d1b		68		pla		                PLA             ; end setdbr macro
.193d1c		48		pha		                PHA             ; begin setdp macro
.193d1d		08		php		                PHP
.193d1e		c2 20		rep #$20	                REP #$20        ; set A long
.193d20		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193d23		5b		tcd		                TCD
.193d24		28		plp		                PLP
.193d25		68		pla		                PLA             ; end setdp macro
.193d26		22 a2 4d 19	jsl $194da2	                JSL IF_DIROPEN
.193d2a		b0 06		bcs $193d32	                BCS start_walk
.193d2c		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.193d2f		82 28 00	brl $193d5a	                BRL ret_failure
.193d32		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.193d35						chk_entry
.193d35		e2 20		sep #$20	                SEP #$20        ; set A short
.193d37		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.193d39		f0 1c		beq $193d57	                BEQ ret_success             ; If 0: we have a blank... return it
.193d3b		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.193d3d		f0 18		beq $193d57	                BEQ ret_success             ; Yes: return it
.193d3f		22 dc 4d 19	jsl $194ddc	                JSL IF_DIRNEXT              ; Go to the next directory entry
.193d43		b0 ed		bcs $193d32	                BCS start_walk              ; If we got one, start walking it
.193d45		22 5d 3d 19	jsl $193d5d	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.193d49		90 0f		bcc $193d5a	                BCC ret_failure             ; If that didn't work, return the failure
.193d4b		c2 20		rep #$20	                REP #$20        ; set A long
.193d4d		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.193d50		85 18		sta $0338	                STA DOS_DIR_PTR
.193d52		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193d55		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193d57		82 31 15	brl $19528b	ret_success     BRL IF_SUCCESS
.193d5a		82 23 15	brl $195280	ret_failure     BRL IF_FAILURE
.193d5d						DOS_DIRAPPEND
.193d5d		da		phx		                PHX
.193d5e		8b		phb		                PHB
.193d5f		0b		phd		                PHD
.193d60		08		php		                PHP
.193d61		48		pha		                PHA             ; begin setdbr macro
.193d62		08		php		                PHP
.193d63		e2 20		sep #$20	                SEP #$20        ; set A short
.193d65		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193d67		48		pha		                PHA
.193d68		ab		plb		                PLB
.193d69		28		plp		                PLP
.193d6a		68		pla		                PLA             ; end setdbr macro
.193d6b		48		pha		                PHA             ; begin setdp macro
.193d6c		08		php		                PHP
.193d6d		c2 20		rep #$20	                REP #$20        ; set A long
.193d6f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193d72		5b		tcd		                TCD
.193d73		28		plp		                PLP
.193d74		68		pla		                PLA             ; end setdp macro
.193d75		e2 20		sep #$20	                SEP #$20        ; set A short
.193d77		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE
.193d7a		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.193d7c		f0 09		beq $193d87	                BEQ clr_sector                  ; Yes: clear out the directory data
.193d7e						ret_failure
.193d7e		e2 20		sep #$20	                SEP #$20        ; set A short
.193d80		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.193d82		85 0e		sta $032e	                STA DOS_STATUS
.193d84		82 3e 00	brl $193dc5	                BRL pass_failure
.193d87						clr_sector
.193d87		c2 20		rep #$20	                REP #$20        ; set A long
.193d89		a9 00 00	lda #$0000	                LDA #0
.193d8c		a2 00 00	ldx #$0000	                LDX #0
.193d8f		9d 00 a1	sta $18a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.193d92		e8		inx		                INX
.193d93		e8		inx		                INX
.193d94		e0 00 02	cpx #$0200	                CPX #512
.193d97		d0 f6		bne $193d8f	                BNE clr_loop
.193d99		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.193d9c		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193d9e		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193da1		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193da3		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.193da6		85 10		sta $0330	                STA DOS_CLUS_ID
.193da8		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193dab		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193dad		22 8b 49 19	jsl $19498b	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.193db1		90 12		bcc $193dc5	                BCC pass_failure                ; If there was an error, pass it up the chain
.193db3		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.193db6		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.193db9		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.193dbc		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193dbf		28		plp		ret_success     PLP
.193dc0		2b		pld		                PLD
.193dc1		ab		plb		                PLB
.193dc2		fa		plx		                PLX
.193dc3		38		sec		                SEC
.193dc4		6b		rtl		                RTL
.193dc5		28		plp		pass_failure    PLP
.193dc6		2b		pld		                PLD
.193dc7		ab		plb		                PLB
.193dc8		fa		plx		                PLX
.193dc9		18		clc		                CLC
.193dca		6b		rtl		                RTL
.193dcb						DOS_DIRWRITE
.193dcb		da		phx		                PHX
.193dcc		5a		phy		                PHY
.193dcd		0b		phd		                PHD
.193dce		8b		phb		                PHB
.193dcf		08		php		                PHP
.193dd0		48		pha		                PHA             ; begin setdbr macro
.193dd1		08		php		                PHP
.193dd2		e2 20		sep #$20	                SEP #$20        ; set A short
.193dd4		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193dd6		48		pha		                PHA
.193dd7		ab		plb		                PLB
.193dd8		28		plp		                PLP
.193dd9		68		pla		                PLA             ; end setdbr macro
.193dda		48		pha		                PHA             ; begin setdp macro
.193ddb		08		php		                PHP
.193ddc		c2 20		rep #$20	                REP #$20        ; set A long
.193dde		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193de1		5b		tcd		                TCD
.193de2		28		plp		                PLP
.193de3		68		pla		                PLA             ; end setdp macro
.193de4		e2 20		sep #$20	                SEP #$20        ; set A short
.193de6		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.193de9		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.193deb		f0 1f		beq $193e0c	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.193ded						write_sector
.193ded		c2 20		rep #$20	                REP #$20        ; set A long
.193def		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.193df2		85 02		sta $0322	                STA BIOS_LBA
.193df4		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193df7		85 04		sta $0324	                STA BIOS_LBA+2
.193df9		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.193dfc		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193dfe		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193e01		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193e03		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.193e07		b0 1f		bcs $193e28	                BCS ret_success
.193e09		82 74 14	brl $195280	ret_failure     BRL IF_FAILURE
.193e0c						write_cluster
.193e0c		c2 20		rep #$20	                REP #$20        ; set A long
.193e0e		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.193e11		85 10		sta $0330	                STA DOS_CLUS_ID
.193e13		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193e16		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193e18		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.193e1b		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193e1d		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193e20		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193e22		22 d2 41 19	jsl $1941d2	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.193e26		90 e1		bcc $193e09	                BCC ret_failure
.193e28		82 60 14	brl $19528b	ret_success     BRL IF_SUCCESS

;******  Return to file: src/sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=24						DOS_ERR_EOF = 24                        ; At end of file
=25						DOS_ERR_PGZSIG = 25                     ; File does not have the PGZ signature
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src/Includes/sdos_fat_vars_user_inc.asm

=$18a000					    DOS_HIGH_VARIABLES      = $18A000
=$18a000					    DEVICE                  = $18A000       ; 1 byte - The number of the block device
=$18a001					    FILE_SYSTEM             = $18A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$18a002					    PARTITION               = $18A002       ; 1 byte - The number of the partitions on the device
=$18a003					    SECTORS_PER_CLUSTER     = $18A003       ; 1 byte - The number of sectors in a cluster
=$18a004					    FIRSTSECTOR             = $18A004       ; 4 bytes - The LBA of the first sector on the volume
=$18a008					    SECTORCOUNT             = $18A008       ; 4 bytes - The number of sectors in the volume
=$18a00c					    NUM_RSRV_SEC            = $18A00C       ; 2 bytes - The number of hidden or reserved sectors
=$18a00e					    CLUSTER_SIZE            = $18A00E       ; 2 bytes - The size of a cluster in bytes
=$18a010					    SEC_PER_FAT             = $18A010       ; 4 bytes - The number of sectors per FAT
=$18a014					    FAT_BEGIN_LBA           = $18A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$18a018					    FAT2_BEGIN_LBA          = $18A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$18a01c					    CLUSTER_BEGIN_LBA       = $18A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$18a020					    ROOT_DIR_FIRST_CLUSTER  = $18A020       ; 4 bytes - The number of the first cluster in the root directory
=$18a024					    ROOT_DIR_MAX_ENTRY      = $18A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$18a026					    VOLUME_ID               = $18A026       ; 4 bytes - The ID of the volume
=$18a02a					    DOS_CURR_CLUS           = $18A02A       ; 4 bytes - The current cluster (for delete)
=$18a02e					    DOS_NEXT_CLUS           = $18A02E       ; 4 bytes - The next cluster in a file (for delete)
=$18a032					    DOS_DIR_BLOCK_ID        = $18A032       ; 4 bytes - The ID of the current directory block
=$18a036					    DOS_NEW_CLUSTER         = $18A036       ; 4 bytes - Space to store a newly written cluster ID
=$18a03a					    DOS_SHORT_NAME          = $18A03A       ; 11 bytes - The short name for a desired file
=$18a045					    DOS_DIR_TYPE            = $18A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$18a046					    DOS_CURR_DIR_ID         = $18A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$18a04a					    DOS_DEV_NAMES           = $18A04A       ; 4 byte - pointer to the linked list of device names
=$18a04e					    FDC_MOTOR_TIMER         = $18A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$18a050					    DOS_MOUNT_DEV           = $18A050       ; 1 byte - the device code of the currently mounted device
=$18a100					    DOS_DIR_CLUSTER         = $18A100       ; 512 bytes - A buffer for directory entries
=$18a300					    DOS_DIR_CLUSTER_END     = $18A300       ; The byte just past the end of the directory cluster buffer
=$18a300					    DOS_SECTOR              = $18A300       ; 512 bytes - A buffer for block device read/write
=$18a500					    DOS_SECTOR_END          = $18A500       ; The byte just past the end of the cluster buffer
=$18a500					    DOS_FAT_SECTORS         = $18A500       ; 1024 bytes - two sectors worth of the FAT
=$18a900					    DOS_FAT_SECTORS_END     = $18A900       ; The byte just past the end of the FAT buffers
=$18a900					    DOS_BOOT_SECTOR         = $18A900       ; A sector for holding the boot sector
=$18ab00					    DOS_BOOT_SECTOR_END     = $18AB00
=$18ab00					    DOS_SPARE_SECTOR        = $18AB00       ; A spare 512 byte buffer for loading sectors
=$18ad00					    DOS_SPARE_SECTOR_END    = $18AD00
=$18ad00					    DOS_SPARE_FD            = $18AD00       ; A spare file descriptor buffer
=1617184					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=1617184					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=1617440					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$18b000					    DOS_FILE_BUFFS          = $18B000
=1622016					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src/sdos_fat.asm

.193e2b						DOS_INIT
.193e2b		8b		phb		                PHB
.193e2c		0b		phd		                PHD
.193e2d		08		php		                PHP
.193e2e		48		pha		                PHA             ; begin setdbr macro
.193e2f		08		php		                PHP
.193e30		e2 20		sep #$20	                SEP #$20        ; set A short
.193e32		a9 00		lda #$00	                LDA #0
.193e34		48		pha		                PHA
.193e35		ab		plb		                PLB
.193e36		28		plp		                PLP
.193e37		68		pla		                PLA             ; end setdbr macro
.193e38		48		pha		                PHA             ; begin setdp macro
.193e39		08		php		                PHP
.193e3a		c2 20		rep #$20	                REP #$20        ; set A long
.193e3c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193e3f		5b		tcd		                TCD
.193e40		28		plp		                PLP
.193e41		68		pla		                PLA             ; end setdp macro
.193e42		e2 20		sep #$20	                SEP #$20        ; set A short
.193e44		c2 10		rep #$10	                REP #$10        ; set X long
.193e46		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.193e49		a9 00		lda #$00	                LDA #0
.193e4b		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.193e4e		e8		inx		                INX
.193e4f		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.193e52		d0 f7		bne $193e4b	                BNE b0_clr_loop
.193e54		48		pha		                PHA             ; begin setdbr macro
.193e55		08		php		                PHP
.193e56		e2 20		sep #$20	                SEP #$20        ; set A short
.193e58		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193e5a		48		pha		                PHA
.193e5b		ab		plb		                PLB
.193e5c		28		plp		                PLP
.193e5d		68		pla		                PLA             ; end setdbr macro
.193e5e		48		pha		                PHA             ; begin setdp macro
.193e5f		08		php		                PHP
.193e60		c2 20		rep #$20	                REP #$20        ; set A long
.193e62		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193e65		5b		tcd		                TCD
.193e66		28		plp		                PLP
.193e67		68		pla		                PLA             ; end setdp macro
.193e68		e2 20		sep #$20	                SEP #$20        ; set A short
.193e6a		c2 10		rep #$10	                REP #$10        ; set X long
.193e6c		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.193e6f		a9 00		lda #$00	                LDA #0
.193e71		9d 00 a0	sta $18a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.193e74		e8		inx		                INX
.193e75		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.193e78		d0 f7		bne $193e71	                BNE b38_clr_loop
.193e7a		c2 20		rep #$20	                REP #$20        ; set A long
.193e7c		a9 2a 42	lda #$422a	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.193e7f		8f 4a a0 18	sta $18a04a	                STA @l DOS_DEV_NAMES
.193e83		a9 19 00	lda #$0019	                LDA #`DOS_HD_DESC
.193e86		8f 4c a0 18	sta $18a04c	                STA @l DOS_DEV_NAMES+2
.193e8a		e2 20		sep #$20	                SEP #$20        ; set A short
.193e8c		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.193e8e		85 01		sta $0321	                STA BIOS_DEV
.193e90		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.193e92		8f 50 a0 18	sta $18a050	                STA @l DOS_MOUNT_DEV
.193e96		a9 00		lda #$00	                LDA #0
.193e98		a2 00 00	ldx #$0000	                LDX #0
.193e9b		9d 20 ad	sta $18ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.193e9e		e8		inx		                INX
.193e9f		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.193ea2		d0 f7		bne $193e9b	                BNE fd_zero_loop
.193ea4		a9 00		lda #$00	                LDA #0
.193ea6		a2 00 00	ldx #$0000	                LDX #0
.193ea9		9d 00 b0	sta $18b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.193eac		e8		inx		                INX
.193ead		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.193eb0		d0 f7		bne $193ea9	                BNE sect_zero_loop
.193eb2		c2 20		rep #$20	                REP #$20        ; set A long
.193eb4		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.193eb7		85 20		sta $0340	                STA @b DOS_FD_PTR
.193eb9		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.193ebc		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.193ebe		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.193ec1		85 28		sta $0348	                STA @b DOS_TEMP
.193ec3		a9 18 00	lda #$0018	                LDA #`DOS_FILE_BUFFS
.193ec6		85 2a		sta $034a	                STA @b DOS_TEMP+2
.193ec8		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.193ecb		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.193ece		a5 28		lda $0348	                LDA @b DOS_TEMP
.193ed0		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.193ed2		c8		iny		                INY
.193ed3		c8		iny		                INY
.193ed4		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.193ed6		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.193ed8		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.193ed9		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.193edb		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.193ede		85 20		sta $0340	                STA @b DOS_FD_PTR
.193ee0		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.193ee2		69 00 00	adc #$0000	                ADC #0
.193ee5		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.193ee7		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.193ee8		a5 28		lda $0348	                LDA @b DOS_TEMP
.193eea		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.193eed		85 28		sta $0348	                STA @b DOS_TEMP
.193eef		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.193ef1		69 00 00	adc #$0000	                ADC #0
.193ef4		85 2a		sta $034a	                STA @b DOS_TEMP+2
.193ef6		ca		dex		                DEX                     ; Count down the descriptors...
.193ef7		d0 d2		bne $193ecb	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.193ef9		28		plp		                PLP
.193efa		2b		pld		                PLD
.193efb		ab		plb		                PLB
.193efc		6b		rtl		                RTL
.193efd						DOS_MOUNT
.193efd		8b		phb		                PHB
.193efe		0b		phd		                PHD
.193eff		08		php		                PHP
.193f00		48		pha		                PHA             ; begin setdbr macro
.193f01		08		php		                PHP
.193f02		e2 20		sep #$20	                SEP #$20        ; set A short
.193f04		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193f06		48		pha		                PHA
.193f07		ab		plb		                PLB
.193f08		28		plp		                PLP
.193f09		68		pla		                PLA             ; end setdbr macro
.193f0a		48		pha		                PHA             ; begin setdp macro
.193f0b		08		php		                PHP
.193f0c		c2 20		rep #$20	                REP #$20        ; set A long
.193f0e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193f11		5b		tcd		                TCD
.193f12		28		plp		                PLP
.193f13		68		pla		                PLA             ; end setdp macro
.193f14		e2 20		sep #$20	                SEP #$20        ; set A short
.193f16		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.193f18		8f 50 a0 18	sta $18a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.193f1c		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.193f1e		f0 1f		beq $193f3f	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.193f20		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.193f22		f0 26		beq $193f4a	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.193f24		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.193f26		f0 0b		beq $193f33	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.193f28		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.193f2a		85 0e		sta $032e	                STA DOS_STATUS
.193f2c		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.193f2e		85 00		sta $0320	                STA BIOS_STATUS
.193f30		82 7c 01	brl $1940af	                BRL ret_failure
.193f33		22 24 5e 19	jsl $195e24	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.193f37		b0 03		bcs $193f3c	                BCS fdc_success
.193f39		82 73 01	brl $1940af	                BRL ret_failure
.193f3c		82 67 01	brl $1940a6	fdc_success     BRL ret_success
.193f3f		22 e9 55 19	jsl $1955e9	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.193f43		b0 10		bcs $193f55	                BCS get_mbr             ; Continue if success
.193f45		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.193f47		82 65 01	brl $1940af	                BRL ret_failure
.193f4a		22 ab 60 19	jsl $1960ab	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.193f4e		b0 05		bcs $193f55	                BCS get_mbr             ; Continue if success
.193f50		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.193f52		82 5a 01	brl $1940af	                BRL ret_failure
.193f55						get_mbr
.193f55		c2 30		rep #$30	                REP #$30        ; set A&X long
.193f57		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.193f59		64 04		stz $0324	                STZ BIOS_LBA+2
.193f5b		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.193f5e		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193f60		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.193f63		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193f65		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.193f69		b0 07		bcs $193f72	                BCS chk_signature       ; If success, check the signature bytes
.193f6b		e2 20		sep #$20	                SEP #$20        ; set A short
.193f6d		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.193f6f		82 3d 01	brl $1940af	                BRL ret_failure
.193f72						chk_signature
.193f72		e2 20		sep #$20	                SEP #$20        ; set A short
.193f74		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.193f77		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.193f79		d0 07		bne $193f82	                BNE not_mbr             ; No: signal we could find the MBR
.193f7b		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.193f7e		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.193f80		f0 05		beq $193f87	                BEQ chk_part_type       ; Yes: we have an MBR
.193f82		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.193f84		82 28 01	brl $1940af	                BRL ret_failure
.193f87		ad c2 a4	lda $18a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.193f8a		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.193f8c		f0 05		beq $193f93	                BEQ get_LBA             ; Is FAT32 with LBA?
.193f8e		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.193f90		82 1c 01	brl $1940af	                BRL ret_failure
.193f93		8d 01 a0	sta $18a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.193f96		c2 20		rep #$20	                REP #$20        ; set A long
.193f98		ad c6 a4	lda $18a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.193f9b		8d 04 a0	sta $18a004	                STA FIRSTSECTOR
.193f9e		ad c8 a4	lda $18a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.193fa1		8d 06 a0	sta $18a006	                STA FIRSTSECTOR+2
.193fa4		ad cb a4	lda $18a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.193fa7		8d 08 a0	sta $18a008	                STA SECTORCOUNT
.193faa		ad cd a4	lda $18a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.193fad		8d 0a a0	sta $18a00a	                STA SECTORCOUNT+2
.193fb0		e2 20		sep #$20	                SEP #$20        ; set A short
.193fb2		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.193fb4		8d 00 a0	sta $18a000	                STA DEVICE
.193fb7		a9 00		lda #$00	                LDA #0
.193fb9		8d 02 a0	sta $18a002	                STA PARTITION           ; For the moment, we only support the first partition
.193fbc		c2 20		rep #$20	                REP #$20        ; set A long
.193fbe		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.193fc1		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193fc3		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.193fc6		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193fc8		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.193fcb		85 02		sta $0322	                STA BIOS_LBA
.193fcd		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.193fd0		85 04		sta $0324	                STA BIOS_LBA+2
.193fd2		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.193fd6		b0 1c		bcs $193ff4	                BCS get_first_sec       ; Got it? Start parsing it
.193fd8		e2 20		sep #$20	                SEP #$20        ; set A short
.193fda		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.193fdc		82 d0 00	brl $1940af	                BRL ret_failure
.193fdf						chk_bpb_sig
.193fdf		e2 20		sep #$20	                SEP #$20        ; set A short
.193fe1		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.193fe4		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.193fe6		d0 07		bne $193fef	                BNE not_bpb             ; No: signal we could find the volume ID
.193fe8		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.193feb		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.193fed		f0 05		beq $193ff4	                BEQ get_first_sec       ; Yes: we have an volume ID
.193fef		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.193ff1		82 bb 00	brl $1940af	                BRL ret_failure
.193ff4						get_first_sec
.193ff4		c2 20		rep #$20	                REP #$20        ; set A long
.193ff6		ad 2c a3	lda $18a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.193ff9		8d 20 a0	sta $18a020	                STA ROOT_DIR_FIRST_CLUSTER
.193ffc		ad 2e a3	lda $18a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.193fff		8d 22 a0	sta $18a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.194002		ad 0e a3	lda $18a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.194005		8d 0c a0	sta $18a00c	                STA NUM_RSRV_SEC
.194008		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.194009		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.19400c		6d 0c a0	adc $18a00c	                ADC NUM_RSRV_SEC
.19400f		8d 14 a0	sta $18a014	                STA FAT_BEGIN_LBA
.194012		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.194015		69 00 00	adc #$0000	                ADC #0
.194018		8d 16 a0	sta $18a016	                STA FAT_BEGIN_LBA+2
.19401b		e2 20		sep #$20	                SEP #$20        ; set A short
.19401d		a2 00 00	ldx #$0000	                LDX #0
.194020		bf 24 a3 18	lda $18a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.194024		9f 10 a0 18	sta $18a010,x	                STA @l SEC_PER_FAT,X
.194028		e8		inx		                INX
.194029		e0 04 00	cpx #$0004	                CPX #4
.19402c		d0 f2		bne $194020	                BNE cpy_secperfat
.19402e		ad 10 a0	lda $18a010	                LDA SEC_PER_FAT
.194031		0a		asl a		                ASL A
.194032		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.194035		ad 11 a0	lda $18a011	                LDA SEC_PER_FAT+1
.194038		2a		rol a		                ROL A
.194039		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.19403c		ad 12 a0	lda $18a012	                LDA SEC_PER_FAT+2
.19403f		2a		rol a		                ROL A
.194040		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.194043		ad 13 a0	lda $18a013	                LDA SEC_PER_FAT+3
.194046		2a		rol a		                ROL A
.194047		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.19404a		18		clc		                CLC
.19404b		ad 1c a0	lda $18a01c	                LDA CLUSTER_BEGIN_LBA
.19404e		6d 14 a0	adc $18a014	                ADC FAT_BEGIN_LBA
.194051		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.194054		ad 1d a0	lda $18a01d	                LDA CLUSTER_BEGIN_LBA+1
.194057		6d 15 a0	adc $18a015	                ADC FAT_BEGIN_LBA+1
.19405a		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.19405d		ad 1e a0	lda $18a01e	                LDA CLUSTER_BEGIN_LBA+2
.194060		6d 16 a0	adc $18a016	                ADC FAT_BEGIN_LBA+2
.194063		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.194066		ad 1f a0	lda $18a01f	                LDA CLUSTER_BEGIN_LBA+3
.194069		6d 17 a0	adc $18a017	                ADC FAT_BEGIN_LBA+3
.19406c		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.19406f		e2 20		sep #$20	                SEP #$20        ; set A short
.194071		ad 0d a3	lda $18a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.194074		8d 03 a0	sta $18a003	                STA SECTORS_PER_CLUSTER
.194077		18		clc		                CLC
.194078		ad 14 a0	lda $18a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.19407b		6d 10 a0	adc $18a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.19407e		8d 18 a0	sta $18a018	                STA FAT2_BEGIN_LBA
.194081		ad 15 a0	lda $18a015	                LDA FAT_BEGIN_LBA+1
.194084		6d 11 a0	adc $18a011	                ADC SEC_PER_FAT+1
.194087		8d 19 a0	sta $18a019	                STA FAT2_BEGIN_LBA+1
.19408a		ad 16 a0	lda $18a016	                LDA FAT_BEGIN_LBA+2
.19408d		6d 12 a0	adc $18a012	                ADC SEC_PER_FAT+2
.194090		8d 1a a0	sta $18a01a	                STA FAT2_BEGIN_LBA+2
.194093		ad 17 a0	lda $18a017	                LDA FAT_BEGIN_LBA+3
.194096		6d 13 a0	adc $18a013	                ADC SEC_PER_FAT+3
.194099		8d 1b a0	sta $18a01b	                STA FAT2_BEGIN_LBA+3
.19409c		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.19409e		8d 0e a0	sta $18a00e	                STA CLUSTER_SIZE
.1940a1		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.1940a3		8d 0f a0	sta $18a00f	                STA CLUSTER_SIZE+1
.1940a6						ret_success
.1940a6		e2 20		sep #$20	                SEP #$20        ; set A short
.1940a8		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.1940aa		28		plp		                PLP
.1940ab		2b		pld		                PLD
.1940ac		ab		plb		                PLB
.1940ad		38		sec		                SEC
.1940ae		6b		rtl		                RTL
.1940af						ret_failure
.1940af		e2 20		sep #$20	                SEP #$20        ; set A short
.1940b1		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.1940b3		28		plp		                PLP
.1940b4		2b		pld		                PLD
.1940b5		ab		plb		                PLB
.1940b6		18		clc		                CLC
.1940b7		6b		rtl		                RTL
.1940b8						DOS_TESTBOOT
.1940b8		8b		phb		                PHB
.1940b9		0b		phd		                PHD
.1940ba		da		phx		                PHX
.1940bb		08		php		                PHP
.1940bc		48		pha		                PHA             ; begin setdbr macro
.1940bd		08		php		                PHP
.1940be		e2 20		sep #$20	                SEP #$20        ; set A short
.1940c0		a9 00		lda #$00	                LDA #0
.1940c2		48		pha		                PHA
.1940c3		ab		plb		                PLB
.1940c4		28		plp		                PLP
.1940c5		68		pla		                PLA             ; end setdbr macro
.1940c6		48		pha		                PHA             ; begin setdp macro
.1940c7		08		php		                PHP
.1940c8		c2 20		rep #$20	                REP #$20        ; set A long
.1940ca		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1940cd		5b		tcd		                TCD
.1940ce		28		plp		                PLP
.1940cf		68		pla		                PLA             ; end setdp macro
.1940d0		c2 10		rep #$10	                REP #$10        ; set X long
.1940d2						chk_dev
.1940d2		e2 20		sep #$20	                SEP #$20        ; set A short
.1940d4		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.1940d6		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.1940d8		f0 24		beq $1940fe	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.1940da		c2 30		rep #$30	                REP #$30        ; set A&X long
.1940dc		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.1940df		85 02		sta $0322	                STA @b BIOS_LBA
.1940e1		85 04		sta $0324	                STA @b BIOS_LBA+2
.1940e3		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.1940e6		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.1940e8		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.1940eb		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.1940ed		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.1940f1		b0 03		bcs $1940f6	                BCS chk_mbr_brl
.1940f3		82 47 00	brl $19413d	                BRL done                    ; If failed... just return
.1940f6						chk_mbr_brl
.1940f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1940f8		af 00 a3 18	lda $18a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.1940fc		80 04		bra $194102	                BRA chk_brl
.1940fe		af 3e a3 18	lda $18a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.194102		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.194104		f0 06		beq $19410c	                BEQ chk_magic               ; Yes: check for the magic text
.194106		c9 82		cmp #$82	                CMP #$82
.194108		f0 02		beq $19410c	                BEQ chk_magic
.19410a		80 31		bra $19413d	                BRA done                    ; No: just return
.19410c		a2 00 00	ldx #$0000	chk_magic       LDX #0
.19410f		bf 03 a3 18	lda $18a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.194113		df 42 41 19	cmp $194142,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.194117		d0 24		bne $19413d	                BNE done                    ; If it's not equal, just return
.194119		e8		inx		                INX                         ; Otherwise, check the next one
.19411a		e0 08 00	cpx #$0008	                CPX #8
.19411d		d0 f0		bne $19410f	                BNE magic_loop              ; Until we've checked all 8 bytes
.19411f		c2 30		rep #$30	                REP #$30        ; set A&X long
.194121		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.194124		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.194127		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.19412a		44 18 18	mvp #$18,#$18	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.19412d		e2 20		sep #$20	                SEP #$20        ; set A short
.19412f		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.194131		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.194133		f0 04		beq $194139	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.194135		5c 00 a9 18	jmp $18a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.194139		5c 3e a9 18	jmp $18a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.19413d		28		plp		done            PLP
.19413e		2b		pld		                PLD
.19413f		ab		plb		                PLB
.194140		fa		plx		                PLX
.194141		6b		rtl		                RTL
>194142		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.19414a						DOS_CALC_LBA
.19414a		8b		phb		                PHB
.19414b		0b		phd		                PHD
.19414c		08		php		                PHP
.19414d		48		pha		                PHA             ; begin setdbr macro
.19414e		08		php		                PHP
.19414f		e2 20		sep #$20	                SEP #$20        ; set A short
.194151		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194153		48		pha		                PHA
.194154		ab		plb		                PLB
.194155		28		plp		                PLP
.194156		68		pla		                PLA             ; end setdbr macro
.194157		48		pha		                PHA             ; begin setdp macro
.194158		08		php		                PHP
.194159		c2 20		rep #$20	                REP #$20        ; set A long
.19415b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19415e		5b		tcd		                TCD
.19415f		28		plp		                PLP
.194160		68		pla		                PLA             ; end setdp macro
.194161		c2 20		rep #$20	                REP #$20        ; set A long
.194163		38		sec		                SEC
.194164		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.194166		e9 02 00	sbc #$0002	                SBC #2
.194169		85 28		sta $0348	                STA DOS_TEMP
.19416b		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.19416d		e9 00 00	sbc #$0000	                SBC #0
.194170		85 2a		sta $034a	                STA DOS_TEMP+2
.194172		e2 10		sep #$10	                SEP #$10        ; set X short
.194174		ae 03 a0	ldx $18a003	                LDX SECTORS_PER_CLUSTER
.194177		e0 01		cpx #$01	mult_loop       CPX #1
.194179		f0 07		beq $194182	                BEQ add_offset
.19417b		06 28		asl $0348	                ASL DOS_TEMP
.19417d		26 28		rol $0348	                ROL DOS_TEMP
.19417f		ca		dex		                DEX
.194180		80 f5		bra $194177	                BRA mult_loop
.194182		18		clc		add_offset      CLC
.194183		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.194185		6d 1c a0	adc $18a01c	                ADC CLUSTER_BEGIN_LBA
.194188		85 02		sta $0322	                STA BIOS_LBA
.19418a		a5 2a		lda $034a	                LDA DOS_TEMP+2
.19418c		6d 1e a0	adc $18a01e	                ADC CLUSTER_BEGIN_LBA+2
.19418f		85 04		sta $0324	                STA BIOS_LBA+2
.194191		28		plp		                PLP
.194192		2b		pld		                PLD
.194193		ab		plb		                PLB
.194194		6b		rtl		                RTL
.194195						DOS_GETCLUSTER
.194195		8b		phb		                PHB
.194196		0b		phd		                PHD
.194197		08		php		                PHP
.194198		48		pha		                PHA             ; begin setdbr macro
.194199		08		php		                PHP
.19419a		e2 20		sep #$20	                SEP #$20        ; set A short
.19419c		a9 00		lda #$00	                LDA #0
.19419e		48		pha		                PHA
.19419f		ab		plb		                PLB
.1941a0		28		plp		                PLP
.1941a1		68		pla		                PLA             ; end setdbr macro
.1941a2		48		pha		                PHA             ; begin setdp macro
.1941a3		08		php		                PHP
.1941a4		c2 20		rep #$20	                REP #$20        ; set A long
.1941a6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1941a9		5b		tcd		                TCD
.1941aa		28		plp		                PLP
.1941ab		68		pla		                PLA             ; end setdp macro
.1941ac		c2 20		rep #$20	                REP #$20        ; set A long
.1941ae		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.1941b0		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1941b2		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.1941b4		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1941b6		22 4a 41 19	jsl $19414a	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.1941ba		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.1941be		90 09		bcc $1941c9	                BCC ret_failure
.1941c0						ret_success
.1941c0		e2 20		sep #$20	                SEP #$20        ; set A short
.1941c2		64 0e		stz $032e	                STZ DOS_STATUS
.1941c4		28		plp		                PLP
.1941c5		2b		pld		                PLD
.1941c6		ab		plb		                PLB
.1941c7		38		sec		                SEC
.1941c8		6b		rtl		                RTL
.1941c9						ret_failure
.1941c9		e2 20		sep #$20	                SEP #$20        ; set A short
.1941cb		85 0e		sta $032e	                STA DOS_STATUS
.1941cd		28		plp		                PLP
.1941ce		2b		pld		                PLD
.1941cf		ab		plb		                PLB
.1941d0		18		clc		                CLC
.1941d1		6b		rtl		                RTL
.1941d2						DOS_PUTCLUSTER
.1941d2		8b		phb		                PHB
.1941d3		0b		phd		                PHD
.1941d4		08		php		                PHP
.1941d5		48		pha		                PHA             ; begin setdbr macro
.1941d6		08		php		                PHP
.1941d7		e2 20		sep #$20	                SEP #$20        ; set A short
.1941d9		a9 00		lda #$00	                LDA #0
.1941db		48		pha		                PHA
.1941dc		ab		plb		                PLB
.1941dd		28		plp		                PLP
.1941de		68		pla		                PLA             ; end setdbr macro
.1941df		48		pha		                PHA             ; begin setdp macro
.1941e0		08		php		                PHP
.1941e1		c2 20		rep #$20	                REP #$20        ; set A long
.1941e3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1941e6		5b		tcd		                TCD
.1941e7		28		plp		                PLP
.1941e8		68		pla		                PLA             ; end setdp macro
.1941e9		c2 20		rep #$20	                REP #$20        ; set A long
.1941eb		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.1941ed		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1941ef		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.1941f1		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1941f3		22 4a 41 19	jsl $19414a	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.1941f7		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.1941fb		90 09		bcc $194206	                BCC ret_failure
.1941fd						ret_success
.1941fd		e2 20		sep #$20	                SEP #$20        ; set A short
.1941ff		64 0e		stz $032e	                STZ DOS_STATUS
.194201		28		plp		                PLP
.194202		2b		pld		                PLD
.194203		ab		plb		                PLB
.194204		38		sec		                SEC
.194205		6b		rtl		                RTL
.194206						ret_failure
.194206		e2 20		sep #$20	                SEP #$20        ; set A short
.194208		85 0e		sta $032e	                STA DOS_STATUS
.19420a		28		plp		                PLP
.19420b		2b		pld		                PLD
.19420c		ab		plb		                PLB
.19420d		18		clc		                CLC
.19420e		6b		rtl		                RTL
>19420f		40 46 00			DOS_FDC_NAME    .null "@F"
.194212						DOS_FDC_DESC
>194212		0f 42 19 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>194216		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>194217		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>19421b		40 53 00			DOS_SDC_NAME    .null "@S"
.19421e						DOS_SDC_DESC
>19421e		1b 42 19 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>194222		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>194223		12 42 19 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>194227		40 48 00			DOS_HDC_NAME    .null "@H"
.19422a						DOS_HD_DESC
>19422a		27 42 19 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>19422e		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>19422f		1e 42 19 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.194233						DOS_PARSE_DEV
.194233		8b		phb		                PHB
.194234		0b		phd		                PHD
.194235		08		php		                PHP
.194236		48		pha		                PHA             ; begin setdbr macro
.194237		08		php		                PHP
.194238		e2 20		sep #$20	                SEP #$20        ; set A short
.19423a		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19423c		48		pha		                PHA
.19423d		ab		plb		                PLB
.19423e		28		plp		                PLP
.19423f		68		pla		                PLA             ; end setdbr macro
.194240		48		pha		                PHA             ; begin setdp macro
.194241		08		php		                PHP
.194242		c2 20		rep #$20	                REP #$20        ; set A long
.194244		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194247		5b		tcd		                TCD
.194248		28		plp		                PLP
.194249		68		pla		                PLA             ; end setdp macro
.19424a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19424c		af 4a a0 18	lda $18a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.194250		85 28		sta $0348	                STA DOS_TEMP
.194252		af 4c a0 18	lda $18a04c	                LDA @l DOS_DEV_NAMES+2
.194256		85 2a		sta $034a	                STA DOS_TEMP+2
.194258		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.19425b		85 48		sta $0368	                STA DOS_STR2_PTR
.19425d		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.194260		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.194262		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.194265		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194267		85 44		sta $0364	                STA DOS_STR1_PTR
.194269		c8		iny		                INY
.19426a		c8		iny		                INY
.19426b		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.19426d		85 46		sta $0366	                STA DOS_STR1_PTR+2
.19426f		e2 20		sep #$20	                SEP #$20        ; set A short
.194271		a0 00 00	ldy #$0000	                LDY #0
.194274		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.194276		f0 24		beq $19429c	                BEQ found                   ; If it's NULL, we found a match
.194278		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.19427a		d0 03		bne $19427f	                BNE next_device             ; If no match, try to load the next device
.19427c		c8		iny		                INY                         ; Go to the next character
.19427d		80 f5		bra $194274	                BRA cmp_loop
.19427f						next_device
.19427f		c2 20		rep #$20	                REP #$20        ; set A long
.194281		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.194284		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194286		48		pha		                PHA
.194287		c8		iny		                INY
.194288		c8		iny		                INY
.194289		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.19428b		85 2a		sta $034a	                STA DOS_TEMP+2
.19428d		68		pla		                PLA
.19428e		85 28		sta $0348	                STA DOS_TEMP
.194290		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.194292		d0 ce		bne $194262	                BNE dev_loop                ; No: check this device
.194294		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194296		d0 ca		bne $194262	                BNE dev_loop
.194298		28		plp		done            PLP                         ; Otherwise, return having not found a match
.194299		2b		pld		                PLD
.19429a		ab		plb		                PLB
.19429b		6b		rtl		                RTL
.19429c		22 ad 42 19	jsl $1942ad	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.1942a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1942a2		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.1942a5		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.1942a7		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1942ab		80 eb		bra $194298	                BRA done
.1942ad						DOS_ADJUSTPATH
.1942ad		da		phx		                PHX
.1942ae		5a		phy		                PHY
.1942af		8b		phb		                PHB
.1942b0		0b		phd		                PHD
.1942b1		08		php		                PHP
.1942b2		48		pha		                PHA             ; begin setdbr macro
.1942b3		08		php		                PHP
.1942b4		e2 20		sep #$20	                SEP #$20        ; set A short
.1942b6		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1942b8		48		pha		                PHA
.1942b9		ab		plb		                PLB
.1942ba		28		plp		                PLP
.1942bb		68		pla		                PLA             ; end setdbr macro
.1942bc		48		pha		                PHA             ; begin setdp macro
.1942bd		08		php		                PHP
.1942be		c2 20		rep #$20	                REP #$20        ; set A long
.1942c0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1942c3		5b		tcd		                TCD
.1942c4		28		plp		                PLP
.1942c5		68		pla		                PLA             ; end setdp macro
.1942c6		c2 30		rep #$30	                REP #$30        ; set A&X long
.1942c8		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.1942ca		98		tya		                TYA                             ; Compute the address of the first source byte
.1942cb		18		clc		                CLC
.1942cc		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.1942cf		aa		tax		                TAX
.1942d0		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.1942d3		a8		tay		                TAY
.1942d4		38		sec		                SEC                             ; Compute the number of bytes to copy
.1942d5		a9 00 01	lda #$0100	                LDA #256
.1942d8		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.1942da		54 00 00	mvn #$00,#$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.1942dd		28		plp		                PLP
.1942de		2b		pld		                PLD
.1942df		ab		plb		                PLB
.1942e0		7a		ply		                PLY
.1942e1		fa		plx		                PLX
.1942e2		6b		rtl		                RTL
.1942e3						DOS_PARSE_PATH
.1942e3		8b		phb		                PHB
.1942e4		0b		phd		                PHD
.1942e5		08		php		                PHP
.1942e6		48		pha		                PHA             ; begin setdbr macro
.1942e7		08		php		                PHP
.1942e8		e2 20		sep #$20	                SEP #$20        ; set A short
.1942ea		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1942ec		48		pha		                PHA
.1942ed		ab		plb		                PLB
.1942ee		28		plp		                PLP
.1942ef		68		pla		                PLA             ; end setdbr macro
.1942f0		48		pha		                PHA             ; begin setdp macro
.1942f1		08		php		                PHP
.1942f2		c2 20		rep #$20	                REP #$20        ; set A long
.1942f4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1942f7		5b		tcd		                TCD
.1942f8		28		plp		                PLP
.1942f9		68		pla		                PLA             ; end setdp macro
.1942fa		c2 10		rep #$10	                REP #$10        ; set X long
.1942fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1942fe		a2 00 00	ldx #$0000	                LDX #0
.194301		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.194303		f0 1b		beq $194320	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.194305		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.194307		b0 05		bcs $19430e	                BGE check_case          ; No: check the case
.194309		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.19430b		82 64 00	brl $194372	                BRL ret_failure
.19430e		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.194310		90 08		bcc $19431a	                BLT next_char
.194312		c9 7b		cmp #$7b	                CMP #'z'+1
.194314		b0 04		bcs $19431a	                BGE next_char
.194316		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.194318		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.19431a		e8		inx		next_char       INX                     ; Move to the next character
.19431b		e0 00 01	cpx #$0100	                CPX #$100
.19431e		d0 e1		bne $194301	                BNE upcase_loop
.194320		22 33 42 19	jsl $194233	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.194324		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.194326		c9 3a		cmp #$3a	                CMP #':'
.194328		d0 07		bne $194331	                BNE clr_name            ; If not colon, treat it as a file name
.19432a		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.19432d		22 ad 42 19	jsl $1942ad	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.194331		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.194334		a9 20		lda #$20	                LDA #' '
.194336		99 3a a0	sta $18a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.194339		c8		iny		                INY
.19433a		c0 0b 00	cpy #$000b	                CPY #11
.19433d		d0 f7		bne $194336	                BNE clr_loop
.19433f		a2 00 00	ldx #$0000	                LDX #0
.194342		a0 00 00	ldy #$0000	                LDY #0
.194345		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.194347		f0 20		beq $194369	                BEQ ret_success         ; If NULL: we've finished parsing the path
.194349		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.19434b		f0 0a		beq $194357	                BEQ cpy_ext             ; And move to the extension
.19434d		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.194350		e8		inx		                INX
.194351		c8		iny		                INY                     ; Move to the next character
.194352		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.194355		d0 ee		bne $194345	                BNE cpy_name_loop       ; No: process this one
.194357		e8		inx		cpy_ext         INX                     ; Skip the dot
.194358		a0 08 00	ldy #$0008	                LDY #8
.19435b		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.19435d		f0 0a		beq $194369	                BEQ ret_success         ; If it's NULL, we've finished
.19435f		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.194362		e8		inx		                INX
.194363		c8		iny		                INY                     ; Move to the next character
.194364		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.194367		d0 f2		bne $19435b	                BNE cpy_ext_loop        ; No: process this one
.194369						ret_success
.194369		e2 20		sep #$20	                SEP #$20        ; set A short
.19436b		64 0e		stz $032e	                STZ DOS_STATUS
.19436d		28		plp		                PLP
.19436e		2b		pld		                PLD
.19436f		ab		plb		                PLB
.194370		38		sec		                SEC
.194371		6b		rtl		                RTL
.194372						ret_failure
.194372		e2 20		sep #$20	                SEP #$20        ; set A short
.194374		85 0e		sta $032e	                STA DOS_STATUS
.194376		28		plp		                PLP
.194377		2b		pld		                PLD
.194378		ab		plb		                PLB
.194379		18		clc		                CLC
.19437a		6b		rtl		                RTL
.19437b						DOS_FINDFILE
.19437b		8b		phb		                PHB
.19437c		0b		phd		                PHD
.19437d		08		php		                PHP
.19437e		48		pha		                PHA             ; begin setdbr macro
.19437f		08		php		                PHP
.194380		e2 20		sep #$20	                SEP #$20        ; set A short
.194382		a9 00		lda #$00	                LDA #0
.194384		48		pha		                PHA
.194385		ab		plb		                PLB
.194386		28		plp		                PLP
.194387		68		pla		                PLA             ; end setdbr macro
.194388		48		pha		                PHA             ; begin setdp macro
.194389		08		php		                PHP
.19438a		c2 20		rep #$20	                REP #$20        ; set A long
.19438c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19438f		5b		tcd		                TCD
.194390		28		plp		                PLP
.194391		68		pla		                PLA             ; end setdp macro
.194392		c2 30		rep #$30	                REP #$30        ; set A&X long
.194394		22 e3 42 19	jsl $1942e3	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.194398		b0 05		bcs $19439f	                BCS mount                       ; If success: try to open the directory
.19439a		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.19439b		2b		pld		                PLD
.19439c		ab		plb		                PLB
.19439d		18		clc		                CLC
.19439e		6b		rtl		                RTL
.19439f		22 fd 3e 19	jsl $193efd	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.1943a3		b0 07		bcs $1943ac	                BCS get_directory
.1943a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1943a7		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.1943a9		82 56 00	brl $194402	                BRL ret_failure
.1943ac						get_directory
.1943ac		c2 20		rep #$20	                REP #$20        ; set A long
.1943ae		22 b2 3b 19	jsl $193bb2	                JSL DOS_DIROPEN                 ; Get the directory
.1943b2		b0 07		bcs $1943bb	                BCS scan_entries                ; If success: start scanning the directory entries
.1943b4		e2 20		sep #$20	                SEP #$20        ; set A short
.1943b6		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.1943b8		82 47 00	brl $194402	                BRL ret_failure
.1943bb		22 31 3c 19	jsl $193c31	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.1943bf						scan_loop
.1943bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1943c1		a0 00 00	ldy #$0000	                LDY #0
.1943c4		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.1943c6		d0 05		bne $1943cd	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.1943c8		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.1943ca		82 35 00	brl $194402	                BRL ret_failure
.1943cd		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.1943cf		f0 26		beq $1943f7	                BEQ next_entry                  ; Go to the next entry
.1943d1		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.1943d4		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.1943d6		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.1943d8		d0 1d		bne $1943f7	                BNE next_entry                  ; Yes: skip it!
.1943da		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.1943dc		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.1943de		f0 17		beq $1943f7	                BEQ next_entry                  ; Yes: skip it!
.1943e0		a2 00 00	ldx #$0000	                LDX #0
.1943e3		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.1943e6		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.1943e8		df 3a a0 18	cmp $18a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.1943ec		d0 09		bne $1943f7	                BNE next_entry                  ; If not equal: try the next entry
.1943ee		c8		iny		                INY                             ; Advance to the next character
.1943ef		e8		inx		                INX
.1943f0		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.1943f3		f0 16		beq $19440b	                BEQ match                       ; Yes: we have a match!
.1943f5		80 ef		bra $1943e6	                BRA scan_cmp_loop               ; No: keep checking
.1943f7		22 4c 3c 19	jsl $193c4c	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.1943fb		90 05		bcc $194402	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.1943fd		82 bf ff	brl $1943bf	                BRL scan_loop                   ; If found: keep scanning
.194400		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.194402						ret_failure
.194402		e2 20		sep #$20	                SEP #$20        ; set A short
.194404		85 0e		sta $032e	                STA DOS_STATUS
.194406		28		plp		                PLP
.194407		2b		pld		                PLD
.194408		ab		plb		                PLB
.194409		18		clc		                CLC
.19440a		6b		rtl		                RTL
.19440b						match
.19440b		c2 20		rep #$20	                REP #$20        ; set A long
.19440d		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.194410		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194412		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.194414		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.194417		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194419		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19441b						ret_success
.19441b		e2 20		sep #$20	                SEP #$20        ; set A short
.19441d		64 0e		stz $032e	                STZ DOS_STATUS
.19441f		28		plp		                PLP
.194420		2b		pld		                PLD
.194421		ab		plb		                PLB
.194422		38		sec		                SEC
.194423		6b		rtl		                RTL
.194424						ENTRYFORCLUS12
.194424		8b		phb		                PHB
.194425		0b		phd		                PHD
.194426		08		php		                PHP
.194427		48		pha		                PHA             ; begin setdbr macro
.194428		08		php		                PHP
.194429		e2 20		sep #$20	                SEP #$20        ; set A short
.19442b		a9 00		lda #$00	                LDA #0
.19442d		48		pha		                PHA
.19442e		ab		plb		                PLB
.19442f		28		plp		                PLP
.194430		68		pla		                PLA             ; end setdbr macro
.194431		48		pha		                PHA             ; begin setdp macro
.194432		08		php		                PHP
.194433		c2 20		rep #$20	                REP #$20        ; set A long
.194435		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194438		5b		tcd		                TCD
.194439		28		plp		                PLP
.19443a		68		pla		                PLA             ; end setdp macro
.19443b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19443d		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.19443f		0a		asl a		                ASL A
.194440		85 28		sta $0348	                STA DOS_TEMP
.194442		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194444		2a		rol a		                ROL A
.194445		85 2a		sta $034a	                STA DOS_TEMP+2
.194447		18		clc		                CLC
.194448		a5 10		lda $0330	                LDA DOS_CLUS_ID
.19444a		65 28		adc $0348	                ADC DOS_TEMP
.19444c		85 28		sta $0348	                STA DOS_TEMP
.19444e		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194450		65 2a		adc $034a	                ADC DOS_TEMP+2
.194452		85 2a		sta $034a	                STA DOS_TEMP+2
.194454		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.194456		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.194458		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.19445a		29 ff 03	and #$03ff	                AND #$003FF
.19445d		aa		tax		                TAX
.19445e		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194460		66 28		ror $0348	                ROR DOS_TEMP
.194462		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194464		66 28		ror $0348	                ROR DOS_TEMP
.194466		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194468		66 28		ror $0348	                ROR DOS_TEMP
.19446a		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.19446c		66 28		ror $0348	                ROR DOS_TEMP
.19446e		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194470		66 28		ror $0348	                ROR DOS_TEMP
.194472		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194474		66 28		ror $0348	                ROR DOS_TEMP
.194476		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194478		66 28		ror $0348	                ROR DOS_TEMP
.19447a		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.19447c		66 28		ror $0348	                ROR DOS_TEMP
.19447e		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194480		66 28		ror $0348	                ROR DOS_TEMP
.194482		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.194483		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA
.194487		65 28		adc $0348	                ADC DOS_TEMP
.194489		85 24		sta $0344	                STA DOS_FAT_LBA
.19448b		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.19448f		65 2a		adc $034a	                ADC DOS_TEMP+2
.194491		85 26		sta $0346	                STA DOS_FAT_LBA+2
.194493		28		plp		                PLP
.194494		2b		pld		                PLD
.194495		ab		plb		                PLB
.194496		6b		rtl		                RTL
.194497						FATFORCLUSTER12
.194497		8b		phb		                PHB
.194498		0b		phd		                PHD
.194499		08		php		                PHP
.19449a		48		pha		                PHA             ; begin setdbr macro
.19449b		08		php		                PHP
.19449c		e2 20		sep #$20	                SEP #$20        ; set A short
.19449e		a9 00		lda #$00	                LDA #0
.1944a0		48		pha		                PHA
.1944a1		ab		plb		                PLB
.1944a2		28		plp		                PLP
.1944a3		68		pla		                PLA             ; end setdbr macro
.1944a4		48		pha		                PHA             ; begin setdp macro
.1944a5		08		php		                PHP
.1944a6		c2 20		rep #$20	                REP #$20        ; set A long
.1944a8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1944ab		5b		tcd		                TCD
.1944ac		28		plp		                PLP
.1944ad		68		pla		                PLA             ; end setdp macro
.1944ae		c2 30		rep #$30	                REP #$30        ; set A&X long
.1944b0		a2 00 00	ldx #$0000	                LDX #0
.1944b3		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.1944b6		8f 00 a5 18	sta $18a500	clr_loop        STA DOS_FAT_SECTORS
.1944ba		e8		inx		                INX
.1944bb		e8		inx		                INX
.1944bc		e0 00 04	cpx #$0400	                CPX #1024
.1944bf		d0 f5		bne $1944b6	                BNE clr_loop
.1944c1		22 24 44 19	jsl $194424	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.1944c5		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.1944c7		85 02		sta $0322	                STA BIOS_LBA
.1944c9		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.1944cb		85 04		sta $0324	                STA BIOS_LBA+2
.1944cd		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.1944d0		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1944d2		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.1944d5		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1944d7		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.1944db		90 17		bcc $1944f4	                BCC error
.1944dd		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.1944df		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.1944e2		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1944e4		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.1944e7		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1944e9		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.1944ed		90 05		bcc $1944f4	                BCC error
.1944ef		28		plp		                PLP
.1944f0		2b		pld		                PLD
.1944f1		ab		plb		                PLB
.1944f2		38		sec		                SEC
.1944f3		6b		rtl		                RTL
.1944f4						error
.1944f4		e2 20		sep #$20	                SEP #$20        ; set A short
.1944f6		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.1944f8		85 0e		sta $032e	                STA DOS_STATUS
.1944fa		28		plp		                PLP
.1944fb		2b		pld		                PLD
.1944fc		ab		plb		                PLB
.1944fd		18		clc		                CLC
.1944fe		6b		rtl		                RTL
.1944ff						FATFORCLUSTER32
.1944ff		8b		phb		                PHB
.194500		0b		phd		                PHD
.194501		48		pha		                PHA             ; begin setdbr macro
.194502		08		php		                PHP
.194503		e2 20		sep #$20	                SEP #$20        ; set A short
.194505		a9 00		lda #$00	                LDA #0
.194507		48		pha		                PHA
.194508		ab		plb		                PLB
.194509		28		plp		                PLP
.19450a		68		pla		                PLA             ; end setdbr macro
.19450b		48		pha		                PHA             ; begin setdp macro
.19450c		08		php		                PHP
.19450d		c2 20		rep #$20	                REP #$20        ; set A long
.19450f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194512		5b		tcd		                TCD
.194513		28		plp		                PLP
.194514		68		pla		                PLA             ; end setdp macro
.194515		c2 30		rep #$30	                REP #$30        ; set A&X long
.194517		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194519		85 24		sta $0344	                STA DOS_FAT_LBA
.19451b		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.19451d		85 26		sta $0346	                STA DOS_FAT_LBA+2
.19451f		a2 07 00	ldx #$0007	                LDX #7
.194522		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.194524		66 24		ror $0344	                ROR DOS_FAT_LBA
.194526		ca		dex		                DEX
.194527		d0 f9		bne $194522	                BNE div_loop
.194529		18		clc		                CLC
.19452a		a5 24		lda $0344	                LDA DOS_FAT_LBA
.19452c		6f 14 a0 18	adc $18a014	                ADC FAT_BEGIN_LBA
.194530		85 24		sta $0344	                STA DOS_FAT_LBA
.194532		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194534		6f 16 a0 18	adc $18a016	                ADC FAT_BEGIN_LBA+2
.194538		85 26		sta $0346	                STA DOS_FAT_LBA+2
.19453a		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.19453c		85 02		sta $0322	                STA BIOS_LBA
.19453e		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194540		85 04		sta $0324	                STA BIOS_LBA+2
.194542		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.194545		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194547		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.19454a		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19454c		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.194550		b0 06		bcs $194558	                BCS find_entry
.194552		e2 20		sep #$20	                SEP #$20        ; set A short
.194554		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194556		80 0e		bra $194566	                BRA ret_failure
.194558						find_entry
.194558		c2 20		rep #$20	                REP #$20        ; set A long
.19455a		a5 10		lda $0330	                LDA DOS_CLUS_ID
.19455c		0a		asl a		                ASL A
.19455d		0a		asl a		                ASL A                           ; * 4
.19455e		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.194561		aa		tax		                TAX                             ; X should be the offset within the sector
.194562		2b		pld		ret_success     PLD
.194563		ab		plb		                PLB
.194564		38		sec		                SEC                             ; return success
.194565		6b		rtl		                RTL
.194566		2b		pld		ret_failure     PLD
.194567		ab		plb		                PLB
.194568		18		clc		                CLC                             ; Return failure
.194569		6b		rtl		                RTL
.19456a						NEXTCLUSTER
.19456a		08		php		                PHP
.19456b		e2 20		sep #$20	                SEP #$20        ; set A short
.19456d		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194571		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194573		d0 08		bne $19457d	                BNE fat32                       ; No: assume it's FAT32
.194575		22 8b 45 19	jsl $19458b	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.194579		90 0d		bcc $194588	                BCC pass_failure                ; If there was an error, pass it up the chain
.19457b		80 06		bra $194583	                BRA ret_success
.19457d		22 f3 45 19	jsl $1945f3	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.194581		90 05		bcc $194588	                BCC pass_failure                ; If there was an error, pass it up the chain
.194583		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.194585		28		plp		                PLP
.194586		38		sec		                SEC
.194587		6b		rtl		                RTL
.194588		28		plp		pass_failure    PLP
.194589		18		clc		                CLC
.19458a		6b		rtl		                RTL
.19458b						NEXTCLUSTER12
.19458b		8b		phb		                    PHB
.19458c		0b		phd		                    PHD
.19458d		08		php		                    PHP
.19458e		48		pha		                PHA             ; begin setdbr macro
.19458f		08		php		                PHP
.194590		e2 20		sep #$20	                SEP #$20        ; set A short
.194592		a9 00		lda #$00	                LDA #0
.194594		48		pha		                PHA
.194595		ab		plb		                PLB
.194596		28		plp		                PLP
.194597		68		pla		                PLA             ; end setdbr macro
.194598		48		pha		                PHA             ; begin setdp macro
.194599		08		php		                PHP
.19459a		c2 20		rep #$20	                REP #$20        ; set A long
.19459c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19459f		5b		tcd		                TCD
.1945a0		28		plp		                PLP
.1945a1		68		pla		                PLA             ; end setdp macro
.1945a2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1945a4		22 97 44 19	jsl $194497	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.1945a8		b0 03		bcs $1945ad	                    BCS chk_clus_id
.1945aa		82 41 00	brl $1945ee	                    BRL pass_failure
.1945ad		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.1945af		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.1945b2		d0 0d		bne $1945c1	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.1945b4						is_even
.1945b4		c2 20		rep #$20	                REP #$20        ; set A long
.1945b6		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.1945ba		29 ff 0f	and #$0fff	                    AND #$0FFF
.1945bd		85 28		sta $0348	                    STA DOS_TEMP
.1945bf		80 0c		bra $1945cd	                    BRA check_id
.1945c1						is_odd
.1945c1		c2 20		rep #$20	                REP #$20        ; set A long
.1945c3		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.1945c7		4a		lsr a		                    LSR A
.1945c8		4a		lsr a		                    LSR A
.1945c9		4a		lsr a		                    LSR A
.1945ca		4a		lsr a		                    LSR A
.1945cb		85 28		sta $0348	                    STA DOS_TEMP
.1945cd						check_id
.1945cd		c2 20		rep #$20	                REP #$20        ; set A long
.1945cf		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.1945d1		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.1945d4		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.1945d7		f0 0f		beq $1945e8	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.1945d9		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.1945db		85 10		sta $0330	                    STA DOS_CLUS_ID
.1945dd		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.1945df						ret_success
.1945df		e2 20		sep #$20	                SEP #$20        ; set A short
.1945e1		64 0e		stz $032e	                    STZ DOS_STATUS
.1945e3		28		plp		                    PLP
.1945e4		2b		pld		                    PLD
.1945e5		ab		plb		                    PLB
.1945e6		38		sec		                    SEC
.1945e7		6b		rtl		                    RTL
.1945e8						no_more
.1945e8		e2 20		sep #$20	                SEP #$20        ; set A short
.1945ea		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.1945ec		85 0e		sta $032e	                    STA DOS_STATUS
.1945ee		28		plp		pass_failure        PLP
.1945ef		2b		pld		                    PLD
.1945f0		ab		plb		                    PLB
.1945f1		18		clc		                    CLC
.1945f2		6b		rtl		                    RTL
.1945f3						NEXTCLUSTER32
.1945f3		8b		phb		                PHB
.1945f4		0b		phd		                PHD
.1945f5		08		php		                PHP
.1945f6		48		pha		                PHA             ; begin setdbr macro
.1945f7		08		php		                PHP
.1945f8		e2 20		sep #$20	                SEP #$20        ; set A short
.1945fa		a9 00		lda #$00	                LDA #0
.1945fc		48		pha		                PHA
.1945fd		ab		plb		                PLB
.1945fe		28		plp		                PLP
.1945ff		68		pla		                PLA             ; end setdbr macro
.194600		48		pha		                PHA             ; begin setdp macro
.194601		08		php		                PHP
.194602		c2 20		rep #$20	                REP #$20        ; set A long
.194604		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194607		5b		tcd		                TCD
.194608		28		plp		                PLP
.194609		68		pla		                PLA             ; end setdp macro
.19460a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19460c		22 ff 44 19	jsl $1944ff	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.194610		90 53		bcc $194665	                BCC ret_failure                 ; If it did not work, return the error
.194612		e2 20		sep #$20	                SEP #$20        ; set A short
.194614		bf 00 a5 18	lda $18a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.194618		85 28		sta $0348	                STA DOS_TEMP
.19461a		bf 01 a5 18	lda $18a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.19461e		85 29		sta $0349	                STA DOS_TEMP+1
.194620		bf 02 a5 18	lda $18a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.194624		85 2a		sta $034a	                STA DOS_TEMP+2
.194626		bf 03 a5 18	lda $18a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.19462a		85 2b		sta $034b	                STA DOS_TEMP+3
.19462c		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.19462e		c9 ff		cmp #$ff	                CMP #$FF
.194630		d0 18		bne $19464a	                BNE found_next
.194632		a5 29		lda $0349	                LDA DOS_TEMP+1
.194634		c9 ff		cmp #$ff	                CMP #$FF
.194636		d0 12		bne $19464a	                BNE found_next
.194638		a5 2a		lda $034a	                LDA DOS_TEMP+2
.19463a		c9 ff		cmp #$ff	                CMP #$FF
.19463c		d0 0c		bne $19464a	                BNE found_next
.19463e		a5 2b		lda $034b	                LDA DOS_TEMP+3
.194640		c9 0f		cmp #$0f	                CMP #$0F
.194642		d0 06		bne $19464a	                BNE found_next                  ; No: return this cluster as the next
.194644		e2 20		sep #$20	                SEP #$20        ; set A short
.194646		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.194648		80 1b		bra $194665	                BRA ret_failure
.19464a						found_next
.19464a		e2 20		sep #$20	                SEP #$20        ; set A short
.19464c		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.19464e		85 10		sta $0330	                STA DOS_CLUS_ID
.194650		a5 29		lda $0349	                LDA DOS_TEMP+1
.194652		85 11		sta $0331	                STA DOS_CLUS_ID+1
.194654		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194656		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194658		a5 2b		lda $034b	                LDA DOS_TEMP+3
.19465a		85 13		sta $0333	                STA DOS_CLUS_ID+3
.19465c						ret_success
.19465c		e2 20		sep #$20	                SEP #$20        ; set A short
.19465e		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.194660		28		plp		                PLP
.194661		2b		pld		                PLD
.194662		ab		plb		                PLB
.194663		38		sec		                SEC
.194664		6b		rtl		                RTL
.194665						ret_failure
.194665		e2 20		sep #$20	                SEP #$20        ; set A short
.194667		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.194669		28		plp		                PLP
.19466a		2b		pld		                PLD
.19466b		ab		plb		                PLB
.19466c		18		clc		                CLC
.19466d		6b		rtl		                RTL
.19466e						DOS_READNEXT
.19466e		08		php		                PHP
.19466f		c2 30		rep #$30	                REP #$30        ; set A&X long
.194671		22 6a 45 19	jsl $19456a	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.194675		90 09		bcc $194680	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.194677		22 95 41 19	jsl $194195	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.19467b		90 03		bcc $194680	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.19467d		28		plp		ret_success     PLP
.19467e		38		sec		                SEC
.19467f		6b		rtl		                RTL
.194680		28		plp		pass_failure    PLP
.194681		18		clc		                CLC
.194682		6b		rtl		                RTL
.194683						DOS_FREECLUS
.194683		08		php		                PHP
.194684		48		pha		                PHA             ; begin setdp macro
.194685		08		php		                PHP
.194686		c2 20		rep #$20	                REP #$20        ; set A long
.194688		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19468b		5b		tcd		                TCD
.19468c		28		plp		                PLP
.19468d		68		pla		                PLA             ; end setdp macro
.19468e		e2 20		sep #$20	                SEP #$20        ; set A short
.194690		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194694		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194696		d0 08		bne $1946a0	                BNE fat32                       ; No: assume it's FAT32
.194698		22 14 47 19	jsl $194714	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.19469c		90 0d		bcc $1946ab	                BCC pass_failure                ; If there was an error, pass it up the chain
.19469e		80 06		bra $1946a6	                BRA ret_success
.1946a0		22 ec 47 19	jsl $1947ec	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.1946a4		90 05		bcc $1946ab	                BCC pass_failure                ; If there was an error, pass it up the chain
.1946a6		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.1946a8		28		plp		                PLP
.1946a9		38		sec		                SEC
.1946aa		6b		rtl		                RTL
.1946ab		28		plp		pass_failure    PLP
.1946ac		18		clc		                CLC
.1946ad		6b		rtl		                RTL
.1946ae						FDC_READ2FAT12
.1946ae		8b		phb		                    PHB
.1946af		0b		phd		                    PHD
.1946b0		08		php		                    PHP
.1946b1		48		pha		                PHA             ; begin setdbr macro
.1946b2		08		php		                PHP
.1946b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1946b5		a9 00		lda #$00	                LDA #0
.1946b7		48		pha		                PHA
.1946b8		ab		plb		                PLB
.1946b9		28		plp		                PLP
.1946ba		68		pla		                PLA             ; end setdbr macro
.1946bb		48		pha		                PHA             ; begin setdp macro
.1946bc		08		php		                PHP
.1946bd		c2 20		rep #$20	                REP #$20        ; set A long
.1946bf		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1946c2		5b		tcd		                TCD
.1946c3		28		plp		                PLP
.1946c4		68		pla		                PLA             ; end setdp macro
.1946c5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1946c7		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.1946ca		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.1946cc		a9 18 00	lda #$0018	                    LDA #`DOS_FAT_SECTORS
.1946cf		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.1946d1		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.1946d3		85 02		sta $0322	                    STA BIOS_LBA
.1946d5		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.1946d7		85 04		sta $0324	                    STA BIOS_LBA+2
.1946d9		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.1946dd		b0 07		bcs $1946e6	                    BCS inc_sect2                   ; If success: start getting the second sector
.1946df		e2 20		sep #$20	                SEP #$20        ; set A short
.1946e1		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.1946e3		82 1c 00	brl $194702	                    BRL ret_failure
.1946e6						inc_sect2
.1946e6		c2 20		rep #$20	                REP #$20        ; set A long
.1946e8		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.1946ea		d0 02		bne $1946ee	                    BNE inc_buff_ptr
.1946ec		e6 04		inc $0324	                    INC BIOS_LBA+2
.1946ee		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.1946f1		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.1946f3		a9 18 00	lda #$0018	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.1946f6		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.1946f8		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.1946fc		b0 0d		bcs $19470b	                    BCS ret_success                 ; If success, return success
.1946fe		e2 20		sep #$20	                SEP #$20        ; set A short
.194700		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.194702						ret_failure
.194702		e2 20		sep #$20	                SEP #$20        ; set A short
.194704		85 00		sta $0320	                    STA BIOS_STATUS
.194706		28		plp		                    PLP
.194707		2b		pld		                    PLD
.194708		ab		plb		                    PLB
.194709		18		clc		                    CLC
.19470a		6b		rtl		                    RTL
.19470b						ret_success
.19470b		e2 20		sep #$20	                SEP #$20        ; set A short
.19470d		64 00		stz $0320	                    STZ BIOS_STATUS
.19470f		28		plp		                    PLP
.194710		2b		pld		                    PLD
.194711		ab		plb		                    PLB
.194712		38		sec		                    SEC
.194713		6b		rtl		                    RTL
.194714						DOS_FREECLUS12
.194714		da		phx		                PHX
.194715		8b		phb		                PHB
.194716		0b		phd		                PHD
.194717		08		php		                PHP
.194718		48		pha		                PHA             ; begin setdbr macro
.194719		08		php		                PHP
.19471a		e2 20		sep #$20	                SEP #$20        ; set A short
.19471c		a9 00		lda #$00	                LDA #0
.19471e		48		pha		                PHA
.19471f		ab		plb		                PLB
.194720		28		plp		                PLP
.194721		68		pla		                PLA             ; end setdbr macro
.194722		48		pha		                PHA             ; begin setdp macro
.194723		08		php		                PHP
.194724		c2 20		rep #$20	                REP #$20        ; set A long
.194726		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194729		5b		tcd		                TCD
.19472a		28		plp		                PLP
.19472b		68		pla		                PLA             ; end setdp macro
.19472c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19472e		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.194731		85 10		sta $0330	                STA DOS_CLUS_ID
.194733		a9 00 00	lda #$0000	                LDA #0
.194736		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194738		22 24 44 19	jsl $194424	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.19473c		22 ae 46 19	jsl $1946ae	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.194740		b0 07		bcs $194749	                BCS start_of_fat                ; If success, move X to the start of the FAT
.194742		e2 20		sep #$20	                SEP #$20        ; set A short
.194744		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194746		82 99 00	brl $1947e2	                BRL ret_failure
.194749						start_of_fat
.194749		c2 30		rep #$30	                REP #$30        ; set A&X long
.19474b		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.19474d		89 01 00	bit #$0001	                BIT #1
.194750		d0 09		bne $19475b	                BNE is_odd
.194752		bf 00 a5 18	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.194756		29 ff 0f	and #$0fff	                AND #$0FFF
.194759		80 08		bra $194763	                BRA chk_available
.19475b		bf 00 a5 18	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.19475f		4a		lsr a		                LSR A
.194760		4a		lsr a		                LSR A
.194761		4a		lsr a		                LSR A
.194762		4a		lsr a		                LSR A
.194763						chk_available
.194763		85 28		sta $0348	                STA DOS_TEMP
.194765		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.194768		f0 03		beq $19476d	                BEQ chk_found
.19476a		82 39 00	brl $1947a6	                BRL next_cluster                ; No: advance to the next cluster
.19476d		8a		txa		chk_found       TXA
.19476e		85 2a		sta $034a	                STA DOS_TEMP+2
.194770		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.194772		89 01 00	bit #$0001	                BIT #1
.194775		d0 0d		bne $194784	                BNE is_odd2
.194777						is_even2
.194777		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.19477b		09 ff 0f	ora #$0fff	                ORA #$0FFF
.19477e		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194782		80 0b		bra $19478f	                BRA write_fat
.194784						is_odd2
.194784		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.194788		09 f0 ff	ora #$fff0	                ORA #$FFF0
.19478b		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.19478f		22 b6 48 19	jsl $1948b6	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.194793		b0 07		bcs $19479c	                BCS ret_success                 ; If success: return success
.194795		e2 20		sep #$20	                SEP #$20        ; set A short
.194797		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.194799		82 46 00	brl $1947e2	                BRL ret_failure
.19479c						ret_success
.19479c		e2 20		sep #$20	                SEP #$20        ; set A short
.19479e		64 0e		stz $032e	                STZ DOS_STATUS
.1947a0		28		plp		                PLP
.1947a1		2b		pld		                PLD
.1947a2		ab		plb		                PLB
.1947a3		fa		plx		                PLX
.1947a4		38		sec		                SEC
.1947a5		6b		rtl		                RTL
.1947a6						next_cluster
.1947a6		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.1947a8		d0 02		bne $1947ac	                BNE calc_entry
.1947aa		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.1947ac		22 24 44 19	jsl $194424	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.1947b0		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.1947b3		f0 03		beq $1947b8	                BEQ chk_end_of_fat
.1947b5		82 93 ff	brl $19474b	                BRL chk_cluster                 ; No: go back and check it too
.1947b8						chk_end_of_fat
.1947b8		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.1947ba		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.1947be		d0 0f		bne $1947cf	                BNE next_2
.1947c0		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.1947c2		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.1947c6		d0 07		bne $1947cf	                BNE next_2                      ; No: get the next to sectors
.1947c8		e2 20		sep #$20	                SEP #$20        ; set A short
.1947ca		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.1947cc		82 13 00	brl $1947e2	                BRL ret_failure
.1947cf						next_2
.1947cf		22 ae 46 19	jsl $1946ae	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.1947d3		90 06		bcc $1947db	                BCC fat_fail                    ; If failed: return error
.1947d5		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.1947d8		82 70 ff	brl $19474b	                BRL chk_cluster                 ; And start checking from there
.1947db						fat_fail
.1947db		e2 20		sep #$20	                SEP #$20        ; set A short
.1947dd		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.1947df		82 00 00	brl $1947e2	                BRL ret_failure
.1947e2						ret_failure
.1947e2		e2 20		sep #$20	                SEP #$20        ; set A short
.1947e4		85 0e		sta $032e	                STA DOS_STATUS
.1947e6		28		plp		                PLP
.1947e7		2b		pld		                PLD
.1947e8		ab		plb		                PLB
.1947e9		fa		plx		                PLX
.1947ea		18		clc		                CLC
.1947eb		6b		rtl		                RTL
.1947ec						DOS_FREECLUS32
.1947ec		8b		phb		                PHB
.1947ed		0b		phd		                PHD
.1947ee		08		php		                PHP
.1947ef		48		pha		                PHA             ; begin setdbr macro
.1947f0		08		php		                PHP
.1947f1		e2 20		sep #$20	                SEP #$20        ; set A short
.1947f3		a9 00		lda #$00	                LDA #0
.1947f5		48		pha		                PHA
.1947f6		ab		plb		                PLB
.1947f7		28		plp		                PLP
.1947f8		68		pla		                PLA             ; end setdbr macro
.1947f9		48		pha		                PHA             ; begin setdp macro
.1947fa		08		php		                PHP
.1947fb		c2 20		rep #$20	                REP #$20        ; set A long
.1947fd		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194800		5b		tcd		                TCD
.194801		28		plp		                PLP
.194802		68		pla		                PLA             ; end setdp macro
.194803		c2 30		rep #$30	                REP #$30        ; set A&X long
.194805		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.194808		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19480a		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.19480d		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19480f		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.194813		85 02		sta $0322	                STA BIOS_LBA
.194815		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.194819		85 04		sta $0324	                STA BIOS_LBA+2
.19481b		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.19481f		b0 07		bcs $194828	                BCS initial_entry               ; If OK: set the initial entry to check
.194821		e2 20		sep #$20	                SEP #$20        ; set A short
.194823		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.194825		82 6b 00	brl $194893	                BRL ret_failure
.194828						initial_entry
.194828		c2 20		rep #$20	                REP #$20        ; set A long
.19482a		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.19482d		85 10		sta $0330	                STA DOS_CLUS_ID
.19482f		a9 00 00	lda #$0000	                LDA #0
.194832		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194834		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.194837		bf 00 a3 18	lda $18a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.19483b		d0 06		bne $194843	                BNE next_entry                  ; No: move to the next entry
.19483d		bf 02 a3 18	lda $18a302,x	                LDA DOS_SECTOR+2,X
.194841		f0 36		beq $194879	                BEQ found_free                  ; Yes: go to allocate and return it
.194843		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.194845		d0 02		bne $194849	                BNE inc_ptr
.194847		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.194849		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.19484a		e8		inx		                INX
.19484b		e8		inx		                INX
.19484c		e8		inx		                INX
.19484d		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.194850		90 e5		bcc $194837	                BLT chk_entry                   ; No: check this entry
.194852		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.194854		d0 18		bne $19486e	                BNE get_block
.194856		e6 04		inc $0324	                INC BIOS_LBA+2
.194858		a5 04		lda $0324	                LDA BIOS_LBA+2
.19485a		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.19485e		90 0e		bcc $19486e	                BLT get_block
.194860		a5 02		lda $0322	                LDA BIOS_LBA
.194862		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA
.194866		90 06		bcc $19486e	                BLT get_block
.194868		e2 20		sep #$20	                SEP #$20        ; set A short
.19486a		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.19486c		80 25		bra $194893	                BRA ret_failure
.19486e		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.194872		90 1b		bcc $19488f	                BCC ret_fat_error               ; If error: throw a FAT error
.194874		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.194877		80 be		bra $194837	                BRA chk_entry                   ; Check this entry
.194879						found_free
.194879		c2 20		rep #$20	                REP #$20        ; set A long
.19487b		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.19487e		9f 00 a3 18	sta $18a300,x	                STA DOS_SECTOR,X
.194882		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.194885		9f 02 a3 18	sta $18a302,x	                STA DOS_SECTOR+2,X
.194889		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.19488d		b0 0d		bcs $19489c	                BCS ret_success                 ; If OK: return success
.19488f						ret_fat_error
.19488f		e2 20		sep #$20	                SEP #$20        ; set A short
.194891		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.194893						ret_failure
.194893		e2 20		sep #$20	                SEP #$20        ; set A short
.194895		85 0e		sta $032e	                STA DOS_STATUS
.194897		28		plp		                PLP
.194898		2b		pld		                PLD
.194899		ab		plb		                PLB
.19489a		18		clc		                CLC
.19489b		6b		rtl		                RTL
.19489c						ret_success
.19489c		e2 20		sep #$20	                SEP #$20        ; set A short
.19489e		64 0e		stz $032e	                STZ DOS_STATUS
.1948a0		28		plp		                PLP
.1948a1		2b		pld		                PLD
.1948a2		ab		plb		                PLB
.1948a3		38		sec		                SEC
.1948a4		6b		rtl		                RTL
.1948a5						DELCLUSTER
.1948a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1948a7		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.1948ab		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.1948ad		d0 04		bne $1948b3	                BNE fat32                       ; No: assume it's FAT32
.1948af		5c fd 48 19	jmp $1948fd	fat12           JML DELCLUSTER12
.1948b3		4c 4b 49	jmp $19494b	fat32           JMP DELCLUSTER32
.1948b6						WRITEFAT12
.1948b6		8b		phb		                PHB
.1948b7		0b		phd		                PHD
.1948b8		48		pha		                PHA             ; begin setdbr macro
.1948b9		08		php		                PHP
.1948ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1948bc		a9 00		lda #$00	                LDA #0
.1948be		48		pha		                PHA
.1948bf		ab		plb		                PLB
.1948c0		28		plp		                PLP
.1948c1		68		pla		                PLA             ; end setdbr macro
.1948c2		48		pha		                PHA             ; begin setdp macro
.1948c3		08		php		                PHP
.1948c4		c2 20		rep #$20	                REP #$20        ; set A long
.1948c6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1948c9		5b		tcd		                TCD
.1948ca		28		plp		                PLP
.1948cb		68		pla		                PLA             ; end setdp macro
.1948cc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1948ce		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.1948d1		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1948d3		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.1948d6		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1948d8		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.1948da		85 02		sta $0322	                STA BIOS_LBA
.1948dc		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.1948de		85 04		sta $0324	                STA BIOS_LBA+2
.1948e0		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.1948e4		90 14		bcc $1948fa	                BCC done
.1948e6		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.1948e9		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1948eb		a9 18 00	lda #$0018	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.1948ee		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1948f0		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.1948f2		d0 02		bne $1948f6	                BNE put_second
.1948f4		e6 04		inc $0324	                INC BIOS_LBA+2
.1948f6		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.1948fa		2b		pld		done            PLD
.1948fb		ab		plb		                PLB
.1948fc		6b		rtl		                RTL
.1948fd						DELCLUSTER12
.1948fd		8b		phb		                PHB
.1948fe		0b		phd		                PHD
.1948ff		08		php		                PHP
.194900		48		pha		                PHA             ; begin setdbr macro
.194901		08		php		                PHP
.194902		e2 20		sep #$20	                SEP #$20        ; set A short
.194904		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194906		48		pha		                PHA
.194907		ab		plb		                PLB
.194908		28		plp		                PLP
.194909		68		pla		                PLA             ; end setdbr macro
.19490a		48		pha		                PHA             ; begin setdp macro
.19490b		08		php		                PHP
.19490c		c2 20		rep #$20	                REP #$20        ; set A long
.19490e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194911		5b		tcd		                TCD
.194912		28		plp		                PLP
.194913		68		pla		                PLA             ; end setdp macro
.194914		c2 30		rep #$30	                REP #$30        ; set A&X long
.194916		22 97 44 19	jsl $194497	                JSL FATFORCLUSTER12
.19491a		8a		txa		                TXA                             ; Check to see if the index is odd or even
.19491b		89 01 00	bit #$0001	                BIT #1
.19491e		d0 08		bne $194928	                BNE is_odd
.194920		bd 00 a5	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.194923		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.194926		80 06		bra $19492e	                BRA save_update
.194928		bd 00 a5	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.19492b		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.19492e		9d 00 a5	sta $18a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.194931		22 b6 48 19	jsl $1948b6	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.194935		b0 0b		bcs $194942	                BCS ret_success
.194937						ret_failure
.194937		e2 20		sep #$20	                SEP #$20        ; set A short
.194939		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.19493b		85 0e		sta $032e	                STA DOS_STATUS
.19493d		28		plp		                PLP
.19493e		2b		pld		                PLD
.19493f		ab		plb		                PLB
.194940		18		clc		                CLC
.194941		6b		rtl		                RTL
.194942						ret_success
.194942		e2 20		sep #$20	                SEP #$20        ; set A short
.194944		64 0e		stz $032e	                STZ DOS_STATUS
.194946		28		plp		                PLP
.194947		2b		pld		                PLD
.194948		ab		plb		                PLB
.194949		38		sec		                SEC
.19494a		6b		rtl		                RTL
.19494b						DELCLUSTER32
.19494b		8b		phb		                PHB
.19494c		0b		phd		                PHD
.19494d		08		php		                PHP
.19494e		c2 30		rep #$30	                REP #$30        ; set A&X long
.194950		48		pha		                PHA             ; begin setdbr macro
.194951		08		php		                PHP
.194952		e2 20		sep #$20	                SEP #$20        ; set A short
.194954		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194956		48		pha		                PHA
.194957		ab		plb		                PLB
.194958		28		plp		                PLP
.194959		68		pla		                PLA             ; end setdbr macro
.19495a		48		pha		                PHA             ; begin setdp macro
.19495b		08		php		                PHP
.19495c		c2 20		rep #$20	                REP #$20        ; set A long
.19495e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194961		5b		tcd		                TCD
.194962		28		plp		                PLP
.194963		68		pla		                PLA             ; end setdp macro
.194964		22 ff 44 19	jsl $1944ff	                JSL FATFORCLUSTER32
.194968		a9 00 00	lda #$0000	                LDA #0
.19496b		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.19496e		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.194971		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.194975		b0 0b		bcs $194982	                BCS ret_success
.194977						ret_failure
.194977		e2 20		sep #$20	                SEP #$20        ; set A short
.194979		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.19497b		85 0e		sta $032e	                STA DOS_STATUS
.19497d		28		plp		                PLP
.19497e		2b		pld		                PLD
.19497f		ab		plb		                PLB
.194980		18		clc		                CLC
.194981		6b		rtl		                RTL
.194982						ret_success
.194982		e2 20		sep #$20	                SEP #$20        ; set A short
.194984		64 0e		stz $032e	                STZ DOS_STATUS
.194986		28		plp		                PLP
.194987		2b		pld		                PLD
.194988		ab		plb		                PLB
.194989		38		sec		                SEC
.19498a		6b		rtl		                RTL
.19498b						DOS_APPENDCLUS
.19498b		8b		phb		                PHB
.19498c		0b		phd		                PHD
.19498d		08		php		                PHP
.19498e		48		pha		                PHA             ; begin setdbr macro
.19498f		08		php		                PHP
.194990		e2 20		sep #$20	                SEP #$20        ; set A short
.194992		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194994		48		pha		                PHA
.194995		ab		plb		                PLB
.194996		28		plp		                PLP
.194997		68		pla		                PLA             ; end setdbr macro
.194998		48		pha		                PHA             ; begin setdp macro
.194999		08		php		                PHP
.19499a		c2 20		rep #$20	                REP #$20        ; set A long
.19499c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19499f		5b		tcd		                TCD
.1949a0		28		plp		                PLP
.1949a1		68		pla		                PLA             ; end setdp macro
.1949a2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1949a4		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.1949a6		48		pha		                PHA
.1949a7		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1949a9		48		pha		                PHA
.1949aa		22 83 46 19	jsl $194683	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.1949ae		b0 09		bcs $1949b9	                BCS save_cluster                ; If we got a cluster, write the data to it
.1949b0		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.1949b1		85 10		sta $0330	                STA DOS_CLUS_ID
.1949b3		68		pla		                PLA
.1949b4		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1949b6		82 7d 00	brl $194a36	                BRL pass_failure                ; Pass the failure back up the chain
.1949b9		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.1949bb		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.1949be		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1949c0		8d 38 a0	sta $18a038	                STA DOS_NEW_CLUSTER+2
.1949c3		22 d2 41 19	jsl $1941d2	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.1949c7		90 e7		bcc $1949b0	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.1949c9		68		pla		                PLA                             ; Restore the cluster of the file
.1949ca		85 10		sta $0330	                STA DOS_CLUS_ID
.1949cc		68		pla		                PLA
.1949cd		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1949cf		22 6a 45 19	jsl $19456a	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.1949d3		b0 fa		bcs $1949cf	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.1949d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1949d7		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.1949db		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.1949dd		d0 3d		bne $194a1c	                BNE fat32                       ; No: assume it's FAT32
.1949df						fat12
.1949df		c2 20		rep #$20	                REP #$20        ; set A long
.1949e1		22 24 44 19	jsl $194424	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.1949e5		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.1949e7		89 01 00	bit #$0001	                BIT #1
.1949ea		d0 11		bne $1949fd	                BNE is_odd
.1949ec		ad 36 a0	lda $18a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.1949ef		29 ff 0f	and #$0fff	                AND #$0FFF
.1949f2		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.1949f5		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.1949f8		29 00 f0	and #$f000	                AND #$F000
.1949fb		80 10		bra $194a0d	                BRA update_fat12
.1949fd		ad 36 a0	lda $18a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.194a00		0a		asl a		                ASL A
.194a01		0a		asl a		                ASL A
.194a02		0a		asl a		                ASL A
.194a03		0a		asl a		                ASL A
.194a04		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194a07		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.194a0a		29 0f 00	and #$000f	                AND #$000F
.194a0d		0d 36 a0	ora $18a036	update_fat12    ORA DOS_NEW_CLUSTER
.194a10		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194a13		22 b6 48 19	jsl $1948b6	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.194a17		b0 22		bcs $194a3b	                BCS ret_success
.194a19		82 1a 00	brl $194a36	                BRL pass_failure
.194a1c						fat32
.194a1c		c2 20		rep #$20	                REP #$20        ; set A long
.194a1e		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.194a21		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194a24		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.194a27		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.194a2a		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.194a2e		b0 0b		bcs $194a3b	                BCS ret_success
.194a30		e2 20		sep #$20	                SEP #$20        ; set A short
.194a32		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.194a34		85 0e		sta $032e	                STA DOS_STATUS
.194a36		28		plp		pass_failure    PLP
.194a37		2b		pld		                PLD
.194a38		ab		plb		                PLB
.194a39		18		clc		                CLC
.194a3a		6b		rtl		                RTL
.194a3b						ret_success
.194a3b		e2 20		sep #$20	                SEP #$20        ; set A short
.194a3d		64 0e		stz $032e	                STZ DOS_STATUS
.194a3f		28		plp		                PLP
.194a40		2b		pld		                PLD
.194a41		ab		plb		                PLB
.194a42		38		sec		                SEC
.194a43		6b		rtl		                RTL
.194a44						DOS_CREATE
.194a44		8b		phb		                PHB
.194a45		0b		phd		                PHD
.194a46		08		php		                PHP
.194a47		48		pha		                PHA             ; begin setdbr macro
.194a48		08		php		                PHP
.194a49		e2 20		sep #$20	                SEP #$20        ; set A short
.194a4b		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194a4d		48		pha		                PHA
.194a4e		ab		plb		                PLB
.194a4f		28		plp		                PLP
.194a50		68		pla		                PLA             ; end setdbr macro
.194a51		48		pha		                PHA             ; begin setdp macro
.194a52		08		php		                PHP
.194a53		c2 20		rep #$20	                REP #$20        ; set A long
.194a55		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194a58		5b		tcd		                TCD
.194a59		28		plp		                PLP
.194a5a		68		pla		                PLA             ; end setdp macro
.194a5b		c2 30		rep #$30	                REP #$30        ; set A&X long
.194a5d		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.194a60		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194a62		85 28		sta $0348	                STA DOS_TEMP
.194a64		c8		iny		                INY
.194a65		c8		iny		                INY
.194a66		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194a68		85 2a		sta $034a	                STA DOS_TEMP+2
.194a6a		e2 20		sep #$20	                SEP #$20        ; set A short
.194a6c		a0 00 00	ldy #$0000	                LDY #0
.194a6f		a2 00 00	ldx #$0000	                LDX #0
.194a72		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.194a74		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.194a76		f0 04		beq $194a7c	                BEQ find_file                   ; If it's NULL, we're done
.194a78		e8		inx		                INX
.194a79		c8		iny		                INY
.194a7a		80 f6		bra $194a72	                BRA path_loop
.194a7c		22 e3 42 19	jsl $1942e3	find_file       JSL DOS_PARSE_PATH
.194a80		22 7b 43 19	jsl $19437b	                JSL DOS_FINDFILE
.194a84		90 07		bcc $194a8d	                BCC set_device
.194a86		e2 20		sep #$20	                SEP #$20        ; set A short
.194a88		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.194a8a		82 d2 00	brl $194b5f	                BRL ret_failure
.194a8d						set_device
.194a8d		e2 20		sep #$20	                SEP #$20        ; set A short
.194a8f		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.194a92		a5 01		lda $0321	                LDA BIOS_DEV
.194a94		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194a96						validate_name
.194a96		22 83 46 19	jsl $194683	                JSL DOS_FREECLUS
.194a9a		b0 03		bcs $194a9f	                BCS save_data
.194a9c		82 c4 00	brl $194b63	                BRL pass_failure
.194a9f						save_data
.194a9f		c2 20		rep #$20	                REP #$20        ; set A long
.194aa1		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.194aa4		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.194aa6		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194aa8		c8		iny		                INY
.194aa9		c8		iny		                INY
.194aaa		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194aac		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194aae		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.194ab1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ab3		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194ab5		c8		iny		                INY
.194ab6		c8		iny		                INY
.194ab7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ab9		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194abb		22 d2 41 19	jsl $1941d2	                JSL DOS_PUTCLUSTER
.194abf		b0 00		bcs $194ac1	                BCS find_dir
.194ac1						find_dir
.194ac1		c2 20		rep #$20	                REP #$20        ; set A long
.194ac3		22 0d 3d 19	jsl $193d0d	                JSL DOS_DIRFINDFREE
.194ac7		b0 1a		bcs $194ae3	                BCS set_entry
.194ac9		c2 20		rep #$20	                REP #$20        ; set A long
.194acb		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.194ace		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.194ad0		85 10		sta $0330	                STA DOS_CLUS_ID
.194ad2		c8		iny		                INY
.194ad3		c8		iny		                INY
.194ad4		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ad6		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194ad8		22 4b 49 19	jsl $19494b	                JSL DELCLUSTER32                ; Delete the cluster
.194adc		e2 20		sep #$20	                SEP #$20        ; set A short
.194ade		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.194ae0		82 7c 00	brl $194b5f	                BRL ret_failure
.194ae3						set_entry
.194ae3		e2 20		sep #$20	                SEP #$20        ; set A short
.194ae5		a0 00 00	ldy #$0000	                LDY #0
.194ae8		a9 00		lda #$00	                LDA #0                          ; NULL
.194aea		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.194aec		c8		iny		                INY
.194aed		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.194af0		d0 f8		bne $194aea	                BNE copy_dir_loop
.194af2		a0 00 00	ldy #$0000	                LDY #0
.194af5		b9 3a a0	lda $18a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.194af8		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194afa		c8		iny		                INY
.194afb		c0 0b 00	cpy #$000b	                CPY #11
.194afe		d0 f5		bne $194af5	                BNE name_loop
.194b00		c2 20		rep #$20	                REP #$20        ; set A long
.194b02		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.194b05		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194b07		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.194b0a		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194b0c		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.194b0f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194b11		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.194b14		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194b16		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.194b19		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194b1b		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.194b1e		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194b20		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.194b23		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194b25		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.194b28		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194b2a		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.194b2d		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.194b30		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b32		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.194b35		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b37		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.194b3a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194b3c		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.194b3f		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194b41		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.194b44		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194b46		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.194b49		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194b4b		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.194b4e		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194b50		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.194b53		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194b55		c2 20		rep #$20	                REP #$20        ; set A long
.194b57		22 cb 3d 19	jsl $193dcb	                JSL DOS_DIRWRITE
.194b5b		b0 0b		bcs $194b68	                BCS ret_success
.194b5d		80 04		bra $194b63	                BRA pass_failure
.194b5f						ret_failure
.194b5f		e2 20		sep #$20	                SEP #$20        ; set A short
.194b61		85 0e		sta $032e	                STA DOS_STATUS
.194b63		28		plp		pass_failure    PLP
.194b64		2b		pld		                PLD
.194b65		ab		plb		                PLB
.194b66		18		clc		                CLC
.194b67		6b		rtl		                RTL
.194b68						ret_success
.194b68		e2 20		sep #$20	                SEP #$20        ; set A short
.194b6a		64 0e		stz $032e	                STZ DOS_STATUS
.194b6c		28		plp		                PLP
.194b6d		2b		pld		                PLD
.194b6e		ab		plb		                PLB
.194b6f		38		sec		                SEC
.194b70		6b		rtl		                RTL
.194b71						DOS_COPYPATH
.194b71		da		phx		                PHX
.194b72		5a		phy		                PHY
.194b73		8b		phb		                PHB
.194b74		0b		phd		                PHD
.194b75		08		php		                PHP
.194b76		48		pha		                PHA             ; begin setdbr macro
.194b77		08		php		                PHP
.194b78		e2 20		sep #$20	                SEP #$20        ; set A short
.194b7a		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194b7c		48		pha		                PHA
.194b7d		ab		plb		                PLB
.194b7e		28		plp		                PLP
.194b7f		68		pla		                PLA             ; end setdbr macro
.194b80		48		pha		                PHA             ; begin setdp macro
.194b81		08		php		                PHP
.194b82		c2 20		rep #$20	                REP #$20        ; set A long
.194b84		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194b87		5b		tcd		                TCD
.194b88		28		plp		                PLP
.194b89		68		pla		                PLA             ; end setdp macro
.194b8a		c2 30		rep #$30	                REP #$30        ; set A&X long
.194b8c		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.194b8f		a2 00 00	ldx #$0000	                LDX #0
.194b92		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.194b94		e8		inx		                INX
.194b95		e8		inx		                INX
.194b96		e0 00 01	cpx #$0100	                CPX #256
.194b99		d0 f7		bne $194b92	                BNE clr_loop
.194b9b		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.194b9d		d0 04		bne $194ba3	                BNE get_path            ; No: attempt to fetch the path
.194b9f		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.194ba1		f0 27		beq $194bca	                BEQ done                ; Yes: return an empty buffer
.194ba3		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.194ba6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ba8		85 28		sta $0348	                STA DOS_TEMP
.194baa		c8		iny		                INY
.194bab		c8		iny		                INY
.194bac		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194bae		85 2a		sta $034a	                STA DOS_TEMP+2
.194bb0		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.194bb2		d0 04		bne $194bb8	                BNE start_copy          ; No: start copying it
.194bb4		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194bb6		f0 12		beq $194bca	                BEQ done                ; Yes: return an empty buffer
.194bb8						start_copy
.194bb8		e2 20		sep #$20	                SEP #$20        ; set A short
.194bba		a2 00 00	ldx #$0000	                LDX #0
.194bbd		a0 00 00	ldy #$0000	                LDY #0
.194bc0		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.194bc2		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.194bc4		f0 04		beq $194bca	                BEQ done
.194bc6		e8		inx		                INX
.194bc7		c8		iny		                INY
.194bc8		d0 f6		bne $194bc0	                BNE loop
.194bca		28		plp		done            PLP
.194bcb		2b		pld		                PLD
.194bcc		ab		plb		                PLB
.194bcd		7a		ply		                PLY
.194bce		fa		plx		                PLX
.194bcf		6b		rtl		                RTL

;******  Return to file: src/SDOS.asm

.194bd0						IF_OPEN
.194bd0		da		phx		                PHX
.194bd1		5a		phy		                PHY
.194bd2		0b		phd		                PHD
.194bd3		8b		phb		                PHB
.194bd4		08		php		                PHP
.194bd5		48		pha		                PHA             ; begin setdbr macro
.194bd6		08		php		                PHP
.194bd7		e2 20		sep #$20	                SEP #$20        ; set A short
.194bd9		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194bdb		48		pha		                PHA
.194bdc		ab		plb		                PLB
.194bdd		28		plp		                PLP
.194bde		68		pla		                PLA             ; end setdbr macro
.194bdf		48		pha		                PHA             ; begin setdp macro
.194be0		08		php		                PHP
.194be1		c2 20		rep #$20	                REP #$20        ; set A long
.194be3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194be6		5b		tcd		                TCD
.194be7		28		plp		                PLP
.194be8		68		pla		                PLA             ; end setdp macro
.194be9		e2 20		sep #$20	                SEP #$20        ; set A short
.194beb		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.194bee		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194bf0		89 20		bit #$20	                BIT #FD_STAT_OPEN
.194bf2		f0 05		beq $194bf9	                BEQ ok_to_open
.194bf4		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.194bf6		82 87 06	brl $195280	                BRL IF_FAILURE
.194bf9		22 71 4b 19	jsl $194b71	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.194bfd		22 7b 43 19	jsl $19437b	                JSL DOS_FINDFILE                ; Attempt to find the file
.194c01		b0 03		bcs $194c06	                BCS is_found                    ; If OK: we found the file
.194c03		82 7e 06	brl $195284	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.194c06						is_found
.194c06		e2 20		sep #$20	                SEP #$20        ; set A short
.194c08		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.194c0b		a5 01		lda $0321	                LDA BIOS_DEV
.194c0d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c0f		c2 20		rep #$20	                REP #$20        ; set A long
.194c11		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.194c14		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c16		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194c18		c8		iny		                INY
.194c19		c8		iny		                INY
.194c1a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c1c		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194c1e		22 95 41 19	jsl $194195	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.194c22		b0 03		bcs $194c27	                BCS read_cluster
.194c24		82 5d 06	brl $195284	                BRL IF_PASSFAILURE
.194c27		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.194c2a		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194c2c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c2e		c8		iny		                INY
.194c2f		c8		iny		                INY
.194c30		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194c32		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c34		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.194c37		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194c39		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c3b		c8		iny		                INY
.194c3c		c8		iny		                INY
.194c3d		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194c3f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c41		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.194c44		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194c46		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.194c49		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c4b		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.194c4e		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194c50		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.194c53		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c55		e2 20		sep #$20	                SEP #$20        ; set A short
.194c57		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.194c5a		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.194c5c		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194c5e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c60		82 28 06	brl $19528b	                BRL IF_SUCCESS
.194c63						IF_CREATE
.194c63		da		phx		                PHX
.194c64		5a		phy		                PHY
.194c65		0b		phd		                PHD
.194c66		8b		phb		                PHB
.194c67		08		php		                PHP
.194c68		48		pha		                PHA             ; begin setdbr macro
.194c69		08		php		                PHP
.194c6a		e2 20		sep #$20	                SEP #$20        ; set A short
.194c6c		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194c6e		48		pha		                PHA
.194c6f		ab		plb		                PLB
.194c70		28		plp		                PLP
.194c71		68		pla		                PLA             ; end setdbr macro
.194c72		48		pha		                PHA             ; begin setdp macro
.194c73		08		php		                PHP
.194c74		c2 20		rep #$20	                REP #$20        ; set A long
.194c76		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194c79		5b		tcd		                TCD
.194c7a		28		plp		                PLP
.194c7b		68		pla		                PLA             ; end setdp macro
.194c7c		22 44 4a 19	jsl $194a44	                JSL DOS_CREATE                  ; Attempt to create the file
.194c80		90 18		bcc $194c9a	                BCC pass_failure                ; If it fails: pass the failure up the chain
.194c82		c2 30		rep #$30	                REP #$30        ; set A&X long
.194c84		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.194c87		a9 00 00	lda #$0000	                LDA #0
.194c8a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c8c		c8		iny		                INY
.194c8d		c8		iny		                INY
.194c8e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c90		e2 20		sep #$20	                SEP #$20        ; set A short
.194c92		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.194c95		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.194c97		82 f1 05	brl $19528b	                BRL IF_SUCCESS
.194c9a		82 e3 05	brl $195280	pass_failure    BRL IF_FAILURE
.194c9d						IF_CLOSE
.194c9d		da		phx		                PHX
.194c9e		5a		phy		                PHY
.194c9f		0b		phd		                PHD
.194ca0		8b		phb		                PHB
.194ca1		08		php		                PHP
.194ca2		48		pha		                PHA             ; begin setdbr macro
.194ca3		08		php		                PHP
.194ca4		e2 20		sep #$20	                SEP #$20        ; set A short
.194ca6		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194ca8		48		pha		                PHA
.194ca9		ab		plb		                PLB
.194caa		28		plp		                PLP
.194cab		68		pla		                PLA             ; end setdbr macro
.194cac		48		pha		                PHA             ; begin setdp macro
.194cad		08		php		                PHP
.194cae		c2 20		rep #$20	                REP #$20        ; set A long
.194cb0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194cb3		5b		tcd		                TCD
.194cb4		28		plp		                PLP
.194cb5		68		pla		                PLA             ; end setdp macro
.194cb6		e2 20		sep #$20	                SEP #$20        ; set A short
.194cb8		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.194cbb		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194cbd		89 02		bit #$02	                BIT #FD_STAT_WRITE
.194cbf		f0 09		beq $194cca	                BEQ set_flag                    ; No, just mark it closed
.194cc1		22 36 4d 19	jsl $194d36	                JSL IF_WRITE                    ; Attempt to write the cluster
.194cc5		b0 03		bcs $194cca	                BCS set_flag
.194cc7		82 ba 05	brl $195284	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.194cca		22 85 53 19	jsl $195385	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.194cce		82 ba 05	brl $19528b	                BRL IF_SUCCESS
.194cd1						IF_READ
.194cd1		da		phx		                PHX
.194cd2		5a		phy		                PHY
.194cd3		0b		phd		                PHD
.194cd4		8b		phb		                PHB
.194cd5		08		php		                PHP
.194cd6		48		pha		                PHA             ; begin setdbr macro
.194cd7		08		php		                PHP
.194cd8		e2 20		sep #$20	                SEP #$20        ; set A short
.194cda		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194cdc		48		pha		                PHA
.194cdd		ab		plb		                PLB
.194cde		28		plp		                PLP
.194cdf		68		pla		                PLA             ; end setdbr macro
.194ce0		48		pha		                PHA             ; begin setdp macro
.194ce1		08		php		                PHP
.194ce2		c2 20		rep #$20	                REP #$20        ; set A long
.194ce4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194ce7		5b		tcd		                TCD
.194ce8		28		plp		                PLP
.194ce9		68		pla		                PLA             ; end setdp macro
.194cea		c2 10		rep #$10	                REP #$10        ; set X long
.194cec		e2 20		sep #$20	                SEP #$20        ; set A short
.194cee						get_dev
.194cee		e2 20		sep #$20	                SEP #$20        ; set A short
.194cf0		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.194cf3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194cf5		85 01		sta $0321	                STA BIOS_DEV
.194cf7		22 fd 3e 19	jsl $193efd	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.194cfb		c2 20		rep #$20	                REP #$20        ; set A long
.194cfd		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.194d00		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d02		85 10		sta $0330	                STA DOS_CLUS_ID
.194d04		c8		iny		                INY
.194d05		c8		iny		                INY
.194d06		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d08		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194d0a		22 6a 45 19	jsl $19456a	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.194d0e		90 13		bcc $194d23	                BCC pass_failure                ; If not OK: pass the failure up the chain
.194d10		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.194d13		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d15		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194d17		c8		iny		                INY
.194d18		c8		iny		                INY
.194d19		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d1b		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194d1d		22 95 41 19	jsl $194195	                JSL DOS_GETCLUSTER              ; Get the cluster
.194d21		b0 03		bcs $194d26	                BCS ret_success                 ; If ok: return success
.194d23						pass_failure
.194d23		82 5e 05	brl $195284	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194d26		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.194d29		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194d2b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194d2d		c8		iny		                INY
.194d2e		c8		iny		                INY
.194d2f		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194d31		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194d33		82 55 05	brl $19528b	                BRL IF_SUCCESS
.194d36						IF_WRITE
.194d36		da		phx		                PHX
.194d37		5a		phy		                PHY
.194d38		0b		phd		                PHD
.194d39		8b		phb		                PHB
.194d3a		08		php		                PHP
.194d3b		48		pha		                PHA             ; begin setdbr macro
.194d3c		08		php		                PHP
.194d3d		e2 20		sep #$20	                SEP #$20        ; set A short
.194d3f		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194d41		48		pha		                PHA
.194d42		ab		plb		                PLB
.194d43		28		plp		                PLP
.194d44		68		pla		                PLA             ; end setdbr macro
.194d45		48		pha		                PHA             ; begin setdp macro
.194d46		08		php		                PHP
.194d47		c2 20		rep #$20	                REP #$20        ; set A long
.194d49		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194d4c		5b		tcd		                TCD
.194d4d		28		plp		                PLP
.194d4e		68		pla		                PLA             ; end setdp macro
.194d4f		c2 10		rep #$10	                REP #$10        ; set X long
.194d51		e2 20		sep #$20	                SEP #$20        ; set A short
.194d53		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.194d56		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d58		85 01		sta $0321	                STA BIOS_DEV
.194d5a		22 fd 3e 19	jsl $193efd	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.194d5e		c2 20		rep #$20	                REP #$20        ; set A long
.194d60		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.194d63		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d65		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194d67		c8		iny		                INY
.194d68		c8		iny		                INY
.194d69		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d6b		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194d6d		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.194d70		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d72		85 10		sta $0330	                STA DOS_CLUS_ID
.194d74		c8		iny		                INY
.194d75		c8		iny		                INY
.194d76		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d78		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194d7a		d0 1a		bne $194d96	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.194d7c		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194d7e		d0 16		bne $194d96	                BNE rewrite_cluster
.194d80		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.194d83		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d85		85 10		sta $0330	                STA DOS_CLUS_ID
.194d87		c8		iny		                INY
.194d88		c8		iny		                INY
.194d89		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d8b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194d8d		22 8b 49 19	jsl $19498b	                JSL DOS_APPENDCLUS              ; Append the cluster
.194d91		b0 0c		bcs $194d9f	                BCS ret_success                 ; If OK: return success
.194d93		82 ee 04	brl $195284	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194d96		22 d2 41 19	jsl $1941d2	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.194d9a		b0 03		bcs $194d9f	                BCS ret_success                 ; If ok: return success
.194d9c		82 e5 04	brl $195284	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194d9f		82 e9 04	brl $19528b	ret_success     BRL IF_SUCCESS
.194da2						IF_DIROPEN
.194da2		da		phx		                PHX
.194da3		5a		phy		                PHY
.194da4		0b		phd		                PHD
.194da5		8b		phb		                PHB
.194da6		08		php		                PHP
.194da7		48		pha		                PHA             ; begin setdbr macro
.194da8		08		php		                PHP
.194da9		e2 20		sep #$20	                SEP #$20        ; set A short
.194dab		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194dad		48		pha		                PHA
.194dae		ab		plb		                PLB
.194daf		28		plp		                PLP
.194db0		68		pla		                PLA             ; end setdbr macro
.194db1		48		pha		                PHA             ; begin setdp macro
.194db2		08		php		                PHP
.194db3		c2 20		rep #$20	                REP #$20        ; set A long
.194db5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194db8		5b		tcd		                TCD
.194db9		28		plp		                PLP
.194dba		68		pla		                PLA             ; end setdp macro
.194dbb		c2 30		rep #$30	                REP #$30        ; set A&X long
.194dbd		22 71 4b 19	jsl $194b71	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.194dc1		22 e3 42 19	jsl $1942e3	                JSL DOS_PARSE_PATH          ; Parse the path
.194dc5		22 fd 3e 19	jsl $193efd	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.194dc9		b0 03		bcs $194dce	                BCS get_root_dir            ; If successful: get the root directory
.194dcb		82 b6 04	brl $195284	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.194dce						get_root_dir
.194dce		c2 30		rep #$30	                REP #$30        ; set A&X long
.194dd0		22 b2 3b 19	jsl $193bb2	                JSL DOS_DIROPEN
.194dd4		b0 03		bcs $194dd9	                BCS success
.194dd6		82 ab 04	brl $195284	                BRL IF_PASSFAILURE
.194dd9		82 af 04	brl $19528b	success         BRL IF_SUCCESS
.194ddc						IF_DIRNEXT
.194ddc		5c 4c 3c 19	jmp $193c4c	                JML DOS_DIRNEXT
.194de0						IF_DELETE
.194de0		da		phx		                PHX
.194de1		5a		phy		                PHY
.194de2		0b		phd		                PHD
.194de3		8b		phb		                PHB
.194de4		08		php		                PHP
.194de5		48		pha		                PHA             ; begin setdbr macro
.194de6		08		php		                PHP
.194de7		e2 20		sep #$20	                SEP #$20        ; set A short
.194de9		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194deb		48		pha		                PHA
.194dec		ab		plb		                PLB
.194ded		28		plp		                PLP
.194dee		68		pla		                PLA             ; end setdbr macro
.194def		48		pha		                PHA             ; begin setdp macro
.194df0		08		php		                PHP
.194df1		c2 20		rep #$20	                REP #$20        ; set A long
.194df3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194df6		5b		tcd		                TCD
.194df7		28		plp		                PLP
.194df8		68		pla		                PLA             ; end setdp macro
.194df9		c2 30		rep #$30	                REP #$30        ; set A&X long
.194dfb		22 7b 43 19	jsl $19437b	                JSL DOS_FINDFILE
.194dff		b0 03		bcs $194e04	                BCS get_first_clus
.194e01		82 80 04	brl $195284	                BRL IF_PASSFAILURE
.194e04						get_first_clus
.194e04		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.194e07		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194e09		85 10		sta $0330	                STA DOS_CLUS_ID
.194e0b		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.194e0e		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194e10		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194e12		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194e14		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.194e17		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194e19		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.194e1c		22 6a 45 19	jsl $19456a	del_loop        JSL NEXTCLUSTER
.194e20		90 2f		bcc $194e51	                BCC del_one
.194e22		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194e24		8d 2e a0	sta $18a02e	                STA DOS_NEXT_CLUS
.194e27		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194e29		8d 30 a0	sta $18a030	                STA DOS_NEXT_CLUS+2
.194e2c		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.194e2f		85 10		sta $0330	                STA DOS_CLUS_ID
.194e31		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.194e34		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194e36		22 4b 49 19	jsl $19494b	                JSL DELCLUSTER32
.194e3a		b0 03		bcs $194e3f	                BCS go_next
.194e3c		82 45 04	brl $195284	                BRL IF_PASSFAILURE
.194e3f						go_next
.194e3f		ad 2e a0	lda $18a02e	                LDA DOS_NEXT_CLUS
.194e42		85 10		sta $0330	                STA DOS_CLUS_ID
.194e44		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.194e47		ad 30 a0	lda $18a030	                LDA DOS_NEXT_CLUS+2
.194e4a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194e4c		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.194e4f		80 cb		bra $194e1c	                BRA del_loop
.194e51						del_one
.194e51		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.194e54		85 10		sta $0330	                STA DOS_CLUS_ID
.194e56		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.194e59		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194e5b		22 a5 48 19	jsl $1948a5	                JSL DELCLUSTER
.194e5f		b0 03		bcs $194e64	                BCS free_dir_entry
.194e61		82 20 04	brl $195284	                BRL IF_PASSFAILURE
.194e64						free_dir_entry
.194e64		e2 20		sep #$20	                SEP #$20        ; set A short
.194e66		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.194e69		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.194e6b		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194e6d		22 cb 3d 19	jsl $193dcb	                JSL DOS_DIRWRITE                ; Write the directory entry back
.194e71		b0 03		bcs $194e76	                BCS ret_success
.194e73		82 0e 04	brl $195284	                BRL IF_PASSFAILURE
.194e76		82 12 04	brl $19528b	ret_success     BRL IF_SUCCESS
.194e79						IF_DIRREAD
.194e79		da		phx		                PHX
.194e7a		5a		phy		                PHY
.194e7b		0b		phd		                PHD
.194e7c		8b		phb		                PHB
.194e7d		08		php		                PHP
.194e7e		48		pha		                PHA             ; begin setdbr macro
.194e7f		08		php		                PHP
.194e80		e2 20		sep #$20	                SEP #$20        ; set A short
.194e82		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194e84		48		pha		                PHA
.194e85		ab		plb		                PLB
.194e86		28		plp		                PLP
.194e87		68		pla		                PLA             ; end setdbr macro
.194e88		48		pha		                PHA             ; begin setdp macro
.194e89		08		php		                PHP
.194e8a		c2 20		rep #$20	                REP #$20        ; set A long
.194e8c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194e8f		5b		tcd		                TCD
.194e90		28		plp		                PLP
.194e91		68		pla		                PLA             ; end setdp macro
.194e92		c2 30		rep #$30	                REP #$30        ; set A&X long
.194e94		22 7b 43 19	jsl $19437b	                JSL DOS_FINDFILE
.194e98		b0 03		bcs $194e9d	                BCS success
.194e9a		82 e3 03	brl $195280	                BRL IF_FAILURE
.194e9d		82 eb 03	brl $19528b	success         BRL IF_SUCCESS
.194ea0						IF_DIRWRITE
.194ea0		5c cb 3d 19	jmp $193dcb	                JML DOS_DIRWRITE
.194ea4						IF_LOAD
.194ea4		da		phx		                PHX
.194ea5		5a		phy		                PHY
.194ea6		0b		phd		                PHD
.194ea7		8b		phb		                PHB
.194ea8		08		php		                PHP
.194ea9		48		pha		                PHA             ; begin setdbr macro
.194eaa		08		php		                PHP
.194eab		e2 20		sep #$20	                SEP #$20        ; set A short
.194ead		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194eaf		48		pha		                PHA
.194eb0		ab		plb		                PLB
.194eb1		28		plp		                PLP
.194eb2		68		pla		                PLA             ; end setdbr macro
.194eb3		48		pha		                PHA             ; begin setdp macro
.194eb4		08		php		                PHP
.194eb5		c2 20		rep #$20	                REP #$20        ; set A long
.194eb7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194eba		5b		tcd		                TCD
.194ebb		28		plp		                PLP
.194ebc		68		pla		                PLA             ; end setdp macro
.194ebd		c2 30		rep #$30	                REP #$30        ; set A&X long
.194ebf		22 d0 4b 19	jsl $194bd0	                JSL IF_OPEN
.194ec3		b0 03		bcs $194ec8	                BCS setup                   ; If success: start setting things up
.194ec5		82 bc 03	brl $195284	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.194ec8						setup
.194ec8		c2 20		rep #$20	                REP #$20        ; set A long
.194eca		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.194ecd		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ecf		85 2c		sta $034c	                STA DOS_FILE_SIZE
.194ed1		c8		iny		                INY
.194ed2		c8		iny		                INY
.194ed3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ed5		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.194ed7		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.194eda		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194edc		85 30		sta $0350	                STA DOS_SRC_PTR
.194ede		c8		iny		                INY
.194edf		c8		iny		                INY
.194ee0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ee2		85 32		sta $0352	                STA DOS_SRC_PTR+2
.194ee4		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.194ee6		c9 40 00	cmp #$0040	                CMP #$0040
.194ee9		b0 04		bcs $194eef	                BGE load_by_type            ; No: try to load it by type
.194eeb		5c 35 51 19	jmp $195135	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.194eef		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.194ef2		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.194ef5						type_loop
.194ef5		e2 20		sep #$20	                SEP #$20        ; set A short
.194ef7		bf 3b 4f 19	lda $194f3b,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.194efb		f0 37		beq $194f34	                BEQ no_match                ; If NULL... we didn't get a match
.194efd		d9 3a a0	cmp $18a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.194f00		d0 28		bne $194f2a	                BNE next_entry              ; If they don't match, try the next entry
.194f02		bf 3c 4f 19	lda $194f3c,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.194f06		d9 3b a0	cmp $18a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.194f09		d0 1f		bne $194f2a	                BNE next_entry              ; If they don't match, try the next entry
.194f0b		bf 3d 4f 19	lda $194f3d,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.194f0f		d9 3c a0	cmp $18a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.194f12		d0 16		bne $194f2a	                BNE next_entry              ; If they don't match, try the next entry
.194f14		c2 20		rep #$20	                REP #$20        ; set A long
.194f16		bf 3e 4f 19	lda $194f3e,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.194f1a		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.194f1c		e2 20		sep #$20	                SEP #$20        ; set A short
.194f1e		bf 40 4f 19	lda $194f40,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.194f22		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.194f24		a2 00 00	ldx #$0000	                LDX #0
.194f27		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.194f2a						next_entry
.194f2a		c2 30		rep #$30	                REP #$30        ; set A&X long
.194f2c		8a		txa		                TXA
.194f2d		18		clc		                CLC
.194f2e		69 06 00	adc #$0006	                ADC #6
.194f31		aa		tax		                TAX
.194f32		80 c1		bra $194ef5	                BRA type_loop               ; And check it against the file
.194f34						no_match
.194f34		e2 20		sep #$20	                SEP #$20        ; set A short
.194f36		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.194f38		82 45 03	brl $195280	                BRL IF_FAILURE
>194f3b		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>194f3e		48 4f				                .word <>IF_LOADPGX
>194f40		19				                .byte `IF_LOADPGX
>194f41		50 47 5a			                .text "PGZ"                 ; "PGZ" --> IF_LOADPGZ
>194f44		d0 4f				                .word <>IF_LOADPGZ
>194f46		19				                .byte `IF_LOADPGZ
>194f47		00				                .byte 0
.194f48						IF_LOADPGX
.194f48		c2 10		rep #$10	                REP #$10        ; set X long
.194f4a		e2 20		sep #$20	                SEP #$20        ; set A short
.194f4c		a0 00 00	ldy #$0000	                LDY #0
.194f4f		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.194f51		c9 50		cmp #$50	                CMP #'P'
.194f53		d0 15		bne $194f6a	                BNE fail_sig                        ; If not found, fail
.194f55		c8		iny		                INY
.194f56		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.194f58		c9 47		cmp #$47	                CMP #'G'
.194f5a		d0 0e		bne $194f6a	                BNE fail_sig
.194f5c		c8		iny		                INY
.194f5d		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.194f5f		c9 58		cmp #$58	                CMP #'X'
.194f61		d0 07		bne $194f6a	                BNE fail_sig
.194f63		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.194f64		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.194f66		c9 01		cmp #$01	                CMP #$01
.194f68		f0 17		beq $194f81	                BEQ get_dest                        ; All passes: go to get the destination address
.194f6a		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.194f6c		22 80 52 19	jsl $195280	                JSL IF_FAILURE
.194f70						adjust_size
.194f70		c2 20		rep #$20	                REP #$20        ; set A long
.194f72		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.194f73		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.194f75		e9 08 00	sbc #$0008	                SBC #8
.194f78		85 2c		sta $034c	                STA DOS_FILE_SIZE
.194f7a		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.194f7c		e9 00 00	sbc #$0000	                SBC #0
.194f7f		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.194f81						get_dest
.194f81		c2 20		rep #$20	                REP #$20        ; set A long
.194f83		c8		iny		                INY
.194f84		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.194f86		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.194f88		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.194f8a		c8		iny		                INY
.194f8b		c8		iny		                INY
.194f8c		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.194f8e		85 36		sta $0356	                STA DOS_DST_PTR+2
.194f90		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.194f92		c8		iny		                INY                                 ; Point to the first data byte
.194f93		c8		iny		                INY
.194f94						copy_loop
.194f94		e2 20		sep #$20	                SEP #$20        ; set A short
.194f96		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.194f98		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.194f9a		c2 20		rep #$20	                REP #$20        ; set A long
.194f9c		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.194f9e		d0 02		bne $194fa2	                BNE dec_file_size
.194fa0		e6 36		inc $0356	                INC DOS_DST_PTR+2
.194fa2		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.194fa3		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.194fa5		e9 01 00	sbc #$0001	                SBC #1
.194fa8		85 2c		sta $034c	                STA DOS_FILE_SIZE
.194faa		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.194fac		e9 00 00	sbc #$0000	                SBC #0
.194faf		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.194fb1		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.194fb3		d0 04		bne $194fb9	                BNE next_byte
.194fb5		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.194fb7		f0 14		beq $194fcd	                BEQ done                            ; Yes: we're done
.194fb9		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.194fba		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.194fbd		d0 d5		bne $194f94	                BNE copy_loop                       ; No: keep copying
.194fbf		22 6e 46 19	jsl $19466e	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.194fc3		b0 03		bcs $194fc8	                BCS next_cluster
.194fc5		82 bc 02	brl $195284	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.194fc8		a0 00 00	ldy #$0000	next_cluster    LDY #0
.194fcb		80 c7		bra $194f94	                BRA copy_loop                       ; Go back to copying
.194fcd		82 bb 02	brl $19528b	done            BRL IF_SUCCESS
.194fd0						IF_LOADPGZ
.194fd0		48		pha		                PHA             ; begin setdbr macro
.194fd1		08		php		                PHP
.194fd2		e2 20		sep #$20	                SEP #$20        ; set A short
.194fd4		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194fd6		48		pha		                PHA
.194fd7		ab		plb		                PLB
.194fd8		28		plp		                PLP
.194fd9		68		pla		                PLA             ; end setdbr macro
.194fda		48		pha		                PHA             ; begin setdp macro
.194fdb		08		php		                PHP
.194fdc		c2 20		rep #$20	                REP #$20        ; set A long
.194fde		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194fe1		5b		tcd		                TCD
.194fe2		28		plp		                PLP
.194fe3		68		pla		                PLA             ; end setdp macro
.194fe4		c2 30		rep #$30	                REP #$30        ; set A&X long
.194fe6		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE                  ; Get the file size
.194fe9		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194feb		85 2c		sta $034c	                STA DOS_FILE_SIZE                   ; And save it to DOS_FILE_SIZE
.194fed		c8		iny		                INY
.194fee		c8		iny		                INY
.194fef		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ff1		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.194ff3		e2 20		sep #$20	                SEP #$20        ; set A short
.194ff5		a0 00 00	ldy #$0000	                LDY #0                              ; Starting at the beginning of the file
.194ff8		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "Z" signature
.194ffa		c9 5a		cmp #$5a	                CMP #'Z'
.194ffc		f0 06		beq $195004	                BEQ start_block                     ; If found, get the starting address
.194ffe		a9 19		lda #$19	fail_sig        LDA #DOS_ERR_PGZSIG                 ; Fail with a PGZSIG error code
.195000		22 80 52 19	jsl $195280	                JSL IF_FAILURE
.195004		c8		iny		start_block     INY
.195005						get_addr
.195005		e2 20		sep #$20	                SEP #$20        ; set A short
.195007		22 8a 50 19	jsl $19508a	                JSL IF_FILE_EOF                     ; Check if EOF
.19500b		90 03		bcc $195010	                BCC get_addr_lo
.19500d		82 7b 02	brl $19528b	done            BRL IF_SUCCESS                      ; If so: we're done
.195010		22 c8 50 19	jsl $1950c8	get_addr_lo     JSL IF_READ_NEXT                    ; Get the next byte
.195014		90 47		bcc $19505d	                BCC ret_failure                     ; Got an error: pass it on
.195016		85 34		sta $0354	                STA DOS_DST_PTR                     ; Save it as the low byte of the destination address
.195018		22 c8 50 19	jsl $1950c8	                JSL IF_READ_NEXT                    ; Get the next byte
.19501c		90 3f		bcc $19505d	                BCC ret_failure                     ; Got an error: pass it on
.19501e		85 35		sta $0355	                STA DOS_DST_PTR+1                   ; Save it as the middle byte of the destination address
.195020		22 c8 50 19	jsl $1950c8	                JSL IF_READ_NEXT                    ; Get the next byte
.195024		90 37		bcc $19505d	                BCC ret_failure                     ; Got an error: pass it on
.195026		85 36		sta $0356	                STA DOS_DST_PTR+2                   ; Save it as the high byte of the destination address
.195028		22 c8 50 19	jsl $1950c8	                JSL IF_READ_NEXT                    ; Get the next byte
.19502c		90 2f		bcc $19505d	                BCC ret_failure                     ; Got an error: pass it on
.19502e		85 50		sta $0370	                STA DOS_BLOCK_SIZE                  ; Save it as the low byte of the block size
.195030		22 c8 50 19	jsl $1950c8	                JSL IF_READ_NEXT                    ; Get the next byte
.195034		90 27		bcc $19505d	                BCC ret_failure                     ; Got an error: pass it on
.195036		85 51		sta $0371	                STA DOS_BLOCK_SIZE+1                ; Save it as the middle byte of the block size
.195038		22 c8 50 19	jsl $1950c8	                JSL IF_READ_NEXT                    ; Get the next byte
.19503c		90 1f		bcc $19505d	                BCC ret_failure                     ; Got an error: pass it on
.19503e		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2                ; Save it as the high byte of the block size
.195040		64 53		stz $0373	                STZ DOS_BLOCK_SIZE+3                ; And MSB is 0
.195042		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; If DOS_BLOCK_SIZE <> 0, we have data to load
.195044		d0 1a		bne $195060	                BNE read_data
.195046		a5 51		lda $0371	                LDA DOS_BLOCK_SIZE+1
.195048		d0 16		bne $195060	                BNE read_data
.19504a		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.19504c		d0 12		bne $195060	                BNE read_data
.19504e		a5 34		lda $0354	                LDA DOS_DST_PTR                     ; If DOS_BLOCK_SIZE = 0, we have the run address
.195050		85 3c		sta $035c	                STA DOS_RUN_PTR
.195052		a5 35		lda $0355	                LDA DOS_DST_PTR+1
.195054		85 3d		sta $035d	                STA DOS_RUN_PTR+1
.195056		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.195058		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.19505a		82 2e 02	brl $19528b	                BRL IF_SUCCESS                      ; And finish
.19505d		82 20 02	brl $195280	ret_failure     BRL IF_FAILURE                      ; If there was an error, pass it up to the caller
.195060						read_data
.195060		e2 20		sep #$20	                SEP #$20        ; set A short
.195062		22 c8 50 19	jsl $1950c8	                JSL IF_READ_NEXT                    ; Get the next byte
.195066		90 f5		bcc $19505d	                BCC ret_failure
.195068		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Save it to the destination address
.19506a		c2 20		rep #$20	                REP #$20        ; set A long
.19506c		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Increment the destination pointer
.19506e		d0 02		bne $195072	                BNE dec_block_size
.195070		e6 36		inc $0356	                INC DOS_DST_PTR+2
.195072		38		sec		dec_block_size  SEC
.195073		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE
.195075		e9 01 00	sbc #$0001	                SBC #1
.195078		85 50		sta $0370	                STA DOS_BLOCK_SIZE
.19507a		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.19507c		e9 00 00	sbc #$0000	                SBC #0
.19507f		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2
.195081		d0 dd		bne $195060	                BNE read_data
.195083		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; Is block size = 0?
.195085		d0 d9		bne $195060	                BNE read_data                       ; No: keep reading data
.195087		82 7b ff	brl $195005	                BRL get_addr                        ; Yes: check for another block
.19508a						IF_FILE_EOF
.19508a		48		pha		                PHA
.19508b		5a		phy		                PHY
.19508c		8b		phb		                PHB
.19508d		0b		phd		                PHD
.19508e		08		php		                PHP
.19508f		48		pha		                PHA             ; begin setdbr macro
.195090		08		php		                PHP
.195091		e2 20		sep #$20	                SEP #$20        ; set A short
.195093		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195095		48		pha		                PHA
.195096		ab		plb		                PLB
.195097		28		plp		                PLP
.195098		68		pla		                PLA             ; end setdbr macro
.195099		48		pha		                PHA             ; begin setdp macro
.19509a		08		php		                PHP
.19509b		c2 20		rep #$20	                REP #$20        ; set A long
.19509d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1950a0		5b		tcd		                TCD
.1950a1		28		plp		                PLP
.1950a2		68		pla		                PLA             ; end setdp macro
.1950a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1950a5		c2 10		rep #$10	                REP #$10        ; set X long
.1950a7		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.1950aa		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y                  ; Restore the index
.1950ac		89 80		bit #$80	                BIT #FD_STAT_EOF                    ; Check if the file is EOF
.1950ae		f0 07		beq $1950b7	                BEQ chk_file_size                   ; If not: check the file size
.1950b0		28		plp		ret_true        PLP                                 ; Return true
.1950b1		2b		pld		                PLD
.1950b2		ab		plb		                PLB
.1950b3		7a		ply		                PLY
.1950b4		68		pla		                PLA
.1950b5		38		sec		                SEC
.1950b6		6b		rtl		                RTL
.1950b7						chk_file_size
.1950b7		c2 20		rep #$20	                REP #$20        ; set A long
.1950b9		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; if DOS_FILE_SIZE = 0
.1950bb		d0 04		bne $1950c1	                BNE ret_false
.1950bd		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1950bf		f0 ef		beq $1950b0	                BEQ ret_true
.1950c1		28		plp		ret_false       PLP                                 ; Return false
.1950c2		2b		pld		                PLD
.1950c3		ab		plb		                PLB
.1950c4		7a		ply		                PLY
.1950c5		68		pla		                PLA
.1950c6		18		clc		                CLC
.1950c7		6b		rtl		                RTL
.1950c8						IF_READ_NEXT
.1950c8		8b		phb		                PHB
.1950c9		0b		phd		                PHD
.1950ca		08		php		                PHP
.1950cb		48		pha		                PHA             ; begin setdbr macro
.1950cc		08		php		                PHP
.1950cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1950cf		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1950d1		48		pha		                PHA
.1950d2		ab		plb		                PLB
.1950d3		28		plp		                PLP
.1950d4		68		pla		                PLA             ; end setdbr macro
.1950d5		48		pha		                PHA             ; begin setdp macro
.1950d6		08		php		                PHP
.1950d7		c2 20		rep #$20	                REP #$20        ; set A long
.1950d9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1950dc		5b		tcd		                TCD
.1950dd		28		plp		                PLP
.1950de		68		pla		                PLA             ; end setdp macro
.1950df		e2 20		sep #$20	                SEP #$20        ; set A short
.1950e1		c2 10		rep #$10	                REP #$10        ; set X long
.1950e3		22 8a 50 19	jsl $19508a	                JSL IF_FILE_EOF                     ; Check if the file is EOF
.1950e7		90 06		bcc $1950ef	                BCC get_byte                        ; If not: get the next byte
.1950e9		a9 18		lda #$18	                LDA #DOS_ERR_EOF                    ; If so: return an EOF error
.1950eb		85 0e		sta $032e	                STA DOS_STATUS
.1950ed		80 3f		bra $19512e	                BRA ret_failure
.1950ef		b7 30		lda [$0350],y	get_byte        LDA [DOS_SRC_PTR],Y                 ; Read the byte...
.1950f1		48		pha		                PHA                                 ; And save it for the moment
.1950f2		c2 20		rep #$20	                REP #$20        ; set A long
.1950f4		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Decrement the file size...
.1950f6		d0 02		bne $1950fa	                BNE dec_low
.1950f8		c6 2e		dec $034e	                DEC DOS_FILE_SIZE+2
.1950fa		c6 2c		dec $034c	dec_low         DEC DOS_FILE_SIZE
.1950fc		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.1950fe		d0 04		bne $195104	                BNE next_byte
.195100		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.195102		f0 1b		beq $19511f	                BEQ ret_eof                         ; Yes: mark the file as EOF
.195104						next_byte
.195104		e2 20		sep #$20	                SEP #$20        ; set A short
.195106		c8		iny		                INY                                 ; Move to the next byte
.195107		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE                ; Have we reached the end of the sector?
.19510a		90 0b		bcc $195117	                BLT ret_success                     ; No: just return the byte
.19510c		22 6e 46 19	jsl $19466e	                JSL DOS_READNEXT                    ; Yes: read the next sector
.195110		b0 02		bcs $195114	                BCS reset_index
.195112		80 1a		bra $19512e	                BRA ret_failure                     ; If failure: pass the error up the chain
.195114		a0 00 00	ldy #$0000	reset_index     LDY #0                              ; Reset the index
.195117						ret_success
.195117		e2 20		sep #$20	                SEP #$20        ; set A short
.195119		68		pla		                PLA                                 ; Return the byte retrieved
.19511a		28		plp		                PLP
.19511b		2b		pld		                PLD
.19511c		ab		plb		                PLB
.19511d		38		sec		                SEC
.19511e		6b		rtl		                RTL
.19511f						ret_eof
.19511f		e2 20		sep #$20	                SEP #$20        ; set A short
.195121		5a		phy		                PHY                                 ; Save the index
.195122		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.195125		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195127		09 80		ora #$80	                ORA #FD_STAT_EOF                    ; Mark it EOF
.195129		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y                  ; And update the status
.19512b		7a		ply		                PLY                                 ; Restore the index
.19512c		80 e9		bra $195117	                BRA ret_success
.19512e						ret_failure
.19512e		e2 20		sep #$20	                SEP #$20        ; set A short
.195130		28		plp		                PLP
.195131		2b		pld		                PLD
.195132		ab		plb		                PLB
.195133		18		clc		                CLC
.195134		6b		rtl		                RTL
.195135						IF_LOADRAW
.195135		c2 30		rep #$30	                REP #$30        ; set A&X long
.195137		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.19513a						copy_loop
.19513a		e2 20		sep #$20	                SEP #$20        ; set A short
.19513c		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.19513e		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195140		c2 20		rep #$20	                REP #$20        ; set A long
.195142		38		sec		                SEC                         ; Count down the number of bytes left
.195143		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.195145		e9 01 00	sbc #$0001	                SBC #1
.195148		85 2c		sta $034c	                STA DOS_FILE_SIZE
.19514a		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.19514c		e9 00 00	sbc #$0000	                SBC #0
.19514f		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.195151		d0 04		bne $195157	                BNE continue
.195153		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.195155		f0 1b		beq $195172	                BEQ close_file              ; If not: we're done
.195157		c8		iny		continue        INY
.195158		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.19515b		d0 dd		bne $19513a	                BNE copy_loop               ; No: keep processing the bytes
.19515d		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.19515e		a5 34		lda $0354	                LDA DOS_DST_PTR
.195160		6d 0e a0	adc $18a00e	                ADC CLUSTER_SIZE
.195163		85 34		sta $0354	                STA DOS_DST_PTR
.195165		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.195167		69 00 00	adc #$0000	                ADC #0
.19516a		85 36		sta $0356	                STA DOS_DST_PTR+2
.19516c		22 d1 4c 19	jsl $194cd1	                JSL IF_READ                 ; Yes: load the next cluster
.195170		b0 c5		bcs $195137	                BCS copy_cluster            ; And start copying it
.195172						close_file
.195172		82 16 01	brl $19528b	ret_success     BRL IF_SUCCESS
.195175						IF_NULLBUFFER
.195175		5a		phy		                PHY
.195176		8b		phb		                PHB
.195177		0b		phd		                PHD
.195178		08		php		                PHP
.195179		48		pha		                PHA             ; begin setdbr macro
.19517a		08		php		                PHP
.19517b		e2 20		sep #$20	                SEP #$20        ; set A short
.19517d		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19517f		48		pha		                PHA
.195180		ab		plb		                PLB
.195181		28		plp		                PLP
.195182		68		pla		                PLA             ; end setdbr macro
.195183		48		pha		                PHA             ; begin setdp macro
.195184		08		php		                PHP
.195185		c2 20		rep #$20	                REP #$20        ; set A long
.195187		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19518a		5b		tcd		                TCD
.19518b		28		plp		                PLP
.19518c		68		pla		                PLA             ; end setdp macro
.19518d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19518f		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.195192		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195194		85 28		sta $0348	                STA DOS_TEMP
.195196		c8		iny		                INY
.195197		c8		iny		                INY
.195198		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19519a		85 2a		sta $034a	                STA DOS_TEMP+2
.19519c		a0 00 00	ldy #$0000	                LDY #0
.19519f		a9 00 00	lda #$0000	                LDA #0
.1951a2		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.1951a4		c8		iny		                INY
.1951a5		c8		iny		                INY
.1951a6		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.1951a9		d0 f7		bne $1951a2	                BNE loop
.1951ab		28		plp		                PLP
.1951ac		2b		pld		                PLD
.1951ad		ab		plb		                PLB
.1951ae		7a		ply		                PLY
.1951af		6b		rtl		                RTL
.1951b0						IF_COPY2BUFF
.1951b0		5a		phy		                PHY
.1951b1		8b		phb		                PHB
.1951b2		0b		phd		                PHD
.1951b3		08		php		                PHP
.1951b4		48		pha		                PHA             ; begin setdbr macro
.1951b5		08		php		                PHP
.1951b6		e2 20		sep #$20	                SEP #$20        ; set A short
.1951b8		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1951ba		48		pha		                PHA
.1951bb		ab		plb		                PLB
.1951bc		28		plp		                PLP
.1951bd		68		pla		                PLA             ; end setdbr macro
.1951be		48		pha		                PHA             ; begin setdp macro
.1951bf		08		php		                PHP
.1951c0		c2 20		rep #$20	                REP #$20        ; set A long
.1951c2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1951c5		5b		tcd		                TCD
.1951c6		28		plp		                PLP
.1951c7		68		pla		                PLA             ; end setdp macro
.1951c8		c2 30		rep #$30	                REP #$30        ; set A&X long
.1951ca		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1951cd		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1951cf		85 28		sta $0348	                STA DOS_TEMP
.1951d1		c8		iny		                INY
.1951d2		c8		iny		                INY
.1951d3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1951d5		85 2a		sta $034a	                STA DOS_TEMP+2
.1951d7		a0 00 00	ldy #$0000	                LDY #0
.1951da						copy_loop
.1951da		e2 20		sep #$20	                SEP #$20        ; set A short
.1951dc		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.1951de		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.1951e0		c2 20		rep #$20	                REP #$20        ; set A long
.1951e2		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.1951e4		d0 02		bne $1951e8	                BNE adv_dest
.1951e6		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.1951e8		c8		iny		adv_dest        INY                         ; Count it
.1951e9		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.1951ec		f0 0c		beq $1951fa	                BEQ done                    ; Yes: we're done
.1951ee		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.1951f0		c5 38		cmp $0358	                CMP DOS_END_PTR
.1951f2		d0 e6		bne $1951da	                BNE copy_loop               ; No: keep copying
.1951f4		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.1951f6		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.1951f8		d0 e0		bne $1951da	                BNE copy_loop
.1951fa		28		plp		done            PLP
.1951fb		2b		pld		                PLD
.1951fc		ab		plb		                PLB
.1951fd		7a		ply		                PLY
.1951fe		6b		rtl		                RTL
.1951ff						IF_SAVE
.1951ff		da		phx		                PHX
.195200		5a		phy		                PHY
.195201		0b		phd		                PHD
.195202		8b		phb		                PHB
.195203		08		php		                PHP
.195204		48		pha		                PHA             ; begin setdbr macro
.195205		08		php		                PHP
.195206		e2 20		sep #$20	                SEP #$20        ; set A short
.195208		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19520a		48		pha		                PHA
.19520b		ab		plb		                PLB
.19520c		28		plp		                PLP
.19520d		68		pla		                PLA             ; end setdbr macro
.19520e		48		pha		                PHA             ; begin setdp macro
.19520f		08		php		                PHP
.195210		c2 20		rep #$20	                REP #$20        ; set A long
.195212		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195215		5b		tcd		                TCD
.195216		28		plp		                PLP
.195217		68		pla		                PLA             ; end setdp macro
.195218		c2 30		rep #$30	                REP #$30        ; set A&X long
.19521a		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.19521d		38		sec		                SEC
.19521e		a5 38		lda $0358	                LDA DOS_END_PTR
.195220		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.195222		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195224		c8		iny		                INY
.195225		c8		iny		                INY
.195226		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.195228		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.19522a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19522c		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.19522f		18		clc		                CLC
.195230		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195232		69 01 00	adc #$0001	                ADC #1
.195235		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195237		90 09		bcc $195242	                BCC first_block
.195239		c8		iny		                INY
.19523a		c8		iny		                INY
.19523b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19523d		69 00 00	adc #$0000	                ADC #0
.195240		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195242		22 75 51 19	jsl $195175	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.195246		22 b0 51 19	jsl $1951b0	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.19524a		22 63 4c 19	jsl $194c63	                JSL IF_CREATE           ; Create file.
.19524e		b0 03		bcs $195253	                BCS check_for_end
.195250		82 31 00	brl $195284	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.195253		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.195255		c5 38		cmp $0358	                CMP DOS_END_PTR
.195257		d0 06		bne $19525f	                BNE next_block
.195259		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.19525b		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.19525d		f0 1d		beq $19527c	                BEQ done                ; Yes: we're done
.19525f		22 75 51 19	jsl $195175	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.195263		22 b0 51 19	jsl $1951b0	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.195267		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.19526a		a9 00 00	lda #$0000	                LDA #0
.19526d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19526f		c8		iny		                INY
.195270		c8		iny		                INY
.195271		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195273		22 36 4d 19	jsl $194d36	                JSL IF_WRITE            ; Append to the file
.195277		b0 da		bcs $195253	                BCS check_for_end       ; And try again
.195279		82 08 00	brl $195284	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.19527c		5c 8b 52 19	jmp $19528b	done            JML IF_SUCCESS
.195280						IF_FAILURE
.195280		e2 20		sep #$20	                SEP #$20        ; set A short
.195282		85 0e		sta $032e	                STA DOS_STATUS
.195284		28		plp		IF_PASSFAILURE  PLP
.195285		18		clc		                CLC
.195286		ab		plb		                PLB
.195287		2b		pld		                PLD
.195288		7a		ply		                PLY
.195289		fa		plx		                PLX
.19528a		6b		rtl		                RTL
.19528b						IF_SUCCESS
.19528b		e2 20		sep #$20	                SEP #$20        ; set A short
.19528d		64 00		stz $0320	                STZ BIOS_STATUS
.19528f		64 0e		stz $032e	                STZ DOS_STATUS
.195291		28		plp		                PLP
.195292		38		sec		                SEC
.195293		ab		plb		                PLB
.195294		2b		pld		                PLD
.195295		7a		ply		                PLY
.195296		fa		plx		                PLX
.195297		6b		rtl		                RTL
.195298						IF_RUN
.195298		da		phx		                PHX
.195299		5a		phy		                PHY
.19529a		0b		phd		                PHD
.19529b		8b		phb		                PHB
.19529c		08		php		                PHP
.19529d		48		pha		                PHA             ; begin setdbr macro
.19529e		08		php		                PHP
.19529f		e2 20		sep #$20	                SEP #$20        ; set A short
.1952a1		a9 00		lda #$00	                LDA #0
.1952a3		48		pha		                PHA
.1952a4		ab		plb		                PLB
.1952a5		28		plp		                PLP
.1952a6		68		pla		                PLA             ; end setdbr macro
.1952a7		48		pha		                PHA             ; begin setdp macro
.1952a8		08		php		                PHP
.1952a9		c2 20		rep #$20	                REP #$20        ; set A long
.1952ab		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1952ae		5b		tcd		                TCD
.1952af		28		plp		                PLP
.1952b0		68		pla		                PLA             ; end setdp macro
.1952b1		e2 20		sep #$20	                SEP #$20        ; set A short
.1952b3		c2 10		rep #$10	                REP #$10        ; set X long
.1952b5		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.1952b7		a2 00 00	ldx #$0000	                LDX #0
.1952ba		9f 00 ad 18	sta $18ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.1952be		e8		inx		                INX
.1952bf		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.1952c2		d0 f6		bne $1952ba	                BNE clr_fd_loop
.1952c4		c2 20		rep #$20	                REP #$20        ; set A long
.1952c6		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.1952c9		8f 0e ad 18	sta $18ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.1952cd		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_SECTOR
.1952d0		8f 10 ad 18	sta $18ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.1952d4		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.1952d6		8f 02 ad 18	sta $18ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.1952da		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.1952dc		8f 04 ad 18	sta $18ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.1952e0		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.1952e3		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.1952e5		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.1952e7		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.1952ea		85 20		sta $0340	                STA DOS_FD_PTR
.1952ec		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_FD
.1952ef		85 22		sta $0342	                STA DOS_FD_PTR+2
.1952f1		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.1952f4		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.1952f8		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.1952fc		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.195300		b0 03		bcs $195305	                BCS chk_execute
.195302		82 7f ff	brl $195284	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.195305						chk_execute
.195305		c2 20		rep #$20	                REP #$20        ; set A long
.195307		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.195309		d0 0b		bne $195316	                BNE try_execute                         ; If so: call it
.19530b		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.19530d		d0 07		bne $195316	                BNE try_execute
.19530f		e2 20		sep #$20	                SEP #$20        ; set A short
.195311		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.195313		82 6a ff	brl $195280	                BRL IF_FAILURE
.195316						try_execute
.195316		e2 20		sep #$20	                SEP #$20        ; set A short
.195318		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.19531a		48		pha		                PHA
.19531b		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.19531d		48		pha		                PHA
.19531e		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.195320		48		pha		                PHA
.195321		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.195323		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.195325		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.195329		e2 20		sep #$20	                SEP #$20        ; set A short
.19532b		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.19532c		68		pla		                PLA
.19532d		68		pla		                PLA
.19532e		82 5a ff	brl $19528b	                BRL IF_SUCCESS                          ; Return success
.195331						IF_ALLOCFD
.195331		da		phx		                PHX
.195332		5a		phy		                PHY
.195333		0b		phd		                PHD
.195334		8b		phb		                PHB
.195335		08		php		                PHP
.195336		48		pha		                PHA             ; begin setdbr macro
.195337		08		php		                PHP
.195338		e2 20		sep #$20	                SEP #$20        ; set A short
.19533a		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19533c		48		pha		                PHA
.19533d		ab		plb		                PLB
.19533e		28		plp		                PLP
.19533f		68		pla		                PLA             ; end setdbr macro
.195340		48		pha		                PHA             ; begin setdp macro
.195341		08		php		                PHP
.195342		c2 20		rep #$20	                REP #$20        ; set A long
.195344		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195347		5b		tcd		                TCD
.195348		28		plp		                PLP
.195349		68		pla		                PLA             ; end setdp macro
.19534a		c2 10		rep #$10	                REP #$10        ; set X long
.19534c		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.19534f						chk_fd
.19534f		e2 20		sep #$20	                SEP #$20        ; set A short
.195351		bd 20 ad	lda $18ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.195354		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.195356		f0 14		beq $19536c	                BEQ found                           ; No: flag and return the found descriptor
.195358						next_fd
.195358		c2 20		rep #$20	                REP #$20        ; set A long
.19535a		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.19535b		18		clc		                CLC
.19535c		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.19535f		aa		tax		                TAX
.195360		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.195363		90 ea		bcc $19534f	                BLT chk_fd                          ; No: check this new file descriptor
.195365		e2 20		sep #$20	                SEP #$20        ; set A short
.195367		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.195369		82 14 ff	brl $195280	                BRL IF_FAILURE
.19536c		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.19536e		9d 20 ad	sta $18ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.195371		c2 20		rep #$20	                REP #$20        ; set A long
.195373		8a		txa		                TXA
.195374		18		clc		                CLC
.195375		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.195378		85 20		sta $0340	                STA @b DOS_FD_PTR
.19537a		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.19537d		69 00 00	adc #$0000	                ADC #0
.195380		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195382		82 06 ff	brl $19528b	                BRL IF_SUCCESS                      ; Return this file descriptor
.195385						IF_FREEFD
.195385		da		phx		                PHX
.195386		5a		phy		                PHY
.195387		0b		phd		                PHD
.195388		8b		phb		                PHB
.195389		08		php		                PHP
.19538a		48		pha		                PHA             ; begin setdbr macro
.19538b		08		php		                PHP
.19538c		e2 20		sep #$20	                SEP #$20        ; set A short
.19538e		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195390		48		pha		                PHA
.195391		ab		plb		                PLB
.195392		28		plp		                PLP
.195393		68		pla		                PLA             ; end setdbr macro
.195394		48		pha		                PHA             ; begin setdp macro
.195395		08		php		                PHP
.195396		c2 20		rep #$20	                REP #$20        ; set A long
.195398		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19539b		5b		tcd		                TCD
.19539c		28		plp		                PLP
.19539d		68		pla		                PLA             ; end setdp macro
.19539e		e2 20		sep #$20	                SEP #$20        ; set A short
.1953a0		c2 10		rep #$10	                REP #$10        ; set X long
.1953a2		a9 00		lda #$00	                LDA #0
.1953a4		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.1953a6		82 e2 fe	brl $19528b	                BRL IF_SUCCESS
.1953a9						DOS_SRC2DST
.1953a9		da		phx		                PHX
.1953aa		5a		phy		                PHY
.1953ab		0b		phd		                PHD
.1953ac		8b		phb		                PHB
.1953ad		08		php		                PHP
.1953ae		48		pha		                PHA             ; begin setdp macro
.1953af		08		php		                PHP
.1953b0		c2 20		rep #$20	                REP #$20        ; set A long
.1953b2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1953b5		5b		tcd		                TCD
.1953b6		28		plp		                PLP
.1953b7		68		pla		                PLA             ; end setdp macro
.1953b8		c2 30		rep #$30	                REP #$30        ; set A&X long
.1953ba		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1953bd		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1953bf		aa		tax		                TAX                                     ; X := source buffer address
.1953c0		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.1953c2		a8		tay		                TAY                                     ; Y := destination buffer address
.1953c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1953c5		a9 18		lda #$18	                LDA #`DOS_FILE_BUFFS
.1953c7		48		pha		                PHA
.1953c8		ab		plb		                PLB
.1953c9		c2 20		rep #$20	                REP #$20        ; set A long
.1953cb		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.1953ce		f0 11		beq $1953e1	loop            BEQ done
.1953d0		48		pha		                PHA
.1953d1		e2 20		sep #$20	                SEP #$20        ; set A short
.1953d3		bd 00 00	lda $180000,x	                LDA #0,B,X
.1953d6		99 00 00	sta $180000,y	                STA #0,B,Y
.1953d9		c2 20		rep #$20	                REP #$20        ; set A long
.1953db		68		pla		                PLA
.1953dc		3a		dec a		                DEC A
.1953dd		e8		inx		                INX
.1953de		c8		iny		                INY
.1953df		80 ed		bra $1953ce	                BRA loop
.1953e1		28		plp		done            PLP
.1953e2		ab		plb		                PLB
.1953e3		2b		pld		                PLD
.1953e4		7a		ply		                PLY
.1953e5		fa		plx		                PLX
.1953e6		6b		rtl		                RTL
.1953e7						IF_COPY
.1953e7		da		phx		                PHX
.1953e8		5a		phy		                PHY
.1953e9		0b		phd		                PHD
.1953ea		8b		phb		                PHB
.1953eb		08		php		                PHP
.1953ec		48		pha		                PHA             ; begin setdbr macro
.1953ed		08		php		                PHP
.1953ee		e2 20		sep #$20	                SEP #$20        ; set A short
.1953f0		a9 00		lda #$00	                LDA #0
.1953f2		48		pha		                PHA
.1953f3		ab		plb		                PLB
.1953f4		28		plp		                PLP
.1953f5		68		pla		                PLA             ; end setdbr macro
.1953f6		48		pha		                PHA             ; begin setdp macro
.1953f7		08		php		                PHP
.1953f8		c2 20		rep #$20	                REP #$20        ; set A long
.1953fa		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1953fd		5b		tcd		                TCD
.1953fe		28		plp		                PLP
.1953ff		68		pla		                PLA             ; end setdp macro
.195400		22 31 53 19	jsl $195331	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.195404		b0 03		bcs $195409	                BCS set_src_path
.195406		82 7b fe	brl $195284	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.195409						set_src_path
.195409		c2 30		rep #$30	                REP #$30        ; set A&X long
.19540b		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.19540e		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.195410		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195412		c8		iny		                INY
.195413		c8		iny		                INY
.195414		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.195416		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195418						alloc_dest
.195418		c2 30		rep #$30	                REP #$30        ; set A&X long
.19541a		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.19541c		85 30		sta $0350	                STA @b DOS_SRC_PTR
.19541e		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.195420		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.195422		22 31 53 19	jsl $195331	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.195426		b0 0f		bcs $195437	                BCS set_paths                   ; If everything is ok... start setting the paths
.195428		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.19542a		85 20		sta $0340	                STA @b DOS_FD_PTR
.19542c		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.19542e		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195430		22 85 53 19	jsl $195385	                JSL IF_FREEFD                   ; And free it
.195434		82 4d fe	brl $195284	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.195437						set_paths
.195437		c2 30		rep #$30	                REP #$30        ; set A&X long
.195439		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.19543b		85 34		sta $0354	                STA @b DOS_DST_PTR
.19543d		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.19543f		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.195441		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.195444		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.195446		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195448		c8		iny		                INY
.195449		c8		iny		                INY
.19544a		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.19544c		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.19544e		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195450		85 20		sta $0340	                STA @b DOS_FD_PTR
.195452		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195454		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195456		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.19545a		b0 10		bcs $19546c	                BCS src_open                    ; If success, work with the openned file
.19545c		00		brk #		                BRK
.19545d		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.19545f		85 20		sta $0340	                STA @b DOS_FD_PTR
.195461		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195463		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195465		22 85 53 19	jsl $195385	                JSL IF_FREEFD                   ; And free it
.195469		82 bc ff	brl $195428	                BRL err_free_src_fd             ; Free the source file descriptor
.19546c		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.19546f		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195471		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195473		c8		iny		                INY
.195474		c8		iny		                INY
.195475		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195477		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195479		22 a9 53 19	jsl $1953a9	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.19547d		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.19547f		85 20		sta $0340	                STA @b DOS_FD_PTR
.195481		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195483		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195485		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.195489		b0 0f		bcs $19549a	                BCS read_next                   ; If sucessful, try to get the next cluster
.19548b		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.19548d		85 20		sta $0340	                STA @b DOS_FD_PTR
.19548f		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195491		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195493		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.195497		82 c3 ff	brl $19545d	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.19549a						read_next
.19549a		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.19549c		85 20		sta $0340	                STA @b DOS_FD_PTR
.19549e		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.1954a0		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1954a2		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.1954a6		b0 19		bcs $1954c1	                BCS copy2dest                   ; If successful, copy the sector
.1954a8		e2 20		sep #$20	                SEP #$20        ; set A short
.1954aa		a5 0e		lda $032e	                LDA @b DOS_STATUS
.1954ac		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.1954ae		f0 32		beq $1954e2	                BEQ file_copied                 ; Yes: we're done copying
.1954b0						err_dest_close
.1954b0		c2 20		rep #$20	                REP #$20        ; set A long
.1954b2		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1954b4		85 20		sta $0340	                STA @b DOS_FD_PTR
.1954b6		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1954b8		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1954ba		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.1954be		82 ca ff	brl $19548b	                BRL err_src_close               ; Close the source and throw an error
.1954c1						copy2dest
.1954c1		22 a9 53 19	jsl $1953a9	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.1954c5		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.1954c8		a9 00 00	lda #$0000	                LDA #0
.1954cb		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1954cd		c8		iny		                INY
.1954ce		c8		iny		                INY
.1954cf		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1954d1		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1954d3		85 20		sta $0340	                STA @b DOS_FD_PTR
.1954d5		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1954d7		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1954d9		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.1954dd		90 d1		bcc $1954b0	                BCC err_dest_close              ; If error: close all files and throw the error
.1954df		82 b8 ff	brl $19549a	                BRL read_next                   ; Otherwise: repeat the loop
.1954e2						file_copied
.1954e2		c2 20		rep #$20	                REP #$20        ; set A long
.1954e4		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1954e6		85 20		sta $0340	                STA @b DOS_FD_PTR
.1954e8		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1954ea		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1954ec		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.1954f0		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.1954f2		85 20		sta $0340	                STA @b DOS_FD_PTR
.1954f4		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.1954f6		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1954f8		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.1954fc		82 8c fd	brl $19528b	                BRL IF_SUCCESS

;******  Return to file: src/kernel.asm


;******  Processing file: src/Libraries/uart.asm

=$af18f8					    UART1_BASE = $AF18F8        ; Base address for UART 1 (COM1) in the C256 Foenix U (only 1 Serial port)
=$af18f8					    UART2_BASE = $AF18F8
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.1954ff						UART_SELECT
.1954ff		08		php		            PHP
.195500		c2 20		rep #$20	                REP #$20        ; set A long
.195502		c9 02 00	cmp #$0002	            CMP #2
.195505		f0 07		beq $19550e	            BEQ is_COM2
.195507		c2 20		rep #$20	                REP #$20        ; set A long
.195509		a9 f8 18	lda #$18f8	            LDA #<>UART1_BASE
.19550c		80 05		bra $195513	            BRA setaddr
.19550e						is_COM2
.19550e		c2 20		rep #$20	                REP #$20        ; set A long
.195510		a9 f8 18	lda #$18f8	            LDA #<>UART2_BASE
.195513		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.195517		e2 20		sep #$20	                SEP #$20        ; set A short
.195519		a9 af		lda #$af	            LDA #`UART1_BASE
.19551b		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.19551f		28		plp		            PLP
.195520		6b		rtl		            RTL
.195521						UART_GETC
.195521		08		php		            PHP
.195522		0b		phd		            PHD
.195523		c2 30		rep #$30	                REP #$30        ; set A&X long
.195525		48		pha		                PHA             ; begin setdp macro
.195526		08		php		                PHP
.195527		c2 20		rep #$20	                REP #$20        ; set A long
.195529		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.19552c		5b		tcd		                TCD
.19552d		28		plp		                PLP
.19552e		68		pla		                PLA             ; end setdp macro
.19552f		e2 20		sep #$20	                SEP #$20        ; set A short
.195531		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.195534		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.195536		29 01		and #$01	            AND #LSR_DATA_AVAIL
.195538		f0 fa		beq $195534	            BEQ wait_getc           ; If the flag is clear, wait
.19553a		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.19553d		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.19553f		2b		pld		            PLD
.195540		28		plp		            PLP
.195541		6b		rtl		            RTL
.195542						UART_PUTC
.195542		08		php		            PHP
.195543		0b		phd		            PHD
.195544		c2 30		rep #$30	                REP #$30        ; set A&X long
.195546		48		pha		                PHA             ; begin setdp macro
.195547		08		php		                PHP
.195548		c2 20		rep #$20	                REP #$20        ; set A long
.19554a		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.19554d		5b		tcd		                TCD
.19554e		28		plp		                PLP
.19554f		68		pla		                PLA             ; end setdp macro
.195550		e2 20		sep #$20	                SEP #$20        ; set A short
.195552		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.195553		a0 05 00	ldy #$0005	            LDY #UART_LSR
.195556		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.195558		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.19555a		f0 fa		beq $195556	            BEQ wait_putc
.19555c		68		pla		            PLA
.19555d		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.195560		97 00		sta [$0700],y	            STA [CURRUART],Y
.195562		2b		pld		            PLD
.195563		28		plp		            PLP
.195564		6b		rtl		            RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/Joystick.asm

.195565						JOYSTICK_SET_NES_MODE
.195565		e2 20		sep #$20	                SEP #$20        ; set A short
.195567		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19556b		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.19556d		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195571		6b		rtl		          RTL
.195572						JOYSTICK_SET_SNES_MODE
.195572		e2 20		sep #$20	                SEP #$20        ; set A short
.195574		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195578		29 fb		and #$fb	          AND #~NES_SNES_JOY
.19557a		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.19557c		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195580		6b		rtl		          RTL
.195581						JOYSTICK_ENABLE_NES_SNES_PORT0
.195581		e2 20		sep #$20	                SEP #$20        ; set A short
.195583		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195587		29 fe		and #$fe	          AND #~NES_SNES_EN0
.195589		09 01		ora #$01	          ORA #NES_SNES_EN0
.19558b		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19558f		6b		rtl		          RTL
.195590						JOYSTICK_ENABLE_NES_SNES_PORT1
.195590		e2 20		sep #$20	                SEP #$20        ; set A short
.195592		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195596		29 fd		and #$fd	          AND #~NES_SNES_EN1
.195598		09 02		ora #$02	          ORA #NES_SNES_EN1
.19559a		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19559e		6b		rtl		          RTL
.19559f						JOYSTICK_DISABLE_NES_SNES_PORT0
.19559f		e2 20		sep #$20	                SEP #$20        ; set A short
.1955a1		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.1955a5		29 fe		and #$fe	          AND #~NES_SNES_EN0
.1955a7		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.1955ab		6b		rtl		          RTL
.1955ac						JOYSTICK_DISABLE_NES_SNES_PORT1
.1955ac		e2 20		sep #$20	                SEP #$20        ; set A short
.1955ae		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.1955b2		29 fd		and #$fd	          AND #~NES_SNES_EN1
.1955b4		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.1955b8		6b		rtl		          RTL
.1955b9						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.1955b9		e2 20		sep #$20	                SEP #$20        ; set A short
.1955bb		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.1955bf		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.1955c1		c9 00		cmp #$00	          CMP #$00
.1955c3		f0 14		beq $1955d9	          BEQ END_OF_JOYSTICK_POLL
.1955c5		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.1955c9		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.1955cb		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.1955cf						JOYSTICK_POLLING_ISNOTOVER
.1955cf		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.1955d3		29 40		and #$40	          AND #NES_SNES_DONE
.1955d5		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.1955d7		d0 f6		bne $1955cf	          BNE JOYSTICK_POLLING_ISNOTOVER
.1955d9						END_OF_JOYSTICK_POLL
.1955d9		6b		rtl		          RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/Libraries/sdc_library.asm

.1955da						SDC_WAITBUSY
.1955da		08		php		                PHP
.1955db		e2 20		sep #$20	                SEP #$20        ; set A short
.1955dd		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.1955e1		29 01		and #$01	                AND #SDC_TRANS_BUSY
.1955e3		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.1955e5		f0 f6		beq $1955dd	                BEQ wait_xact
.1955e7		28		plp		                PLP
.1955e8		6b		rtl		                RTL
.1955e9						SDC_INIT
.1955e9		0b		phd		                PHD
.1955ea		8b		phb		                PHB
.1955eb		08		php		                PHP
.1955ec		48		pha		                PHA             ; begin setdbr macro
.1955ed		08		php		                PHP
.1955ee		e2 20		sep #$20	                SEP #$20        ; set A short
.1955f0		a9 00		lda #$00	                LDA #0
.1955f2		48		pha		                PHA
.1955f3		ab		plb		                PLB
.1955f4		28		plp		                PLP
.1955f5		68		pla		                PLA             ; end setdbr macro
.1955f6		48		pha		                PHA             ; begin setdp macro
.1955f7		08		php		                PHP
.1955f8		c2 20		rep #$20	                REP #$20        ; set A long
.1955fa		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1955fd		5b		tcd		                TCD
.1955fe		28		plp		                PLP
.1955ff		68		pla		                PLA             ; end setdp macro
.195600		e2 20		sep #$20	                SEP #$20        ; set A short
.195602		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.195604		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.195608		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.19560a		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.19560e		22 da 55 19	jsl $1955da	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.195612		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195616		d0 07		bne $19561f	                BNE ret_error                       ; Is there one? Process the error
.195618		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.19561a		28		plp		                PLP
.19561b		ab		plb		                PLB
.19561c		2b		pld		                PLD
.19561d		38		sec		                SEC
.19561e		6b		rtl		                RTL
.19561f		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.195622		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.195624		85 00		sta $0320	set_error       STA BIOS_STATUS
.195626		28		plp		                PLP
.195627		ab		plb		                PLB
.195628		2b		pld		                PLD
.195629		18		clc		                CLC
.19562a		6b		rtl		                RTL
.19562b						SDC_GETBLOCK
.19562b		0b		phd		                PHD
.19562c		8b		phb		                PHB
.19562d		08		php		                PHP
.19562e		48		pha		                PHA             ; begin setdbr macro
.19562f		08		php		                PHP
.195630		e2 20		sep #$20	                SEP #$20        ; set A short
.195632		a9 00		lda #$00	                LDA #0
.195634		48		pha		                PHA
.195635		ab		plb		                PLB
.195636		28		plp		                PLP
.195637		68		pla		                PLA             ; end setdbr macro
.195638		48		pha		                PHA             ; begin setdp macro
.195639		08		php		                PHP
.19563a		c2 20		rep #$20	                REP #$20        ; set A long
.19563c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19563f		5b		tcd		                TCD
.195640		28		plp		                PLP
.195641		68		pla		                PLA             ; end setdp macro
.195642		e2 20		sep #$20	                SEP #$20        ; set A short
.195644		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.195648		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.19564a		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.19564e		a9 00		lda #$00	                LDA #0
.195650		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.195654		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.195656		0a		asl a		                ASL A
.195657		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.19565b		a5 03		lda $0323	                LDA BIOS_LBA+1
.19565d		2a		rol a		                ROL A
.19565e		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.195662		a5 04		lda $0324	                LDA BIOS_LBA+2
.195664		2a		rol a		                ROL A
.195665		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.195669		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.19566b		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.19566f		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195671		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195675		22 da 55 19	jsl $1955da	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.195679		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.19567d		d0 36		bne $1956b5	                BNE ret_error                       ; Is there one? Process the error
.19567f		e2 20		sep #$20	                SEP #$20        ; set A short
.195681		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.195685		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.195687		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.19568b		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.19568d		c2 10		rep #$10	                REP #$10        ; set X long
.19568f		a0 00 00	ldy #$0000	                LDY #0
.195692		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.195696		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.195698		c8		iny		                INY                                 ; Advance to the next byte
.195699		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.19569c		d0 f4		bne $195692	                BNE loop_rd                         ; No: keep reading
.19569e		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.1956a2		d0 11		bne $1956b5	                BNE ret_error                       ; Is there one? Process the error
.1956a4		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.1956a6		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.1956aa		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.1956ac		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.1956b0		28		plp		                PLP
.1956b1		ab		plb		                PLB
.1956b2		2b		pld		                PLD
.1956b3		38		sec		                SEC
.1956b4		6b		rtl		                RTL
.1956b5		a9 82		lda #$82	ret_error       LDA #BIOS_ERR_READ                  ; Return a read error
.1956b7		85 00		sta $0320	                STA BIOS_STATUS
.1956b9		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.1956bd		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.1956bf		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.1956c3		28		plp		                PLP
.1956c4		ab		plb		                PLB
.1956c5		2b		pld		                PLD
.1956c6		18		clc		                CLC
.1956c7		6b		rtl		                RTL
.1956c8						SDC_PUTBLOCK
.1956c8		0b		phd		                PHD
.1956c9		8b		phb		                PHB
.1956ca		08		php		                PHP
.1956cb		48		pha		                PHA             ; begin setdbr macro
.1956cc		08		php		                PHP
.1956cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1956cf		a9 00		lda #$00	                LDA #0
.1956d1		48		pha		                PHA
.1956d2		ab		plb		                PLB
.1956d3		28		plp		                PLP
.1956d4		68		pla		                PLA             ; end setdbr macro
.1956d5		48		pha		                PHA             ; begin setdp macro
.1956d6		08		php		                PHP
.1956d7		c2 20		rep #$20	                REP #$20        ; set A long
.1956d9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1956dc		5b		tcd		                TCD
.1956dd		28		plp		                PLP
.1956de		68		pla		                PLA             ; end setdp macro
.1956df		e2 20		sep #$20	                SEP #$20        ; set A short
.1956e1		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.1956e3		f0 04		beq $1956e9	                BEQ led_on                          ; Yes: start the transaction
.1956e5		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.1956e7		80 5d		bra $195746	                BRA ret_error
.1956e9		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.1956ed		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.1956ef		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.1956f3		c2 10		rep #$10	                REP #$10        ; set X long
.1956f5		a0 00 00	ldy #$0000	                LDY #0
.1956f8		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.1956fa		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.1956fe		c8		iny		                INY                                 ; Advance to the next byte
.1956ff		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.195702		d0 f4		bne $1956f8	                BNE loop_wr                         ; No: keep writing
.195704		a9 00		lda #$00	                LDA #0
.195706		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.19570a		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.19570c		0a		asl a		                ASL A
.19570d		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.195711		a5 03		lda $0323	                LDA BIOS_LBA+1
.195713		2a		rol a		                ROL A
.195714		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.195718		a5 04		lda $0324	                LDA BIOS_LBA+2
.19571a		2a		rol a		                ROL A
.19571b		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.19571f		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.195721		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.195725		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195727		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.19572b		22 da 55 19	jsl $1955da	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.19572f		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195733		d0 11		bne $195746	                BNE ret_error                       ; Is there one? Process the error
.195735		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.195737		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.19573b		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.19573d		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195741		28		plp		                PLP
.195742		ab		plb		                PLB
.195743		2b		pld		                PLD
.195744		38		sec		                SEC
.195745		6b		rtl		                RTL
.195746		a9 83		lda #$83	ret_error       LDA #BIOS_ERR_WRITE                 ; Return a write error
.195748		85 00		sta $0320	                STA BIOS_STATUS
.19574a		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.19574e		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195750		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195754		28		plp		                PLP
.195755		ab		plb		                PLB
.195756		2b		pld		                PLD
.195757		18		clc		                CLC
.195758		6b		rtl		                RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
>195759		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>195761		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>195771		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.195775						FDC_Check_RQM
.195775		0b		phd		                    PHD
.195776		08		php		                    PHP
.195777		48		pha		                PHA             ; begin setdp macro
.195778		08		php		                PHP
.195779		c2 20		rep #$20	                REP #$20        ; set A long
.19577b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19577e		5b		tcd		                TCD
.19577f		28		plp		                PLP
.195780		68		pla		                PLA             ; end setdp macro
.195781		e2 20		sep #$20	                SEP #$20        ; set A short
.195783		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195785		22 ac 3a 19	jsl $193aac	                    JSL ISETTIMEOUT
.195789		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.19578b		30 12		bmi $19579f	                    BMI time_out            ; If so: signal a time out
.19578d		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195791		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.195793		f0 f4		beq $195789	                    BEQ loop
.195795		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195797		22 ac 3a 19	jsl $193aac	                    JSL ISETTIMEOUT
.19579b		28		plp		                    PLP
.19579c		2b		pld		                    PLD
.19579d		38		sec		                    SEC
.19579e		60		rts		                    RTS
.19579f		28		plp		time_out            PLP
.1957a0		2b		pld		                    PLD
.1957a1		18		clc		                    CLC
.1957a2		60		rts		                    RTS
.1957a3						FDC_Check_CMD_BSY
.1957a3		0b		phd		                    PHD
.1957a4		08		php		                    PHP
.1957a5		48		pha		                PHA             ; begin setdp macro
.1957a6		08		php		                PHP
.1957a7		c2 20		rep #$20	                REP #$20        ; set A long
.1957a9		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1957ac		5b		tcd		                TCD
.1957ad		28		plp		                PLP
.1957ae		68		pla		                PLA             ; end setdp macro
.1957af		e2 20		sep #$20	                SEP #$20        ; set A short
.1957b1		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.1957b3		22 ac 3a 19	jsl $193aac	                    JSL ISETTIMEOUT
.1957b7		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.1957b9		30 12		bmi $1957cd	                    BMI time_out            ; If so: signal a time out
.1957bb		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.1957bf		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.1957c1		d0 f4		bne $1957b7	                    BNE loop
.1957c3		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.1957c5		22 ac 3a 19	jsl $193aac	                    JSL ISETTIMEOUT
.1957c9		28		plp		                    PLP
.1957ca		2b		pld		                    PLD
.1957cb		38		sec		                    SEC
.1957cc		60		rts		                    RTS
.1957cd		28		plp		time_out            PLP
.1957ce		2b		pld		                    PLD
.1957cf		18		clc		                    CLC
.1957d0		60		rts		                    RTS
.1957d1						FDC_Can_Read_Data
.1957d1		0b		phd		                    PHD
.1957d2		08		php		                    PHP
.1957d3		48		pha		                PHA             ; begin setdp macro
.1957d4		08		php		                PHP
.1957d5		c2 20		rep #$20	                REP #$20        ; set A long
.1957d7		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1957da		5b		tcd		                TCD
.1957db		28		plp		                PLP
.1957dc		68		pla		                PLA             ; end setdp macro
.1957dd		e2 20		sep #$20	                SEP #$20        ; set A short
.1957df		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.1957e1		22 ac 3a 19	jsl $193aac	                    JSL ISETTIMEOUT
.1957e5		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.1957e7		30 14		bmi $1957fd	                    BMI time_out            ; If so: signal a time out
.1957e9		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.1957ed		29 40		and #$40	                    AND #FDC_MSR_DIO
.1957ef		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.1957f1		d0 f2		bne $1957e5	                    BNE loop
.1957f3		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.1957f5		22 ac 3a 19	jsl $193aac	                    JSL ISETTIMEOUT
.1957f9		28		plp		                    PLP
.1957fa		2b		pld		                    PLD
.1957fb		38		sec		                    SEC
.1957fc		60		rts		                    RTS
.1957fd		28		plp		time_out            PLP
.1957fe		2b		pld		                    PLD
.1957ff		18		clc		                    CLC
.195800		60		rts		                    RTS
.195801						FDC_DELAY_10MS
.195801		da		phx		                    PHX
.195802		08		php		                    PHP
.195803		c2 10		rep #$10	                REP #$10        ; set X long
.195805		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.195808		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.195809		ca		dex		                    DEX
.19580a		e0 00 00	cpx #$0000	                    CPX #0
.19580d		d0 f9		bne $195808	                    BNE loop
.19580f		28		plp		                    PLP
.195810		fa		plx		                    PLX
.195811		6b		rtl		                    RTL
.195812						FDC_COMMAND
.195812		da		phx		                    PHX
.195813		8b		phb		                    PHB
.195814		0b		phd		                    PHD
.195815		08		php		                    PHP
.195816		48		pha		                PHA             ; begin setdbr macro
.195817		08		php		                PHP
.195818		e2 20		sep #$20	                SEP #$20        ; set A short
.19581a		a9 00		lda #$00	                LDA #0
.19581c		48		pha		                PHA
.19581d		ab		plb		                PLB
.19581e		28		plp		                PLP
.19581f		68		pla		                PLA             ; end setdbr macro
.195820		48		pha		                PHA             ; begin setdp macro
.195821		08		php		                PHP
.195822		c2 20		rep #$20	                REP #$20        ; set A long
.195824		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195827		5b		tcd		                TCD
.195828		28		plp		                PLP
.195829		68		pla		                PLA             ; end setdp macro
.19582a		22 01 58 19	jsl $195801	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.19582e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.195830		a2 00		ldx #$00	                    LDX #0
.195832		a9 00		lda #$00	                    LDA #0
.195834		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.195837		e8		inx		                    INX
.195838		e0 10		cpx #$10	                    CPX #16
.19583a		d0 f8		bne $195834	                    BNE clr_results
.19583c		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.195840		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195842		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.195844		f0 04		beq $19584a	                    BEQ start_send                          ; If so, start sending
.195846		22 5f 59 19	jsl $19595f	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.19584a						start_send
.19584a		e2 10		sep #$10	                SEP #$10        ; set X short
.19584c		a2 00		ldx #$00	                    LDX #0
.19584e		20 75 57	jsr $195775	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.195851		b0 03		bcs $195856	                    BCS send_param
.195853		82 5e 00	brl $1958b4	                    BRL time_out                            ; If there was a timeout, flag the time out
.195856		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.195859		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.19585d		22 01 58 19	jsl $195801	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.195861		e8		inx		                    INX                                     ; Advance to the next byte
.195862		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.195865		d0 e7		bne $19584e	                    BNE send_loop                           ; Keep sending until we've sent them all
.195867		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.19586a		d0 03		bne $19586f	                    BNE chk_data_dir
.19586c		82 80 00	brl $1958ef	                    BRL result_phase                        ; If 0: we just want a result
.19586f		10 3c		bpl $1958ad	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.195871						wr_data
.195871		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.195873		30 03		bmi $195878	                    BMI wr_chk_rqm
.195875		82 3c 00	brl $1958b4	                    BRL time_out                            ; If not, raise an error
.195878		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.19587c		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.19587e		f0 f1		beq $195871	                    BEQ wr_data_rdy
.195880		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.195882		d0 03		bne $195887	                    BNE wr_data_phase                       ; If so: transfer the data
.195884		82 68 00	brl $1958ef	                    BRL result_phase                          ; If not: it's an error
.195887						wr_data_phase
.195887		c2 10		rep #$10	                REP #$10        ; set X long
.195889		a0 00 00	ldy #$0000	                    LDY #0
.19588c		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.19588e		30 03		bmi $195893	                    BMI wr_chk_nondma
.195890		82 21 00	brl $1958b4	                    BRL time_out                            ; If not, raise an error
.195893		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.195897		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.195899		f0 54		beq $1958ef	                    BEQ result_phase                        ; If not: break out to result phase
.19589b		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.19589d		f0 ed		beq $19588c	                    BEQ wr_data_loop                        ; No: keep waiting
.19589f		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.1958a1		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.1958a5		c8		iny		                    INY                                     ; Move to the next position
.1958a6		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.1958a9		d0 e1		bne $19588c	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.1958ab		80 42		bra $1958ef	                    BRA result_phase                        ; ready for the result phase
.1958ad		20 d1 57	jsr $1957d1	rd_data             JSR FDC_Can_Read_Data
.1958b0		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.1958b2		30 07		bmi $1958bb	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.1958b4						time_out
.1958b4		e2 20		sep #$20	                SEP #$20        ; set A short
.1958b6		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.1958b8		82 9c 00	brl $195957	                    BRL pass_error
.1958bb		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.1958bf		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.1958c1		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.1958c3		d0 eb		bne $1958b0	                    BNE rd_data_rdy
.1958c5		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.1958c9		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.1958cb		d0 03		bne $1958d0	                    BNE rd_data_phase                       ; If so: transfer the data
.1958cd		82 83 00	brl $195953	                    BRL error                               ; If not: it's an error
.1958d0						rd_data_phase
.1958d0		c2 10		rep #$10	                REP #$10        ; set X long
.1958d2		a0 00 00	ldy #$0000	                    LDY #0
.1958d5		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.1958d7		10 db		bpl $1958b4	                    BPL time_out                            ; If not: throw a timeout error
.1958d9		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.1958dd		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.1958df		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.1958e1		d0 f2		bne $1958d5	                    BNE rd_data_loop
.1958e3		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.1958e7		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.1958e9		c8		iny		                    INY                                     ; Move to the next position
.1958ea		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.1958ed		d0 e6		bne $1958d5	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.1958ef		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.1958f2		f0 34		beq $195928	                    BEQ chk_busy                            ; Then we're done
.1958f4		e2 10		sep #$10	                SEP #$10        ; set X short
.1958f6		a2 00		ldx #$00	                    LDX #0
.1958f8		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.1958fa		22 ac 3a 19	jsl $193aac	                    JSL ISETTIMEOUT
.1958fe		20 d1 57	jsr $1957d1	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.195901		90 b1		bcc $1958b4	                    BCC time_out                            ; If there was a time out, raise an error
.195903		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.195907		20 d1 57	jsr $1957d1	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.19590a		90 a8		bcc $1958b4	                    BCC time_out                            ; If there was a time out, raise an error
.19590c		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.195910		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.195913		20 75 57	jsr $195775	                    JSR FDC_Check_RQM
.195916		90 9c		bcc $1958b4	                    BCC time_out                            ; If there was a time out, flag the error
.195918		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.19591c		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.19591e		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.195920		d0 06		bne $195928	                    BNE chk_busy
.195922		e8		inx		                    INX                                     ; Move to the next result positions
.195923		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.195926		d0 e4		bne $19590c	                    BNE read_result                         ; And keep looping until we've read all
.195928						chk_busy
.195928		c2 10		rep #$10	                REP #$10        ; set X long
.19592a		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.19592d		22 cd 0f 19	jsl $190fcd	                    JSL ILOOP_MS
.195931		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.195935		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.195937		f0 12		beq $19594b	                    BEQ done                                ; If not set: we're done
.195939		20 d1 57	jsr $1957d1	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.19593c		b0 03		bcs $195941	                    BCS get_result_byte
.19593e		82 73 ff	brl $1958b4	                    BRL time_out                            ; If there was a time out, flag the error
.195941		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.195945		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.195948		e8		inx		                    INX
.195949		80 dd		bra $195928	                    BRA chk_busy                            ; And keep checking
.19594b						done
.19594b		64 20		stz $0320	                    STZ BIOS_STATUS
.19594d		28		plp		                    PLP
.19594e		2b		pld		                    PLD
.19594f		ab		plb		                    PLB
.195950		fa		plx		                    PLX
.195951		38		sec		                    SEC
.195952		6b		rtl		                    RTL
.195953						error
.195953		e2 20		sep #$20	                SEP #$20        ; set A short
.195955		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.195957		85 20		sta $0320	pass_error          STA BIOS_STATUS
.195959		28		plp		                    PLP
.19595a		2b		pld		                    PLD
.19595b		ab		plb		                    PLB
.19595c		fa		plx		                    PLX
.19595d		18		clc		                    CLC
.19595e		6b		rtl		                    RTL
.19595f						FDC_Init
.19595f		08		php		                    PHP
.195960		c2 10		rep #$10	                REP #$10        ; set X long
.195962		e2 20		sep #$20	                SEP #$20        ; set A short
.195964		a9 00		lda #$00	                    LDA #0
.195966		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.19596a		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.19596d		a0 00 00	ldy #$0000	                    LDY #0
.195970		22 da 0f 19	jsl $190fda	                    JSL IDELAY
.195974		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.195976		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.19597a		ea		nop		                    NOP
.19597b		ea		nop		                    NOP
.19597c		ea		nop		                    NOP
.19597d		ea		nop		                    NOP
.19597e		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.195980		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.195984		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.195986		8f f8 13 af	sta $af13f8	                    STA @l SIO_FDC_CCR
.19598a		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.19598d		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.195990		22 da 0f 19	jsl $190fda	                    JSL IDELAY
.195994		22 6f 5a 19	jsl $195a6f	                    JSL FDC_Sense_Int_Status
.195998		90 25		bcc $1959bf	                    BCC pass_failure
.19599a		22 6f 5a 19	jsl $195a6f	                    JSL FDC_Sense_Int_Status
.19599e		90 1f		bcc $1959bf	                    BCC pass_failure
.1959a0		22 6f 5a 19	jsl $195a6f	                    JSL FDC_Sense_Int_Status
.1959a4		90 19		bcc $1959bf	                    BCC pass_failure
.1959a6		22 6f 5a 19	jsl $195a6f	                    JSL FDC_Sense_Int_Status
.1959aa		90 13		bcc $1959bf	                    BCC pass_failure
.1959ac		22 31 5b 19	jsl $195b31	                    JSL FDC_Configure_Command
.1959b0		90 0d		bcc $1959bf	                    BCC pass_failure
.1959b2		22 d8 5a 19	jsl $195ad8	                    JSL FDC_Specify_Command
.1959b6		90 07		bcc $1959bf	                    BCC pass_failure
.1959b8		22 db 59 19	jsl $1959db	                    JSL FDC_Motor_On
.1959bc		28		plp		                    PLP
.1959bd		38		sec		                    SEC
.1959be		6b		rtl		                    RTL
.1959bf		28		plp		pass_failure        PLP
.1959c0		18		clc		                    CLC
.1959c1		6b		rtl		                    RTL
.1959c2						FDC_MOTOR_NEEDED
.1959c2		08		php		                    PHP
.1959c3		c2 20		rep #$20	                REP #$20        ; set A long
.1959c5		78		sei		                    SEI                         ; Turn off interrupts
.1959c6		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.1959c9		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.1959cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1959cf		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.1959d3		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.1959d5		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.1959d9		28		plp		                    PLP
.1959da		6b		rtl		                    RTL
.1959db						FDC_Motor_On
.1959db		08		php		                    PHP
.1959dc		22 c2 59 19	jsl $1959c2	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.1959e0		e2 20		sep #$20	                SEP #$20        ; set A short
.1959e2		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.1959e6		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.1959e8		d0 1f		bne $195a09	                    BNE done                    ; If so: skip
.1959ea		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.1959ec		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.1959f0		20 75 57	jsr $195775	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.1959f3		90 17		bcc $195a0c	                    BCC time_out
.1959f5		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.1959f8		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.1959fb		22 da 0f 19	jsl $190fda	                    JSL IDELAY
.1959ff		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.195a03		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.195a05		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.195a09		28		plp		done                PLP
.195a0a		38		sec		                    SEC
.195a0b		6b		rtl		                    RTL
.195a0c		28		plp		time_out            PLP                         ; Return a timeout error
.195a0d		18		clc		                    CLC
.195a0e		6b		rtl		                    RTL
.195a0f						FDC_Motor_Off
.195a0f		08		php		                    PHP
.195a10		e2 20		sep #$20	                SEP #$20        ; set A short
.195a12		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.195a14		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.195a18		c2 20		rep #$20	                REP #$20        ; set A long
.195a1a		78		sei		                    SEI                         ; Turn off interrupts
.195a1b		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.195a1e		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.195a22		e2 20		sep #$20	                SEP #$20        ; set A short
.195a24		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.195a28		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.195a2a		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.195a2e		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.195a32		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.195a34		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.195a38		28		plp		                    PLP
.195a39		6b		rtl		                    RTL
.195a3a						FDC_Recalibrate_Command
.195a3a		0b		phd		                    PHD
.195a3b		08		php		                    PHP
.195a3c		48		pha		                PHA             ; begin setdp macro
.195a3d		08		php		                PHP
.195a3e		c2 20		rep #$20	                REP #$20        ; set A long
.195a40		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195a43		5b		tcd		                TCD
.195a44		28		plp		                PLP
.195a45		68		pla		                PLA             ; end setdp macro
.195a46		22 c2 59 19	jsl $1959c2	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.195a4a		e2 20		sep #$20	                SEP #$20        ; set A short
.195a4c		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.195a4e		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195a51		a5 00		lda $0300	                    LDA FDC_DRIVE
.195a53		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.195a56		a9 02		lda #$02	                    LDA #2
.195a58		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.195a5b		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.195a5e		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.195a61		22 12 58 19	jsl $195812	                    JSL FDC_COMMAND             ; Issue the command
.195a65		90 04		bcc $195a6b	                    BCC pass_failure            ; If failure, pass the failure up
.195a67		28		plp		                    PLP
.195a68		2b		pld		                    PLD
.195a69		38		sec		                    SEC
.195a6a		6b		rtl		                    RTL
.195a6b		28		plp		pass_failure        PLP
.195a6c		2b		pld		                    PLD
.195a6d		18		clc		                    CLC
.195a6e		6b		rtl		                    RTL
.195a6f						FDC_Sense_Int_Status
.195a6f		8b		phb		                    PHB
.195a70		0b		phd		                    PHD
.195a71		08		php		                    PHP
.195a72		48		pha		                PHA             ; begin setdbr macro
.195a73		08		php		                PHP
.195a74		e2 20		sep #$20	                SEP #$20        ; set A short
.195a76		a9 00		lda #$00	                LDA #0
.195a78		48		pha		                PHA
.195a79		ab		plb		                PLB
.195a7a		28		plp		                PLP
.195a7b		68		pla		                PLA             ; end setdbr macro
.195a7c		48		pha		                PHA             ; begin setdp macro
.195a7d		08		php		                PHP
.195a7e		c2 20		rep #$20	                REP #$20        ; set A long
.195a80		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195a83		5b		tcd		                TCD
.195a84		28		plp		                PLP
.195a85		68		pla		                PLA             ; end setdp macro
.195a86		c2 30		rep #$30	                REP #$30        ; set A&X long
.195a88		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.195a8b		22 cd 0f 19	jsl $190fcd	                    JSL ILOOP_MS
.195a8f		e2 20		sep #$20	                SEP #$20        ; set A short
.195a91		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.195a93		a9 ff		lda #$ff	                    LDA #$FF
.195a95		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.195a97		20 a3 57	jsr $1957a3	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.195a9a		90 30		bcc $195acc	                    BCC time_out                        ; If there was a time out, raise an error
.195a9c		20 75 57	jsr $195775	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195a9f		90 2b		bcc $195acc	                    BCC time_out                        ; If there was a time out, raise an error
.195aa1		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.195aa3		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195aa7		20 d1 57	jsr $1957d1	                    JSR FDC_Can_Read_Data
.195aaa		90 20		bcc $195acc	                    BCC time_out                        ; If there was a time out, raise an error
.195aac		20 75 57	jsr $195775	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195aaf		90 1b		bcc $195acc	                    BCC time_out                        ; If there was a time out, raise an error
.195ab1		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.195ab5		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.195ab7		20 75 57	jsr $195775	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195aba		90 10		bcc $195acc	                    BCC time_out                        ; If there was a time out, raise an error
.195abc		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.195ac0		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.195ac2		e2 20		sep #$20	                SEP #$20        ; set A short
.195ac4		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.195ac7		28		plp		                    PLP
.195ac8		2b		pld		                    PLD
.195ac9		ab		plb		                    PLB
.195aca		38		sec		                    SEC
.195acb		6b		rtl		                    RTL
.195acc						time_out
.195acc		e2 20		sep #$20	                SEP #$20        ; set A short
.195ace		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.195ad0		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195ad3		28		plp		                    PLP
.195ad4		2b		pld		                    PLD
.195ad5		ab		plb		                    PLB
.195ad6		18		clc		                    CLC
.195ad7		6b		rtl		                    RTL
.195ad8						FDC_Specify_Command
.195ad8		8b		phb		                    PHB
.195ad9		0b		phd		                    PHD
.195ada		08		php		                    PHP
.195adb		48		pha		                PHA             ; begin setdbr macro
.195adc		08		php		                PHP
.195add		e2 20		sep #$20	                SEP #$20        ; set A short
.195adf		a9 00		lda #$00	                LDA #0
.195ae1		48		pha		                PHA
.195ae2		ab		plb		                PLB
.195ae3		28		plp		                PLP
.195ae4		68		pla		                PLA             ; end setdbr macro
.195ae5		48		pha		                PHA             ; begin setdp macro
.195ae6		08		php		                PHP
.195ae7		c2 20		rep #$20	                REP #$20        ; set A long
.195ae9		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195aec		5b		tcd		                TCD
.195aed		28		plp		                PLP
.195aee		68		pla		                PLA             ; end setdp macro
.195aef		c2 30		rep #$30	                REP #$30        ; set A&X long
.195af1		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.195af4		22 cd 0f 19	jsl $190fcd	                    JSL ILOOP_MS
.195af8		e2 20		sep #$20	                SEP #$20        ; set A short
.195afa		20 a3 57	jsr $1957a3	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195afd		90 26		bcc $195b25	                    BCC time_out            ; If there was a time out, raise an error
.195aff		20 75 57	jsr $195775	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195b02		90 21		bcc $195b25	                    BCC time_out            ; If there was a time out, raise an error
.195b04		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.195b06		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195b0a		20 75 57	jsr $195775	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195b0d		90 16		bcc $195b25	                    BCC time_out            ; If there was a time out, raise an error
.195b0f		a9 cf		lda #$cf	                    LDA #$CF
.195b11		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195b15		20 75 57	jsr $195775	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195b18		90 0b		bcc $195b25	                    BCC time_out            ; If there was a time out, raise an error
.195b1a		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.195b1c		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195b20		28		plp		                    PLP
.195b21		2b		pld		                    PLD
.195b22		ab		plb		                    PLB
.195b23		38		sec		                    SEC
.195b24		6b		rtl		                    RTL
.195b25						time_out
.195b25		e2 20		sep #$20	                SEP #$20        ; set A short
.195b27		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.195b29		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195b2c		28		plp		                    PLP
.195b2d		2b		pld		                    PLD
.195b2e		ab		plb		                    PLB
.195b2f		18		clc		                    CLC
.195b30		6b		rtl		                    RTL
.195b31						FDC_Configure_Command
.195b31		8b		phb		                    PHB
.195b32		0b		phd		                    PHD
.195b33		08		php		                    PHP
.195b34		48		pha		                PHA             ; begin setdbr macro
.195b35		08		php		                PHP
.195b36		e2 20		sep #$20	                SEP #$20        ; set A short
.195b38		a9 00		lda #$00	                LDA #0
.195b3a		48		pha		                PHA
.195b3b		ab		plb		                PLB
.195b3c		28		plp		                PLP
.195b3d		68		pla		                PLA             ; end setdbr macro
.195b3e		48		pha		                PHA             ; begin setdp macro
.195b3f		08		php		                PHP
.195b40		c2 20		rep #$20	                REP #$20        ; set A long
.195b42		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195b45		5b		tcd		                TCD
.195b46		28		plp		                PLP
.195b47		68		pla		                PLA             ; end setdp macro
.195b48		c2 30		rep #$30	                REP #$30        ; set A&X long
.195b4a		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.195b4d		22 cd 0f 19	jsl $190fcd	                    JSL ILOOP_MS
.195b51		e2 20		sep #$20	                SEP #$20        ; set A short
.195b53		20 a3 57	jsr $1957a3	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195b56		90 36		bcc $195b8e	                    BCC time_out            ; If there was a time out, raise an error
.195b58		20 75 57	jsr $195775	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195b5b		90 31		bcc $195b8e	                    BCC time_out            ; If there was a time out, raise an error
.195b5d		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.195b5f		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195b63		20 75 57	jsr $195775	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195b66		90 26		bcc $195b8e	                    BCC time_out            ; If there was a time out, raise an error
.195b68		a9 00		lda #$00	                    LDA #$00
.195b6a		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195b6e		20 75 57	jsr $195775	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195b71		90 1b		bcc $195b8e	                    BCC time_out            ; If there was a time out, raise an error
.195b73		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.195b75		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195b79		20 75 57	jsr $195775	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195b7c		90 10		bcc $195b8e	                    BCC time_out            ; If there was a time out, raise an error
.195b7e		a9 00		lda #$00	                    LDA #$00
.195b80		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195b84		20 a3 57	jsr $1957a3	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195b87		90 05		bcc $195b8e	                    BCC time_out            ; If there was a time out, raise an error
.195b89		28		plp		                    PLP
.195b8a		2b		pld		                    PLD
.195b8b		ab		plb		                    PLB
.195b8c		38		sec		                    SEC
.195b8d		6b		rtl		                    RTL
.195b8e						time_out
.195b8e		e2 20		sep #$20	                SEP #$20        ; set A short
.195b90		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.195b92		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195b95		28		plp		                    PLP
.195b96		2b		pld		                    PLD
.195b97		ab		plb		                    PLB
.195b98		18		clc		                    CLC
.195b99		6b		rtl		                    RTL
.195b9a						FDC_Read_Sector
.195b9a		8b		phb		                    PHB
.195b9b		0b		phd		                    PHD
.195b9c		08		php		                    PHP
.195b9d		48		pha		                PHA             ; begin setdbr macro
.195b9e		08		php		                PHP
.195b9f		e2 20		sep #$20	                SEP #$20        ; set A short
.195ba1		a9 00		lda #$00	                LDA #0
.195ba3		48		pha		                PHA
.195ba4		ab		plb		                PLB
.195ba5		28		plp		                PLP
.195ba6		68		pla		                PLA             ; end setdbr macro
.195ba7		48		pha		                PHA             ; begin setdp macro
.195ba8		08		php		                PHP
.195ba9		c2 20		rep #$20	                REP #$20        ; set A long
.195bab		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195bae		5b		tcd		                TCD
.195baf		28		plp		                PLP
.195bb0		68		pla		                PLA             ; end setdp macro
.195bb1		22 c2 59 19	jsl $1959c2	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.195bb5		e2 20		sep #$20	                SEP #$20        ; set A short
.195bb7		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.195bb9		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.195bbb		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195bbe		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.195bc0		29 01		and #$01	                    AND #$01
.195bc2		0a		asl a		                    ASL A
.195bc3		0a		asl a		                    ASL A
.195bc4		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.195bc6		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.195bc9		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.195bcb		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.195bce		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.195bd0		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.195bd3		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.195bd5		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.195bd8		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.195bda		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.195bdd		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.195bdf		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.195be2		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.195be4		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.195be7		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.195be9		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.195bec		a9 09		lda #$09	                    LDA #9
.195bee		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.195bf1		a9 01		lda #$01	                    LDA #1
.195bf3		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.195bf6		a9 07		lda #$07	                    LDA #7
.195bf8		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.195bfb		22 12 58 19	jsl $195812	command             JSL FDC_COMMAND                     ; Issue the command
.195bff		08		php		                    PHP
.195c00		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.195c03		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.195c05		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.195c08		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.195c0a		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.195c0d		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.195c0f		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.195c12		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.195c14		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.195c17		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.195c19		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.195c1c		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.195c1e		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.195c21		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.195c23		28		plp		                    PLP
.195c24		90 04		bcc $195c2a	                    BCC pass_failure
.195c26		28		plp		done                PLP
.195c27		2b		pld		                    PLD
.195c28		ab		plb		                    PLB
.195c29		6b		rtl		                    RTL
.195c2a		28		plp		pass_failure        PLP
.195c2b		2b		pld		                    PLD
.195c2c		ab		plb		                    PLB
.195c2d		18		clc		                    CLC
.195c2e		6b		rtl		                    RTL
.195c2f						FDC_Write_Sector
.195c2f		8b		phb		                    PHB
.195c30		0b		phd		                    PHD
.195c31		08		php		                    PHP
.195c32		48		pha		                PHA             ; begin setdbr macro
.195c33		08		php		                PHP
.195c34		e2 20		sep #$20	                SEP #$20        ; set A short
.195c36		a9 00		lda #$00	                LDA #0
.195c38		48		pha		                PHA
.195c39		ab		plb		                PLB
.195c3a		28		plp		                PLP
.195c3b		68		pla		                PLA             ; end setdbr macro
.195c3c		48		pha		                PHA             ; begin setdp macro
.195c3d		08		php		                PHP
.195c3e		c2 20		rep #$20	                REP #$20        ; set A long
.195c40		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195c43		5b		tcd		                TCD
.195c44		28		plp		                PLP
.195c45		68		pla		                PLA             ; end setdp macro
.195c46		e2 20		sep #$20	                SEP #$20        ; set A short
.195c48		22 c2 59 19	jsl $1959c2	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.195c4c		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.195c4e		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.195c50		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195c53		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.195c55		29 01		and #$01	                    AND #$01
.195c57		0a		asl a		                    ASL A
.195c58		0a		asl a		                    ASL A
.195c59		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.195c5b		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.195c5e		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.195c60		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.195c63		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.195c65		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.195c68		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.195c6a		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.195c6d		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.195c6f		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.195c72		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.195c74		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.195c77		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.195c79		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.195c7c		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.195c7e		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.195c81		a9 09		lda #$09	                    LDA #9
.195c83		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.195c86		a9 ff		lda #$ff	                    LDA #$FF
.195c88		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.195c8b		a9 07		lda #$07	                    LDA #7
.195c8d		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.195c90		22 12 58 19	jsl $195812	command             JSL FDC_COMMAND                     ; Issue the command
.195c94		08		php		                    PHP
.195c95		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.195c98		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.195c9a		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.195c9d		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.195c9f		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.195ca2		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.195ca4		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.195ca7		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.195ca9		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.195cac		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.195cae		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.195cb1		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.195cb3		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.195cb6		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.195cb8		28		plp		check_status        PLP
.195cb9		90 04		bcc $195cbf	                    BCC pass_failure
.195cbb		28		plp		done                PLP
.195cbc		2b		pld		                    PLD
.195cbd		ab		plb		                    PLB
.195cbe		6b		rtl		                    RTL
.195cbf		28		plp		pass_failure        PLP
.195cc0		2b		pld		                    PLD
.195cc1		ab		plb		                    PLB
.195cc2		18		clc		                    CLC
.195cc3		6b		rtl		                    RTL
.195cc4						DIVIDE32
.195cc4		da		phx		                    PHX
.195cc5		5a		phy		                    PHY
.195cc6		0b		phd		                    PHD
.195cc7		08		php		                    PHP
.195cc8		48		pha		                PHA             ; begin setdp macro
.195cc9		08		php		                PHP
.195cca		c2 20		rep #$20	                REP #$20        ; set A long
.195ccc		a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.195ccf		5b		tcd		                TCD
.195cd0		28		plp		                PLP
.195cd1		68		pla		                PLA             ; end setdp macro
.195cd2		c2 30		rep #$30	                REP #$30        ; set A&X long
.195cd4		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.195cd6		64 0a		stz $0316	                    STZ REMAINDER+2
.195cd8		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.195cdb		06 00		asl $030c	loop                ASL DIVIDEND
.195cdd		26 02		rol $030e	                    ROL DIVIDEND+2
.195cdf		26 08		rol $0314	                    ROL REMAINDER
.195ce1		26 0a		rol $0316	                    ROL REMAINDER+2
.195ce3		a5 08		lda $0314	                    LDA REMAINDER
.195ce5		38		sec		                    SEC
.195ce6		e5 04		sbc $0310	                    SBC DIVISOR
.195ce8		a8		tay		                    TAY
.195ce9		a5 0a		lda $0316	                    LDA REMAINDER+2
.195ceb		e5 06		sbc $0312	                    SBC DIVISOR+2
.195ced		90 06		bcc $195cf5	                    BCC skip
.195cef		85 0a		sta $0316	                    STA REMAINDER+2
.195cf1		84 08		sty $0314	                    STY REMAINDER
.195cf3		e6 00		inc $030c	                    INC DIVIDEND
.195cf5		ca		dex		skip                DEX
.195cf6		d0 e3		bne $195cdb	                    BNE loop
.195cf8		28		plp		                    PLP
.195cf9		2b		pld		                    PLD
.195cfa		7a		ply		                    PLY
.195cfb		fa		plx		                    PLX
.195cfc		60		rts		                    RTS
.195cfd						LBA2CHS
.195cfd		8b		phb		                    PHB
.195cfe		0b		phd		                    PHD
.195cff		08		php		                    PHP
.195d00		48		pha		                PHA             ; begin setdbr macro
.195d01		08		php		                PHP
.195d02		e2 20		sep #$20	                SEP #$20        ; set A short
.195d04		a9 00		lda #$00	                LDA #0
.195d06		48		pha		                PHA
.195d07		ab		plb		                PLB
.195d08		28		plp		                PLP
.195d09		68		pla		                PLA             ; end setdbr macro
.195d0a		48		pha		                PHA             ; begin setdp macro
.195d0b		08		php		                PHP
.195d0c		c2 20		rep #$20	                REP #$20        ; set A long
.195d0e		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195d11		5b		tcd		                TCD
.195d12		28		plp		                PLP
.195d13		68		pla		                PLA             ; end setdp macro
.195d14		c2 30		rep #$30	                REP #$30        ; set A&X long
.195d16		a5 22		lda $0322	                    LDA BIOS_LBA
.195d18		85 0c		sta $030c	                    STA DIVIDEND
.195d1a		a5 24		lda $0324	                    LDA BIOS_LBA+2
.195d1c		85 0e		sta $030e	                    STA DIVIDEND+2
.195d1e		a9 24 00	lda #$0024	                    LDA #36
.195d21		85 10		sta $0310	                    STA DIVISOR
.195d23		64 12		stz $0312	                    STZ DIVISOR+2
.195d25		20 c4 5c	jsr $195cc4	                    JSR DIVIDE32
.195d28		e2 20		sep #$20	                SEP #$20        ; set A short
.195d2a		a5 0c		lda $030c	                    LDA DIVIDEND
.195d2c		85 02		sta $0302	                    STA FDC_CYLINDER
.195d2e		c2 20		rep #$20	                REP #$20        ; set A long
.195d30		a5 14		lda $0314	                    LDA REMAINDER
.195d32		85 0c		sta $030c	                    STA DIVIDEND
.195d34		a5 16		lda $0316	                    LDA REMAINDER+2
.195d36		85 0e		sta $030e	                    STA DIVIDEND+2
.195d38		a9 12 00	lda #$0012	                    LDA #18
.195d3b		85 10		sta $0310	                    STA DIVISOR
.195d3d		64 12		stz $0312	                    STZ DIVISOR+2
.195d3f		20 c4 5c	jsr $195cc4	                    JSR DIVIDE32
.195d42		e2 20		sep #$20	                SEP #$20        ; set A short
.195d44		a5 0c		lda $030c	                    LDA DIVIDEND
.195d46		29 01		and #$01	                    AND #$01
.195d48		85 01		sta $0301	                    STA FDC_HEAD
.195d4a		a5 14		lda $0314	                    LDA REMAINDER
.195d4c		1a		inc a		                    INC A
.195d4d		85 03		sta $0303	                    STA FDC_SECTOR
.195d4f		28		plp		                    PLP
.195d50		2b		pld		                    PLD
.195d51		ab		plb		                    PLB
.195d52		6b		rtl		                    RTL
.195d53						FDC_GETBLOCK
.195d53		8b		phb		                    PHB
.195d54		0b		phd		                    PHD
.195d55		08		php		                    PHP
.195d56		48		pha		                PHA             ; begin setdbr macro
.195d57		08		php		                PHP
.195d58		e2 20		sep #$20	                SEP #$20        ; set A short
.195d5a		a9 00		lda #$00	                LDA #0
.195d5c		48		pha		                PHA
.195d5d		ab		plb		                PLB
.195d5e		28		plp		                PLP
.195d5f		68		pla		                PLA             ; end setdbr macro
.195d60		48		pha		                PHA             ; begin setdp macro
.195d61		08		php		                PHP
.195d62		c2 20		rep #$20	                REP #$20        ; set A long
.195d64		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195d67		5b		tcd		                TCD
.195d68		28		plp		                PLP
.195d69		68		pla		                PLA             ; end setdp macro
.195d6a		e2 20		sep #$20	                SEP #$20        ; set A short
.195d6c		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.195d6e		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.195d71		c2 30		rep #$30	                REP #$30        ; set A&X long
.195d73		22 fd 5c 19	jsl $195cfd	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.195d77		e2 20		sep #$20	                SEP #$20        ; set A short
.195d79		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.195d7b		f0 29		beq $195da6	                    BEQ read_failure
.195d7d						try_read
.195d7d		c2 20		rep #$20	                REP #$20        ; set A long
.195d7f		22 9a 5b 19	jsl $195b9a	                    JSL FDC_Read_Sector         ; Read the sector
.195d83		90 14		bcc $195d99	                    BCC retry
.195d85		e2 20		sep #$20	                SEP #$20        ; set A short
.195d87		a5 06		lda $0306	                    LDA FDC_ST0
.195d89		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.195d8b		d0 19		bne $195da6	                    BNE read_failure
.195d8d						ret_success
.195d8d		e2 20		sep #$20	                SEP #$20        ; set A short
.195d8f		a9 00		lda #$00	                    LDA #0
.195d91		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195d94		28		plp		                    PLP
.195d95		2b		pld		                    PLD
.195d96		ab		plb		                    PLB
.195d97		38		sec		                    SEC
.195d98		6b		rtl		                    RTL
.195d99						retry
.195d99		e2 20		sep #$20	                SEP #$20        ; set A short
.195d9b		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.195d9e		30 13		bmi $195db3	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.195da0		22 5f 59 19	jsl $19595f	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.195da4		80 d7		bra $195d7d	                    BRA try_read                ; And try the read again
.195da6						read_failure
.195da6		e2 20		sep #$20	                SEP #$20        ; set A short
.195da8		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.195daa		80 04		bra $195db0	                    BRA ret_failure
.195dac						seek_failure
.195dac		e2 20		sep #$20	                SEP #$20        ; set A short
.195dae		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.195db0		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.195db3		28		plp		pass_failure        PLP
.195db4		2b		pld		                    PLD
.195db5		ab		plb		                    PLB
.195db6		18		clc		                    CLC
.195db7		6b		rtl		                    RTL
.195db8						FDC_PUTBLOCK
.195db8		8b		phb		                    PHB
.195db9		0b		phd		                    PHD
.195dba		08		php		                    PHP
.195dbb		48		pha		                PHA             ; begin setdbr macro
.195dbc		08		php		                PHP
.195dbd		e2 20		sep #$20	                SEP #$20        ; set A short
.195dbf		a9 00		lda #$00	                LDA #0
.195dc1		48		pha		                PHA
.195dc2		ab		plb		                PLB
.195dc3		28		plp		                PLP
.195dc4		68		pla		                PLA             ; end setdbr macro
.195dc5		48		pha		                PHA             ; begin setdp macro
.195dc6		08		php		                PHP
.195dc7		c2 20		rep #$20	                REP #$20        ; set A long
.195dc9		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195dcc		5b		tcd		                TCD
.195dcd		28		plp		                PLP
.195dce		68		pla		                PLA             ; end setdp macro
.195dcf		e2 20		sep #$20	                SEP #$20        ; set A short
.195dd1		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.195dd3		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.195dd6		c2 30		rep #$30	                REP #$30        ; set A&X long
.195dd8		22 fd 5c 19	jsl $195cfd	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.195ddc		22 2f 5c 19	jsl $195c2f	retry               JSL FDC_Write_Sector        ; Write the sector
.195de0		b0 03		bcs $195de5	                    BCS chk_st0
.195de2		82 28 00	brl $195e0d	                    BRL attempt_retry
.195de5						chk_st0
.195de5		e2 20		sep #$20	                SEP #$20        ; set A short
.195de7		a5 06		lda $0306	                    LDA FDC_ST0
.195de9		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.195deb		d0 0c		bne $195df9	                    BNE write_failure
.195ded						ret_success
.195ded		e2 20		sep #$20	                SEP #$20        ; set A short
.195def		a9 00		lda #$00	                    LDA #0
.195df1		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195df4		28		plp		                    PLP
.195df5		2b		pld		                    PLD
.195df6		ab		plb		                    PLB
.195df7		38		sec		                    SEC
.195df8		6b		rtl		                    RTL
.195df9						write_failure
.195df9		e2 20		sep #$20	                SEP #$20        ; set A short
.195dfb		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.195dfd		89 02		bit #$02	                    BIT #FDC_ST1_NW
.195dff		f0 04		beq $195e05	                    BEQ generic_err
.195e01		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.195e03		80 17		bra $195e1c	                    BRA ret_failure
.195e05		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.195e07		d0 e4		bne $195ded	                    BNE ret_success
.195e09		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.195e0b		d0 e0		bne $195ded	                    BNE ret_success
.195e0d						attempt_retry
.195e0d		e2 20		sep #$20	                SEP #$20        ; set A short
.195e0f		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.195e12		d0 c8		bne $195ddc	                    BNE retry                           ; And retry unless we have none left
.195e14		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.195e16		80 04		bra $195e1c	                    BRA ret_failure
.195e18						seek_failure
.195e18		e2 20		sep #$20	                SEP #$20        ; set A short
.195e1a		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.195e1c						ret_failure
.195e1c		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195e1f		28		plp		pass_failure        PLP
.195e20		2b		pld		                    PLD
.195e21		ab		plb		                    PLB
.195e22		18		clc		                    CLC
.195e23		6b		rtl		                    RTL
.195e24						FDC_MOUNT
.195e24		8b		phb		                    PHB
.195e25		0b		phd		                    PHD
.195e26		08		php		                    PHP
.195e27		48		pha		                PHA             ; begin setdbr macro
.195e28		08		php		                PHP
.195e29		e2 20		sep #$20	                SEP #$20        ; set A short
.195e2b		a9 00		lda #$00	                LDA #0
.195e2d		48		pha		                PHA
.195e2e		ab		plb		                PLB
.195e2f		28		plp		                PLP
.195e30		68		pla		                PLA             ; end setdbr macro
.195e31		48		pha		                PHA             ; begin setdp macro
.195e32		08		php		                PHP
.195e33		c2 20		rep #$20	                REP #$20        ; set A long
.195e35		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195e38		5b		tcd		                TCD
.195e39		28		plp		                PLP
.195e3a		68		pla		                PLA             ; end setdp macro
.195e3b		22 5f 59 19	jsl $19595f	                    JSL FDC_INIT
.195e3f		e2 20		sep #$20	                SEP #$20        ; set A short
.195e41		c2 10		rep #$10	                REP #$10        ; set X long
.195e43		a9 00		lda #$00	                    LDA #0
.195e45		a2 00 00	ldx #$0000	                    LDX #0
.195e48		9f 00 a3 18	sta $18a300,x	zero_loop           STA DOS_SECTOR,X
.195e4c		e8		inx		                    INX
.195e4d		e0 00 02	cpx #$0200	                    CPX #512
.195e50		d0 f6		bne $195e48	                    BNE zero_loop
.195e52		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.195e54		85 00		sta $0300	                    STA FDC_DRIVE
.195e56		22 db 59 19	jsl $1959db	                    JSL FDC_Motor_On                        ; Turn the motor on
.195e5a		c2 30		rep #$30	                REP #$30        ; set A&X long
.195e5c		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.195e5f		85 22		sta $0322	                    STA BIOS_LBA
.195e61		85 24		sta $0324	                    STA BIOS_LBA+2
.195e63		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.195e66		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.195e68		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.195e6b		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.195e6d		22 53 5d 19	jsl $195d53	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.195e71		b0 03		bcs $195e76	                    BCS parse_boot                          ; If ok: start parsing the boot record
.195e73		82 d3 00	brl $195f49	                    BRL pass_failure                        ; Pass the error up the chain
.195e76						parse_boot
.195e76		e2 20		sep #$20	                SEP #$20        ; set A short
.195e78		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.195e7a		8f 01 a0 18	sta $18a001	                    STA @l FILE_SYSTEM
.195e7e		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.195e80		8f 02 a0 18	sta $18a002	                    STA @l PARTITION
.195e84		e2 20		sep #$20	                SEP #$20        ; set A short
.195e86		af 0d a3 18	lda $18a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.195e8a		8f 03 a0 18	sta $18a003	                    STA @l SECTORS_PER_CLUSTER
.195e8e		c2 20		rep #$20	                REP #$20        ; set A long
.195e90		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.195e93		8f 04 a0 18	sta $18a004	                    STA @l FIRSTSECTOR
.195e97		8f 06 a0 18	sta $18a006	                    STA @l FIRSTSECTOR+2
.195e9b		af 16 a3 18	lda $18a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.195e9f		8f 10 a0 18	sta $18a010	                    STA @l SEC_PER_FAT
.195ea3		a9 00 00	lda #$0000	                    LDA #0
.195ea6		8f 12 a0 18	sta $18a012	                    STA @l SEC_PER_FAT+2
.195eaa		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.195ead		8f 14 a0 18	sta $18a014	                    STA @l FAT_BEGIN_LBA
.195eb1		18		clc		                    CLC
.195eb2		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.195eb6		8f 18 a0 18	sta $18a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.195eba		a9 00 00	lda #$0000	                    LDA #0
.195ebd		8f 16 a0 18	sta $18a016	                    STA @l FAT_BEGIN_LBA+2
.195ec1		8f 1a a0 18	sta $18a01a	                    STA @L FAT2_BEGIN_LBA+2
.195ec5		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.195ec6		af 18 a0 18	lda $18a018	                    LDA @l FAT2_BEGIN_LBA
.195eca		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.195ece		8f 20 a0 18	sta $18a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.195ed2		a9 00 00	lda #$0000	                    LDA #0
.195ed5		8f 22 a0 18	sta $18a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.195ed9		af 11 a3 18	lda $18a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.195edd		8f 24 a0 18	sta $18a024	                    STA @l ROOT_DIR_MAX_ENTRY
.195ee1		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.195ee2		4a		lsr a		                    LSR A
.195ee3		4a		lsr a		                    LSR A
.195ee4		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.195ee5		18		clc		                    CLC
.195ee6		6f 20 a0 18	adc $18a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.195eea		8f 1c a0 18	sta $18a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.195eee		a9 00 00	lda #$0000	                    LDA #0
.195ef1		8f 1e a0 18	sta $18a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.195ef5		af 13 a3 18	lda $18a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.195ef9		8f 08 a0 18	sta $18a008	                    STA @l SECTORCOUNT
.195efd		a9 00 00	lda #$0000	                    LDA #0
.195f00		8f 0a a0 18	sta $18a00a	                    STA @l SECTORCOUNT+2
.195f04		af 0e a3 18	lda $18a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.195f08		8f 0c a0 18	sta $18a00c	                    STA @l NUM_RSRV_SEC
.195f0c		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.195f0f		8f 0e a0 18	sta $18a00e	                    STA @l CLUSTER_SIZE
.195f13		e2 20		sep #$20	                SEP #$20        ; set A short
.195f15		af 26 a3 18	lda $18a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.195f19		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.195f1b		80 14		bra $195f31	                    BRA no_volume_id                        ; No: there is no volume ID
.195f1d						is_extended
.195f1d		c2 20		rep #$20	                REP #$20        ; set A long
.195f1f		af 27 a3 18	lda $18a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.195f23		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.195f27		af 29 a3 18	lda $18a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.195f2b		8f 28 a0 18	sta $18a028	                    STA @l VOLUME_ID+2
.195f2f		80 0d		bra $195f3e	                    BRA ret_success
.195f31						no_volume_id
.195f31		c2 20		rep #$20	                REP #$20        ; set A long
.195f33		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.195f36		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.195f3a		8f 28 a0 18	sta $18a028	                    STA @L VOLUME_ID+2
.195f3e						ret_success
.195f3e		e2 20		sep #$20	                SEP #$20        ; set A short
.195f40		a9 00		lda #$00	                    LDA #0
.195f42		85 20		sta $0320	                    STA BIOS_STATUS
.195f44		28		plp		                    PLP
.195f45		2b		pld		                    PLD
.195f46		ab		plb		                    PLB
.195f47		38		sec		                    SEC
.195f48		6b		rtl		                    RTL
.195f49		28		plp		pass_failure        PLP
.195f4a		2b		pld		                    PLD
.195f4b		ab		plb		                    PLB
.195f4c		18		clc		                    CLC
.195f4d		6b		rtl		                    RTL
.195f4e						FDC_CMDBLOCK
.195f4e		8b		phb		                    PHB
.195f4f		0b		phd		                    PHD
.195f50		08		php		                    PHP
.195f51		48		pha		                PHA             ; begin setdbr macro
.195f52		08		php		                PHP
.195f53		e2 20		sep #$20	                SEP #$20        ; set A short
.195f55		a9 00		lda #$00	                LDA #0
.195f57		48		pha		                PHA
.195f58		ab		plb		                PLB
.195f59		28		plp		                PLP
.195f5a		68		pla		                PLA             ; end setdbr macro
.195f5b		48		pha		                PHA             ; begin setdp macro
.195f5c		08		php		                PHP
.195f5d		c2 20		rep #$20	                REP #$20        ; set A long
.195f5f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195f62		5b		tcd		                TCD
.195f63		28		plp		                PLP
.195f64		68		pla		                PLA             ; end setdp macro
.195f65		e2 30		sep #$30	                SEP #$30        ; set A&X short
.195f67		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.195f69		f0 0f		beq $195f7a	                    BEQ motor_on
.195f6b		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.195f6d		f0 11		beq $195f80	                    BEQ motor_off
.195f6f		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.195f71		f0 13		beq $195f86	                    BEQ recalibrate
.195f73		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.195f75		28		plp		                    PLP
.195f76		2b		pld		                    PLD
.195f77		ab		plb		                    PLB
.195f78		38		sec		                    SEC
.195f79		6b		rtl		                    RTL
.195f7a		22 db 59 19	jsl $1959db	motor_on            JSL FDC_Motor_On
.195f7e		80 f3		bra $195f73	                    BRA ret_success
.195f80		22 0f 5a 19	jsl $195a0f	motor_off           JSL FDC_Motor_Off
.195f84		80 ed		bra $195f73	                    BRA ret_success
.195f86		22 3a 5a 19	jsl $195a3a	recalibrate         JSL FDC_Recalibrate_Command
.195f8a		b0 e7		bcs $195f73	                    BCS ret_success
.195f8c		28		plp		pass_failure        PLP
.195f8d		2b		pld		                    PLD
.195f8e		ab		plb		                    PLB
.195f8f		18		clc		                    CLC
.195f90		6b		rtl		                    RTL
.195f91						FDC_TIME_HANDLE
.195f91		08		php		                    PHP
.195f92		e2 20		sep #$20	                SEP #$20        ; set A short
.195f94		af 4e a0 18	lda $18a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.195f98		d0 06		bne $195fa0	                    BNE dec_motor                   ; If not zero: decrement the timer
.195f9a		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.195f9e		f0 28		beq $195fc8	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.195fa0		af 4e a0 18	lda $18a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.195fa4		3a		dec a		                    DEC A
.195fa5		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.195fa9		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.195fab		d0 0b		bne $195fb8	                    BNE chk_motor_end               ; No: check to see if we're a the end
.195fad		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.195fb1		3a		dec a		                    DEC A
.195fb2		8f 4f a0 18	sta $18a04f	                    STA @l FDC_MOTOR_TIMER+1
.195fb6		80 10		bra $195fc8	                    BRA sof_timeout                 ; And move on to the next timer
.195fb8		af 4e a0 18	lda $18a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.195fbc		d0 0a		bne $195fc8	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.195fbe		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1
.195fc2		d0 04		bne $195fc8	                    BNE sof_timeout
.195fc4		22 0f 5a 19	jsl $195a0f	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.195fc8						sof_timeout
.195fc8		e2 20		sep #$20	                SEP #$20        ; set A short
.195fca		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.195fce		f0 11		beq $195fe1	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.195fd0		3a		dec a		                    DEC A                           ; Count down one tick
.195fd1		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.195fd5		d0 0a		bne $195fe1	                    BNE sof_int_done                ; If not 0, we're done
.195fd7		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.195fdb		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.195fdd		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.195fe1		28		plp		sof_int_done        PLP
.195fe2		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.195fe3						FDC_VBR_BEGIN
>195fe3		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>195fe6		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>195fee		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>195ff0		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>195ff1		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>195ff3		02				num_fat             .byte 2                 ; Number of FATs
>195ff4		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>195ff6		40 0b				total_sectors       .word 2880              ; Total sectors
>195ff8		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>195ff9		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>195ffb		12 00				sec_per_track       .word 18                ; Sectors per track
>195ffd		02 00				num_head            .word 2                 ; Number of heads
>195fff		00 00 00 00			ignore2             .dword 0
>196003		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>196007		00 00				ignore3             .word 0
>196009		29				boot_signature      .byte $29
>19600a		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>19600e		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>196016		20 20 20
>196019		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.196021		80 40		bra $196063	                    BRA vbr_start
>196023						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.196063						vbr_start
.196063		c2 20		rep #$20	                REP #$20        ; set A long
.196065		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.196068		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.19606c		a9 18 00	lda #$0018	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.19606f		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.196073		22 24 11 00	jsl $001124	                    JSL F_RUN               ; And try to execute the binary file
.196077		b0 0c		bcs $196085	                    BCS lock                ; If it returned success... lock up... I guess?
.196079						error
.196079		e2 20		sep #$20	                SEP #$20        ; set A short
.19607b		4b		phk		                    PHK                     ; Otherwise, print an error message
.19607c		ab		plb		                    PLB
.19607d		62 08 00	per $196088	                    PER message
.196080		fa		plx		                    PLX
.196081		22 1c 10 00	jsl $00101c	                    JSL PUTS
.196085		ea		nop		lock                NOP                     ; And lock up
.196086		80 fd		bra $196085	                    BRA lock
>196088		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>196090		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>1960a0		65 20 62 69 6e 61 72 79 2e 0d 00
.1960ab						FDC_VBR_END

;******  Return to file: src/kernel.asm


;******  Processing file: src/Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.1960ab						IDE_INIT
.1960ab		e2 20		sep #$20	                SEP #$20        ; set A short
.1960ad		a9 00		lda #$00	              LDA #$00
.1960af		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.1960b3		20 d4 60	jsr $1960d4	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.1960b6		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.1960b8		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.1960bc		a9 01		lda #$01	              LDA #$01
.1960be		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.1960c2		a9 00		lda #$00	              LDA #$00
.1960c4		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.1960c8		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.1960cc		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.1960d0		20 e3 60	jsr $1960e3	              JSR IDE_DRV_READY_NOTBUSY
.1960d3		6b		rtl		              RTL
.1960d4						IDE_DRIVE_BSY
.1960d4		08		php		                PHP
.1960d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1960d7		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.1960db		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.1960dd		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.1960df		f0 f6		beq $1960d7	                BEQ loop
.1960e1		28		plp		                PLP
.1960e2		60		rts		                RTS
.1960e3						IDE_DRV_READY_NOTBUSY
.1960e3		08		php		                PHP
.1960e4		e2 20		sep #$20	                SEP #$20        ; set A short
.1960e6		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.1960ea		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.1960ec		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.1960ee		d0 f6		bne $1960e6	                BNE loop                            ; No: keep waiting
.1960f0		28		plp		ret_success     PLP                                 ; Return success
.1960f1		38		sec		                SEC
.1960f2		60		rts		                RTS
.1960f3		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.1960f7		28		plp		                PLP                                 ; Return failure
.1960f8		18		clc		                CLC
.1960f9		60		rts		                RTS
.1960fa						IDE_GETBLOCK
.1960fa		5a		phy		                PHY
.1960fb		8b		phb		                PHB
.1960fc		0b		phd		                PHD
.1960fd		08		php		                PHP
.1960fe		48		pha		                PHA             ; begin setdbr macro
.1960ff		08		php		                PHP
.196100		e2 20		sep #$20	                SEP #$20        ; set A short
.196102		a9 00		lda #$00	                LDA #0
.196104		48		pha		                PHA
.196105		ab		plb		                PLB
.196106		28		plp		                PLP
.196107		68		pla		                PLA             ; end setdbr macro
.196108		48		pha		                PHA             ; begin setdp macro
.196109		08		php		                PHP
.19610a		c2 20		rep #$20	                REP #$20        ; set A long
.19610c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19610f		5b		tcd		                TCD
.196110		28		plp		                PLP
.196111		68		pla		                PLA             ; end setdp macro
.196112		e2 20		sep #$20	                SEP #$20        ; set A short
.196114		20 e3 60	jsr $1960e3	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.196117		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.196119		29 07		and #$07	                AND #$07
.19611b		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.19611d		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.196121		20 e3 60	jsr $1960e3	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.196124		e2 20		sep #$20	                SEP #$20        ; set A short
.196126		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.196128		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.19612c		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.19612e		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196132		a5 03		lda $0323	                LDA BIOS_LBA+1
.196134		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196138		a5 04		lda $0324	                LDA BIOS_LBA+2
.19613a		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.19613e		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.196140		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.196144		ea		nop		                NOP                             ; Wait about 500ns
.196145		ea		nop		                NOP
.196146		ea		nop		                NOP
.196147		ea		nop		                NOP
.196148		20 e3 60	jsr $1960e3	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.19614b		90 24		bcc $196171	                BCC ret_failure                 ; If an error occurred, return it
.19614d		a0 00		ldy #$00	                LDY #0
.19614f		c2 30		rep #$30	                REP #$30        ; set A&X long
.196151		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.196155		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.196157		c8		iny		                INY                             ; Move to the next position
.196158		c8		iny		                INY
.196159		c0 00 02	cpy #$0200	                CPY #512
.19615c		d0 f3		bne $196151	                BNE read_loop
.19615e		ea		nop		                NOP                             ; Wait about 500ns
.19615f		ea		nop		                NOP
.196160		ea		nop		                NOP
.196161		ea		nop		                NOP
.196162						ret_success
.196162		e2 20		sep #$20	                SEP #$20        ; set A short
.196164		a9 00		lda #$00	                LDA #0
.196166		85 00		sta $0320	                STA BIOS_STATUS
.196168		8d 06 03	sta $0306	                STA @w FDC_ST0
.19616b		28		plp		                PLP                             ; Return success
.19616c		2b		pld		                PLD
.19616d		ab		plb		                PLB
.19616e		7a		ply		                PLY
.19616f		38		sec		                SEC
.196170		6b		rtl		                RTL
.196171						ret_failure
.196171		e2 20		sep #$20	                SEP #$20        ; set A short
.196173		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196177		8d 06 03	sta $0306	                STA @w FDC_ST0
.19617a		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.19617c		85 00		sta $0320	                STA BIOS_STATUS
.19617e		28		plp		                PLP
.19617f		2b		pld		                PLD
.196180		ab		plb		                PLB
.196181		7a		ply		                PLY
.196182		18		clc		                CLC
.196183		6b		rtl		                RTL
.196184						IDE_PUTBLOCK
.196184		5a		phy		                PHY
.196185		8b		phb		                PHB
.196186		0b		phd		                PHD
.196187		08		php		                PHP
.196188		48		pha		                PHA             ; begin setdbr macro
.196189		08		php		                PHP
.19618a		e2 20		sep #$20	                SEP #$20        ; set A short
.19618c		a9 00		lda #$00	                LDA #0
.19618e		48		pha		                PHA
.19618f		ab		plb		                PLB
.196190		28		plp		                PLP
.196191		68		pla		                PLA             ; end setdbr macro
.196192		48		pha		                PHA             ; begin setdp macro
.196193		08		php		                PHP
.196194		c2 20		rep #$20	                REP #$20        ; set A long
.196196		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.196199		5b		tcd		                TCD
.19619a		28		plp		                PLP
.19619b		68		pla		                PLA             ; end setdp macro
.19619c		e2 20		sep #$20	                SEP #$20        ; set A short
.19619e		20 e3 60	jsr $1960e3	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.1961a1		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.1961a3		29 07		and #$07	                AND #$07
.1961a5		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.1961a7		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.1961ab		20 e3 60	jsr $1960e3	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.1961ae		e2 20		sep #$20	                SEP #$20        ; set A short
.1961b0		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.1961b2		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.1961b6		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.1961b8		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.1961bc		a5 03		lda $0323	                LDA BIOS_LBA+1
.1961be		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.1961c2		a5 04		lda $0324	                LDA BIOS_LBA+2
.1961c4		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.1961c8		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.1961ca		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.1961ce		ea		nop		                NOP                             ; Wait about 500ns
.1961cf		ea		nop		                NOP
.1961d0		ea		nop		                NOP
.1961d1		ea		nop		                NOP
.1961d2		20 e3 60	jsr $1960e3	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.1961d5		90 37		bcc $19620e	                BCC ret_failure                 ; If an error occurred, return it
.1961d7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1961d9		a0 00 00	ldy #$0000	                LDY #0
.1961dc		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.1961de		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.1961e2		c8		iny		                INY                             ; Move to the next position
.1961e3		c8		iny		                INY
.1961e4		c0 00 02	cpy #$0200	                CPY #512
.1961e7		d0 f3		bne $1961dc	                BNE read_loop
.1961e9		ea		nop		                NOP                             ; Wait about 500ns
.1961ea		ea		nop		                NOP
.1961eb		ea		nop		                NOP
.1961ec		ea		nop		                NOP
.1961ed		20 e3 60	jsr $1960e3	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.1961f0		90 1c		bcc $19620e	                BCC ret_failure                 ; If an error occurred, return it
.1961f2		ea		nop		                NOP                             ; Wait about 500ns
.1961f3		ea		nop		                NOP
.1961f4		ea		nop		                NOP
.1961f5		ea		nop		                NOP
.1961f6		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.1961fa		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.1961fd		d0 0f		bne $19620e	                BNE ret_failure                 ; If error: return failure
.1961ff						ret_success
.1961ff		e2 20		sep #$20	                SEP #$20        ; set A short
.196201		a9 00		lda #$00	                LDA #0
.196203		85 00		sta $0320	                STA BIOS_STATUS
.196205		8d 06 03	sta $0306	                STA @w FDC_ST0
.196208		28		plp		                PLP                             ; Return success
.196209		2b		pld		                PLD
.19620a		ab		plb		                PLB
.19620b		7a		ply		                PLY
.19620c		38		sec		                SEC
.19620d		6b		rtl		                RTL
.19620e		ea		nop		ret_failure     NOP                             ; Wait about 500ns
.19620f		ea		nop		                NOP
.196210		ea		nop		                NOP
.196211		ea		nop		                NOP
.196212		e2 20		sep #$20	                SEP #$20        ; set A short
.196214		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196218		80 08		bra $196222	                BRA save_error
.19621a		ea		nop		                NOP
.19621b		ea		nop		                NOP
.19621c		ea		nop		                NOP
.19621d		ea		nop		                NOP
.19621e		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196222		8d 06 03	sta $0306	save_error      STA @w FDC_ST0
.196225		a9 83		lda #$83	                LDA #BIOS_ERR_WRITE
.196227		85 00		sta $0320	                STA BIOS_STATUS
.196229		28		plp		                PLP
.19622a		2b		pld		                PLD
.19622b		ab		plb		                PLB
.19622c		7a		ply		                PLY
.19622d		18		clc		                CLC
.19622e		6b		rtl		                RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/Libraries/Ethernet_Init_library.asm

.19622f						SIMPLE_INIT_ETHERNET_CTRL
.19622f						WaitforittobeReady:
.19622f		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.196233		29 01 00	and #$0001	                AND #$0001
.196236		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.196239		d0 f4		bne $19622f	                BNE WaitforittobeReady
.19623b		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.19623f		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.196243		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.196247		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.19624b		a9 00 00	lda #$0000	                LDA #$0000
.19624e		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.196252		a9 00 70	lda #$7000	                LDA #$7000
.196255		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.196259		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.19625c		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.196260		a9 0b 00	lda #$000b	                LDA #$000B
.196263		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.196267		a9 00 00	lda #$0000	                LDA #$0000
.19626a		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.19626e		20 a2 62	jsr $1962a2	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.196271		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.196274		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.196278		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.19627b		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.19627f		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.196282		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.196286		20 a2 62	jsr $1962a2	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.196289		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.19628c		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.196290		a9 0c 00	lda #$000c	                LDA #$000C
.196293		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.196297		a9 04 00	lda #$0004	                LDA #$0004
.19629a		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.19629e		20 a2 62	jsr $1962a2	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.1962a1		6b		rtl		                RTL
.1962a2						MAC_ACCESS_WAIT_FOR_COMPLETION
.1962a2		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.1962a5		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.1962a9						WaitForCompletion:
.1962a9		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.1962ad		29 00 80	and #$8000	                AND #$8000
.1962b0		c9 00 80	cmp #$8000	                CMP #$8000
.1962b3		f0 f4		beq $1962a9	                BEQ WaitForCompletion
.1962b5		60		rts		                RTS

;******  Return to file: src/kernel.asm


;******  Processing file: src/Libraries/EXP-C200_EVID_Library.asm

=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.1962b6						INIT_EVID_VID_MODE
.1962b6		e2 20		sep #$20	                SEP #$20        ; set A short
.1962b8		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable     ; 0 - 80x60, 1- 100x75
.1962ba		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.1962be		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable    ; Enable the Border
.1962c0		8f 04 1e ae	sta $ae1e04	                STA @l EVID_BORDER_CTRL_REG
.1962c4		a9 08		lda #$08	                LDA #8                          ; Set the border to the standard 8 pixels
.1962c6		8f 08 1e ae	sta $ae1e08	                STA @l EVID_BORDER_X_SIZE       ; Let's use maximum space
.1962ca		8f 09 1e ae	sta $ae1e09	                STA @l EVID_BORDER_Y_SIZE
.1962ce		a9 20		lda #$20	                LDA #$20
.1962d0		8f 07 1e ae	sta $ae1e07	                STA @l EVID_BORDER_COLOR_R      ; R
.1962d4		a9 00		lda #$00	                LDA #$00
.1962d6		8f 06 1e ae	sta $ae1e06	                STA @l EVID_BORDER_COLOR_G      ; G
.1962da		a9 20		lda #$20	                LDA #$20
.1962dc		8f 05 1e ae	sta $ae1e05	                STA @l EVID_BORDER_COLOR_B      ; B
.1962e0		22 e2 63 19	jsl $1963e2	                JSL INIT_EVID_LUT
.1962e4		22 cb 63 19	jsl $1963cb	                JSL INIT_EVID_FONTSET
.1962e8		22 06 64 19	jsl $196406	                JSL INIT_EVID_CURSOR
.1962ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.1962ee		a9 62 00	lda #$0062	                LDA #(100-2)
.1962f1		8f 63 00 00	sta $000063	                STA @l EVID_COLS_VISIBLE
.1962f5		a9 49 00	lda #$0049	                LDA #(75-2)
.1962f8		8f 67 00 00	sta $000067	                STA @l EVID_LINES_VISIBLE
.1962fc		a9 64 00	lda #$0064	                LDA #100
.1962ff		8f 65 00 00	sta $000065	                STA @l EVID_COLS_PER_LINE
.196303		a9 4b 00	lda #$004b	                LDA #75
.196306		8f 69 00 00	sta $000069	                STA @l EVID_LINES_MAX
.19630a		a9 70 00	lda #$0070	                LDA #$70                        ; Set the default text color to light gray on dark gray
.19630d		8f 72 00 00	sta $000072	                STA @l EVID_CURCOLOR
.196311		c2 30		rep #$30	                REP #$30        ; set A&X long
.196313		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM            ; store the initial screen buffer location
.196316		8f 60 00 00	sta $000060	                STA @l EVID_SCREENBEGIN
.19631a		8f 6b 00 00	sta $00006b	                STA @l EVID_CURSORPOS
.19631e		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM           ; Set the initial COLOR cursor position
.196321		8d 76 00	sta $0076	                STA EVID_COLORPOS
.196324		e2 20		sep #$20	                SEP #$20        ; set A short
.196326		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.196328		8f 62 00 00	sta $000062	                STA @l EVID_SCREENBEGIN + 2
.19632c		8f 6d 00 00	sta $00006d	                STA @l EVID_CURSORPOS+2
.196330		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM            ; Set the initial COLOR cursor position
.196332		8f 78 00 00	sta $000078	                STA @l EVID_COLORPOS + 2
.196336		6b		rtl		                RTL
>196337		1b 5b 31 6d 1b 5b 33 31		EVID_DEV_RDY0   .text $1B, "[1m", $1B, "[31m", $0B, $0C, $1B, "[35m", $0B, $0C, $1B, "[33m", $0B, $0C, $1B
>19633f		6d 0b 0c 1b 5b 33 35 6d 0b 0c 1b 5b 33 33 6d 0b
>19634f		0c 1b
>196351		5b 33 32 6d 0b 0c 1b 5b		                .null "[32m", $0B, $0C, $1B, "[34m", $0B, $0C, $1B, "[0m", $20, "C256 Foenix EXP-C200-EVID", $0D
>196359		33 34 6d 0b 0c 1b 5b 30 6d 20 43 32 35 36 20 46
>196369		6f 65 6e 69 78 20 45 58 50 2d 43 32 30 30 2d 45
>196379		56 49 44 0d 00
>19637e		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1   .null "Your Device is Ready..."
>196386		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
.196396						EVID_GREET
.196396		48		pha		                PHA
.196397		da		phx		                PHX
.196398		08		php		                PHP
.196399		e2 20		sep #$20	                SEP #$20        ; set A short
.19639b		af 7d 00 00	lda $00007d	                LDA @l EVID_PRESENT             ; Check if the EVID screen is present
.19639f		f0 26		beq $1963c7	                BEQ done                        ; If not, skip this routine
.1963a1		a9 04		lda #$04	                LDA #CHAN_EVID                  ; Switch to the EVID screen
.1963a3		22 3c 10 00	jsl $00103c	                JSL SETOUT
.1963a7		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN                   ; Clear the screen
.1963ab		c2 10		rep #$10	                REP #$10        ; set X long
.1963ad		8b		phb		                PHB                             ; Print the messages
.1963ae		a9 19		lda #$19	                LDA #`EVID_DEV_RDY0
.1963b0		48		pha		                PHA
.1963b1		ab		plb		                PLB
.1963b2		a2 37 63	ldx #$6337	                LDX #<>EVID_DEV_RDY0
.1963b5		22 01 07 19	jsl $190701	                JSL IPRINT
.1963b9		a2 7e 63	ldx #$637e	                LDX #<>EVID_DEV_RDY1
.1963bc		22 01 07 19	jsl $190701	                JSL IPRINT
.1963c0		ab		plb		                PLB
.1963c1		a9 00		lda #$00	                LDA #CHAN_CONSOLE               ; Go back to the main console
.1963c3		22 3c 10 00	jsl $00103c	                JSL SETOUT
.1963c7		28		plp		done            PLP
.1963c8		fa		plx		                PLX
.1963c9		68		pla		                PLA
.1963ca		6b		rtl		                RTL
.1963cb						INIT_EVID_FONTSET
.1963cb		e2 20		sep #$20	                SEP #$20        ; set A short
.1963cd		c2 10		rep #$10	                REP #$10        ; set X long
.1963cf		a2 00 00	ldx #$0000	                LDX #$0000
.1963d2						initFontsetbranch0
.1963d2		bf 00 00 1f	lda $1f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.1963d6		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X   ; Vicky FONT RAM Bank
.1963da		e8		inx		                INX
.1963db		e0 00 08	cpx #$0800	                CPX #$0800
.1963de		d0 f2		bne $1963d2	                BNE initFontsetbranch0
.1963e0		ea		nop		                NOP
.1963e1		6b		rtl		                RTL
.1963e2						INIT_EVID_LUT
.1963e2		e2 20		sep #$20	                SEP #$20        ; set A short
.1963e4		e2 10		sep #$10	                SEP #$10        ; set X short
.1963e6		a2 00		ldx #$00	                LDX	#$00
.1963e8		bf c1 7b 19	lda $197bc1,x	lutinitloop0	LDA @lfg_color_lut,x    ; get Local Data c64_character_Color_LUT_4_Txt
.1963ec		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	    ; Write in LUT Memory
.1963f0		e8		inx		                inx
.1963f1		e0 40		cpx #$40	                cpx #$40
.1963f3		d0 f3		bne $1963e8	                bne lutinitloop0
.1963f5		a2 00		ldx #$00	                LDX	#$00
.1963f7		bf 01 7c 19	lda $197c01,x	lutinitloop1	LDA @lbg_color_lut,x    ; get Local Data
.1963fb		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	    ; Write in LUT Memory
.1963ff		e8		inx		                INX
.196400		e0 40		cpx #$40	                CPX #$40
.196402		d0 f3		bne $1963f7	                bne lutinitloop1
.196404		ea		nop		                NOP
.196405		6b		rtl		                RTL
.196406						INIT_EVID_CURSOR
.196406		08		php		                PHP
.196407		e2 20		sep #$20	                SEP #$20        ; set A short
.196409		a9 b1		lda #$b1	                LDA #$B1                                            ; The Cursor Character will be a Fully Filled Block
.19640b		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.19640f		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0) ; Set Cursor Enable And Flash Rate @1Hz
.196411		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG
.196415		c2 30		rep #$30	                REP #$30        ; set A&X long
.196417		a9 00 00	lda #$0000	                LDA #$0000;
.19641a		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L   ; Set the X to Position 1
.19641e		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L   ; Set the Y to Position 6 (Below)
.196422		28		plp		                PLP
.196423		6b		rtl		                RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/Libraries/ansi_screens.asm

.0000						S_ANSI_VARS
>0000						SCREENBEGIN         .long ?     ; Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>0003						COLS_VISIBLE        .word ?     ; Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>0005						COLS_PER_LINE       .word ?     ; Columns in memory per screen line. A virtual line can be this long. Default=128
>0007						LINES_VISIBLE       .word ?     ; The number of rows visible on the screen. Default=25
>0009						LINES_MAX           .word ?     ; The number of rows in memory for the screen. Default=64
>000b						CURSORPOS           .long ?     ; The next character written to the screen will be written in this location.
>000e						CURSORX             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0010						CURSORY             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0012						CURCOLOR            .byte ?     ; Color of next character to be printed to the screen.
>0013						COLORPOS            .long ?     ; Address of cursor's position in the color matrix
>0016						COLORBEGIN          .long ?     ; Address of the first byte of the color matrix for this screen
>0019						TMPPTR1             .dword ?    ; Temporary pointer
>001d						PRESENT             .byte ?     ; Screen is present on the machine (EVID only)
>001e						STATE               .byte ?     ; State of the escape code parser
>001f						CONTROL             .byte ?     ; Control bit
>0020						ARGC                .byte ?     ; The number of arguments provided by the escape sequence (max 2)
>0021						ARG0                .byte ?     ; First ANSI code argument
>0022						ARG1                .byte ?     ; Second ANSI code argument
=0						ST_INIT = 0             ; Starting state for the ANSI code parser. Most characters just print
=1						ST_ESCAPE = 1           ; ESC has been seen
=2						ST_CSI = 2              ; Full CSI has been seen "ESC ["
=2						ANSI_MAX_ARG = 2        ; We'll limit ourselves to two arguments
=$70						ANSI_DEF_COLOR = $70    ; Default color (dim white on dim black)
=$80						CONTROL_INVERT = $80    ; Control bit: Colors are inverted
=$40						CONTROL_BOLD = $40      ; Control bit: Colors should be intense
.196424						ANSI_INIT
.196424		da		phx		                    PHX
.196425		5a		phy		                    PHY
.196426		8b		phb		                    PHB
.196427		0b		phd		                    PHD
.196428		08		php		                    PHP
.196429		c2 30		rep #$30	                REP #$30        ; set A&X long
.19642b		a0 00 00	ldy #$0000	                    LDY #0
.19642e		22 da 64 19	jsl $1964da	                    JSL INIT_SCREEN_Y               ; Set up the main screen
.196432		e2 20		sep #$20	                SEP #$20        ; set A short
.196434		af 87 e8 af	lda $afe887	                    LDA @l GABE_SYS_STAT            ; Let's check the Presence of an Expansion Card here
.196438		29 10		and #$10	                    AND #GABE_SYS_STAT_EXP          ; When there is a Card the Value is 1
.19643a		c9 10		cmp #$10	                    CMP #GABE_SYS_STAT_EXP
.19643c		d0 1d		bne $19645b	                    BNE no_evid
.19643e		c2 20		rep #$20	                REP #$20        ; set A long
.196440		af 12 00 ae	lda $ae0012	                    LDA @l ESID_ID_CARD_ID_Lo       ; Load the Card ID and check for C100 or C200
.196444		c9 c8 00	cmp #$00c8	                    CMP #$00C8                      ; Is it the EVID card?
.196447		d0 12		bne $19645b	                    BNE no_evid                     ; No: mark the EVID screen as not present
.196449		e2 20		sep #$20	                SEP #$20        ; set A short
.19644b		a9 01		lda #$01	                    LDA #1                          ; Otherwise: Mark that there is an EVID present
.19644d		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.196451		a0 01 00	ldy #$0001	                    LDY #1
.196454		22 da 64 19	jsl $1964da	                    JSL INIT_SCREEN_Y               ; Initialize the EVID screen variables
.196458		80 09		bra $196463	                    BRA done
.19645a		00		brk #		                    BRK
.19645b						no_evid
.19645b		e2 20		sep #$20	                SEP #$20        ; set A short
.19645d		a9 00		lda #$00	                    LDA #0                          ; Mark that there is no EVID present
.19645f		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.196463		28		plp		done                PLP
.196464		2b		pld		                    PLD
.196465		ab		plb		                    PLB
.196466		7a		ply		                    PLY
.196467		fa		plx		                    PLX
.196468		6b		rtl		                    RTL
.196469						ANSI_INIT_LUTS
.196469		08		php		                    PHP
.19646a		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19646c		a2 00		ldx #$00	                    LDX #0
.19646e		bf 9a 64 19	lda $19649a,x	vicky_loop          LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.196472		9f 40 1f af	sta $af1f40,x	                    STA @l FG_CHAR_LUT_PTR,X        ; Set the corresponding foreground color component on Vicky
.196476		9f 80 1f af	sta $af1f80,x	                    STA @l BG_CHAR_LUT_PTR,X        ; Set the corresponding background color component on Vicky
.19647a		e8		inx		                    INX
.19647b		e0 40		cpx #$40	                    CPX #4*16
.19647d		d0 ef		bne $19646e	                    BNE vicky_loop
.19647f		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Check to see if EVID is present
.196483		f0 13		beq $196498	                    BEQ done                        ; If not, we're done
.196485		a2 00		ldx #$00	                    LDX #0
.196487		bf 9a 64 19	lda $19649a,x	evid_loop           LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.19648b		9f 00 1b ae	sta $ae1b00,x	                    STA @l EVID_FG_LUT,X            ; Set the corresponding foreground color component on the EVID card
.19648f		9f 40 1b ae	sta $ae1b40,x	                    STA @l EVID_BG_LUT,X            ; Set the corresponding background color component on the EVID card
.196493		e8		inx		                    INX
.196494		e0 40		cpx #$40	                    CPX #4*16
.196496		d0 ef		bne $196487	                    BNE evid_loop
.196498		28		plp		done                PLP
.196499		6b		rtl		                    RTL
.19649a						ANSI_TEXT_LUT
>19649a		00 00 00 00			                    .byte 0, 0, 0, 0
>19649e		00 00 80 00			                    .byte 0, 0, 128, 0
>1964a2		00 80 00 00			                    .byte 0, 128, 0, 0
>1964a6		00 80 80 00			                    .byte 0, 128, 128, 0
>1964aa		80 00 00 00			                    .byte 128, 0, 0, 0
>1964ae		80 00 80 00			                    .byte 128, 0, 128, 0
>1964b2		80 80 00 00			                    .byte 128, 128, 0, 0
>1964b6		c0 c0 c0 00			                    .byte 192, 192, 192, 0
>1964ba		80 80 80 00			                    .byte 128, 128, 128, 0
>1964be		00 00 ff 00			                    .byte 0, 0, 255, 0
>1964c2		00 ff 00 00			                    .byte 0, 255, 0, 0
>1964c6		00 ff ff 00			                    .byte 0, 255, 255, 0
>1964ca		ff 00 00 00			                    .byte 255, 0, 0, 0
>1964ce		00 7f fc 00			                    .byte 0, 127, 252, 0
>1964d2		ff ff 00 00			                    .byte 255, 255, 0, 0
>1964d6		ff ff ff 00			                    .byte 255, 255, 255, 0
.1964da						INIT_SCREEN_Y
.1964da		c2 30		rep #$30	                REP #$30        ; set A&X long
.1964dc		c0 00 00	cpy #$0000	                    CPY #0
.1964df		f0 06		beq $1964e7	                    BEQ setdp_0
.1964e1		a9 60 00	lda #$0060	setdp_1             LDA #<>EVID_SCREENBEGIN         ; Set DP to the EVID variable block
.1964e4		5b		tcd		                    TCD
.1964e5		80 04		bra $1964eb	                    BRA set_addresses
.1964e7		a9 0c 00	lda #$000c	setdp_0             LDA #<>SCREENBEGIN              ; Set DP to the main screen variable block
.1964ea		5b		tcd		                    TCD
.1964eb		98		tya		set_addresses       TYA                             ; Compute offset to screen Y's addresses
.1964ec		0a		asl a		                    ASL A
.1964ed		0a		asl a		                    ASL A
.1964ee		aa		tax		                    TAX
.1964ef		bf 2a 65 19	lda $19652a,x	                    LDA @l text_address,X
.1964f3		85 00		sta $0320	                    STA #S_ANSI_VARS.SCREENBEGIN,D  ; Set the address of the text matrix
.1964f5		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D    ; And the cursor pointer
.1964f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1964f9		bf 2c 65 19	lda $19652c,x	                    LDA @l text_address+2,X
.1964fd		85 02		sta $0322	                    STA #S_ANSI_VARS.SCREENBEGIN+2,D
.1964ff		85 0d		sta $032d	                    STA #S_ANSI_VARS.CURSORPOS+2,D
.196501		c2 20		rep #$20	                REP #$20        ; set A long
.196503		bf 32 65 19	lda $196532,x	                    LDA @l color_address,X
.196507		85 16		sta $0336	                    STA #S_ANSI_VARS.COLORBEGIN,D   ; Set the address of the color matrix
.196509		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D     ; And the color cursor pointer
.19650b		e2 20		sep #$20	                SEP #$20        ; set A short
.19650d		bf 34 65 19	lda $196534,x	                    LDA @l color_address+2,X
.196511		85 18		sta $0338	                    STA #S_ANSI_VARS.COLORBEGIN+2,D
.196513		85 15		sta $0335	                    STA #S_ANSI_VARS.COLORPOS+2,D
.196515		c2 20		rep #$20	                REP #$20        ; set A long
.196517		64 0e		stz $032e	                    STZ #S_ANSI_VARS.CURSORX,D      ; Set the cursor position to 0, 0
.196519		64 10		stz $0330	                    STZ #S_ANSI_VARS.CURSORY,D
.19651b		e2 20		sep #$20	                SEP #$20        ; set A short
.19651d		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D        ; Set the state of the ANSI parser to S0
.19651f		64 1f		stz $033f	                    STZ #S_ANSI_VARS.CONTROL,D      ; Set the control bits to 0 (default)
.196521		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.196523		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D     ; Set the current color to the default
.196525		22 73 65 19	jsl $196573	                    JSL ANSI_SETSIZE_Y              ; Set the size variables for the main screen
.196529		6b		rtl		                    RTL
>19652a		00 a0 af 00 00 20 ae 00		text_address        .dword CS_TEXT_MEM_PTR, EVID_TEXT_MEM
>196532		00 c0 af 00 00 40 ae 00		color_address       .dword CS_COLOR_MEM_PTR, EVID_COLOR_MEM
.19653a						ANSI_SETSIZES
.19653a		48		pha		                    PHA
.19653b		da		phx		                    PHX
.19653c		5a		phy		                    PHY
.19653d		0b		phd		                    PHD
.19653e		08		php		                    PHP
.19653f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196541		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Save the current output channel
.196545		48		pha		                    PHA
.196546		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; Set the sizes for the main screen
.196548		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.19654c		22 36 66 19	jsl $196636	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.196550		a0 00		ldy #$00	                    LDY #0
.196552		22 73 65 19	jsl $196573	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.196556		a9 04		lda #$04	                    LDA #CHAN_EVID                  ; Set the sizes for the EVID screen
.196558		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.19655c		22 36 66 19	jsl $196636	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.196560		b0 06		bcs $196568	                    BCS done                        ; Not present, just return
.196562		a0 01		ldy #$01	                    LDY #1
.196564		22 73 65 19	jsl $196573	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.196568		68		pla		done                PLA
.196569		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT                 ; Restore the output channel
.19656d		28		plp		                    PLP
.19656e		2b		pld		                    PLD
.19656f		7a		ply		                    PLY
.196570		fa		plx		                    PLX
.196571		68		pla		                    PLA
.196572		6b		rtl		                    RTL
.196573						ANSI_SETSIZE_Y
.196573		08		php		                    PHP
.196574		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196576		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196578		f0 06		beq $196580	                    BEQ vky_master                      ; Yes: get the resolution from Vicky
.19657a		af 01 1e ae	lda $ae1e01	                    LDA @l EVID_MSTR_CTRL_REG_H         ; No: get the resolution from EVID
.19657e		80 04		bra $196584	                    BRA resolution
.196580		af 01 00 af	lda $af0001	vky_master          LDA @l MASTER_CTRL_REG_H
.196584		29 03		and #$03	resolution          AND #$03                            ; Mask off the resolution bits
.196586		0a		asl a		                    ASL A
.196587		aa		tax		                    TAX                                 ; Index to the col/line count in X
.196588		c2 20		rep #$20	                REP #$20        ; set A long
.19658a		bf 26 66 19	lda $196626,x	                    LDA @l cols_by_res,X                ; Get the number of columns
.19658e		85 05		sta $0325	                    STA #S_ANSI_VARS.COLS_PER_LINE,D    ; This is how many columns there are per line in the memory
.196590		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D     ; This is how many would be visible with no border
.196592		bf 2e 66 19	lda $19662e,x	                    LDA @l lines_by_res,X               ; Get the number of lines
.196596		85 09		sta $0329	                    STA #S_ANSI_VARS.LINES_MAX,D        ; This is the total number of lines in memory
.196598		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D    ; This is how many lines would be visible with no border
.19659a		e2 20		sep #$20	                SEP #$20        ; set A short
.19659c		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.19659e		f0 06		beq $1965a6	                    BEQ vky_border                      ; Yes: get the border from Vicky
.1965a0		af 04 1e ae	lda $ae1e04	                    LDA @l EVID_BORDER_CTRL_REG         ; No: Check EVID to see if we have a border
.1965a4		80 04		bra $1965aa	                    BRA border
.1965a6		af 04 00 af	lda $af0004	vky_border          LDA @l BORDER_CTRL_REG              ; Check Vicky to see if we have a border
.1965aa		89 01		bit #$01	border              BIT #Border_Ctrl_Enable
.1965ac		f0 76		beq $196624	                    BEQ done                            ; No border... the sizes are correct now
.1965ae		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.1965b0		f0 06		beq $1965b8	                    BEQ vky_border_size                 ; Yes: get the border size from Vicky
.1965b2		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the horizontal border width from EVID
.1965b6		80 04		bra $1965bc	                    BRA get_border_x_size
.1965b8		af 08 00 af	lda $af0008	vky_border_size     LDA @l BORDER_X_SIZE                ; Get the horizontal border width from Vicky
.1965bc		29 3f		and #$3f	get_border_x_size   AND #$3F
.1965be		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.1965c0		d0 04		bne $1965c6	                    BNE frac_width
.1965c2		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.1965c3		4a		lsr a		                    LSR A
.1965c4		80 03		bra $1965c9	                    BRA store_width
.1965c6		4a		lsr a		frac_width          LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.1965c7		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.1965c8		1a		inc a		                    INC A
.1965c9		85 19		sta $0339	store_width         STA #S_ANSI_VARS.TMPPTR1,D
.1965cb		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.1965cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1965cf		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.1965d1		f0 0c		beq $1965df	                    BEQ adjust_width                    ; Yes: skip the pixel doubling check
.1965d3		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check Vucky if we're pixel doubling
.1965d7		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.1965d9		f0 04		beq $1965df	                    BEQ adjust_width                    ; No... just adjust the width of the screen
.1965db		c2 20		rep #$20	                REP #$20        ; set A long
.1965dd		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.1965df						adjust_width
.1965df		c2 20		rep #$20	                REP #$20        ; set A long
.1965e1		38		sec		                    SEC
.1965e2		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.1965e4		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.1965e6		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D
.1965e8		e2 20		sep #$20	                SEP #$20        ; set A short
.1965ea		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.1965ec		f0 06		beq $1965f4	                    BEQ vky_border_y_size               ; Yes: get the border Y size from Vicky
.1965ee		af 09 1e ae	lda $ae1e09	                    LDA @l EVID_BORDER_Y_SIZE           ; No: Get the vertical border width from EVID
.1965f2		80 04		bra $1965f8	                    BRA get_border_y_size
.1965f4		af 09 00 af	lda $af0009	vky_border_y_size   LDA @l BORDER_Y_SIZE                ; Get the vertical border width from Vicky
.1965f8		29 3f		and #$3f	get_border_y_size   AND #$3F
.1965fa		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.1965fc		d0 04		bne $196602	                    BNE frac_height
.1965fe		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.1965ff		4a		lsr a		                    LSR A
.196600		80 03		bra $196605	                    BRA store_height
.196602		4a		lsr a		frac_height         LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.196603		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.196604		1a		inc a		                    INC A
.196605		85 19		sta $0339	store_height        STA #S_ANSI_VARS.TMPPTR1,D
.196607		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.196609		e2 20		sep #$20	                SEP #$20        ; set A short
.19660b		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.19660d		f0 0c		beq $19661b	                    BEQ adjust_height                   ; Yes: skip the pixel doubling check
.19660f		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check if we're pixel doubling
.196613		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.196615		f0 04		beq $19661b	                    BEQ adjust_height                   ; No... just adjust the height of the screen
.196617		c2 20		rep #$20	                REP #$20        ; set A long
.196619		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.19661b						adjust_height
.19661b		c2 20		rep #$20	                REP #$20        ; set A long
.19661d		38		sec		                    SEC
.19661e		a5 09		lda $0329	                    LDA #S_ANSI_VARS.LINES_MAX,D
.196620		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.196622		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D
.196624		28		plp		done                PLP
.196625		6b		rtl		                    RTL
>196626		50 00 64 00 28 00 32 00		cols_by_res         .word 80,100,40,50
>19662e		3c 00 4b 00 1e 00 25 00		lines_by_res        .word 60,75,30,37
.196636						ANSI_SETDEVICE
.196636		48		pha		                    PHA
.196637		08		php		                    PHP
.196638		e2 20		sep #$20	                SEP #$20        ; set A short
.19663a		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check the current output channel
.19663e		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE               ; Is it the console?
.196640		f0 08		beq $19664a	                    BEQ console                     ; Yes: point to the console
.196642		c9 04		cmp #$04	                    CMP #CHAN_EVID                  ; Is it the EVID?
.196644		f0 0b		beq $196651	                    BEQ evid                        ; Check to see if the EVID is present
.196646		28		plp		bad_device          PLP
.196647		68		pla		                    PLA
.196648		38		sec		                    SEC
.196649		6b		rtl		                    RTL
.19664a						console
.19664a		c2 20		rep #$20	                REP #$20        ; set A long
.19664c		a9 0c 00	lda #$000c	                    LDA #<>SCREENBEGIN              ; Point to the the main screen's variables
.19664f		80 0d		bra $19665e	                    BRA set_dp
.196651						evid
.196651		e2 20		sep #$20	                SEP #$20        ; set A short
.196653		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Is the EVID present?
.196657		f0 ed		beq $196646	                    BEQ bad_device                  ; No: return that the device is bad
.196659		c2 20		rep #$20	                REP #$20        ; set A long
.19665b		a9 60 00	lda #$0060	                    LDA #<>EVID_SCREENBEGIN         ; Yes: point to the EVID's variables
.19665e		5b		tcd		set_dp              TCD
.19665f		28		plp		                    PLP
.196660		68		pla		                    PLA
.196661		18		clc		                    CLC
.196662		6b		rtl		                    RTL
.196663						ANSI_PUTC
.196663		da		phx		                    PHX
.196664		5a		phy		                    PHY
.196665		0b		phd		                    PHD
.196666		08		php		                    PHP
.196667		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196669		22 36 66 19	jsl $196636	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.19666d		90 03		bcc $196672	                    BCC get_state               ; If valid, check the current state
.19666f		82 9d 00	brl $19670f	                    BRL done                    ; If invalid, just return
.196672		a6 1e		ldx $033e	get_state           LDX #S_ANSI_VARS.STATE,D    ; Get the current state
.196674		f0 0c		beq $196682	                    BEQ do_st_init              ; Dispatch to the correct code for the state
.196676		e0 01		cpx #$01	                    CPX #ST_ESCAPE
.196678		f0 21		beq $19669b	                    BEQ do_st_escape
.19667a		e0 02		cpx #$02	                    CPX #ST_CSI
.19667c		f0 3f		beq $1966bd	                    BEQ do_st_csi
.19667e		64 1e		stz $033e	pr_and_reset        STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.196680		80 06		bra $196688	                    BRA print_raw
.196682		c9 1b		cmp #$1b	do_st_init          CMP #CHAR_ESC               ; Is it ESC?
.196684		f0 09		beq $19668f	                    BEQ go_escape               ; Yes, handle the ESC
.196686		90 0d		bcc $196695	                    BLT do_control              ; If less than, handle as a control code
.196688		22 f0 67 19	jsl $1967f0	print_raw           JSL ANSI_PUTRAWC            ; Otherwise: Just print the raw character
.19668c		82 80 00	brl $19670f	                    BRL done
.19668f		a9 01		lda #$01	go_escape           LDA #ST_ESCAPE
.196691		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the ESCAPE state
.196693		80 7a		bra $19670f	                    BRA done
.196695		22 a7 67 19	jsl $1967a7	do_control          JSL ANSI_PR_CONTROL         ; Hand a single byte control code
.196699		80 74		bra $19670f	                    BRA done
.19669b		c9 5c		cmp #$5c	do_st_escape        CMP #'\'                    ; Have we gotten 'ESC\' (String terminator)?
.19669d		f0 08		beq $1966a7	                    BEQ go_init                 ; Yes: go back to the init state (we do nothing with this)
.19669f		c9 5f		cmp #$5f	chk_apc             CMP #'_'                    ; Have we gotten 'ESC_' (Application Program Command)?
.1966a1		d0 0a		bne $1966ad	                    BNE chk_csi                 ; No: check to see if we have a CSI
.1966a3		22 54 10 19	jsl $191054	                    JSL SHOW_CREDITS            ; Yes: show the credits
.1966a7		a9 00		lda #$00	go_init             LDA #ST_INIT
.1966a9		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the INIT state
.1966ab		80 62		bra $19670f	                    BRA done
.1966ad		c9 5b		cmp #$5b	chk_csi             CMP #'['                    ; Have we gotten 'ESC['?
.1966af		d0 cd		bne $19667e	                    BNE pr_and_reset            ; No: print this and return to ST_INIT
.1966b1		64 21		stz $0341	                    STZ #S_ANSI_VARS.ARG0,D     ; Clear the arguments
.1966b3		64 22		stz $0342	                    STZ #S_ANSI_VARS.ARG1,D
.1966b5		64 20		stz $0340	                    STZ #S_ANSI_VARS.ARGC,D
.1966b7		a9 02		lda #$02	                    LDA #ST_CSI
.1966b9		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the CSI state
.1966bb		80 52		bra $19670f	                    BRA done
.1966bd		c9 30		cmp #$30	do_st_csi           CMP #'0'                    ; Do we have a digit?
.1966bf		90 1d		bcc $1966de	                    BLT csi_not_digit
.1966c1		c9 3a		cmp #$3a	                    CMP #'9'+1
.1966c3		b0 19		bcs $1966de	                    BGE csi_not_digit
.1966c5		38		sec		                    SEC                         ; Have digit... convert to a number
.1966c6		e9 30		sbc #$30	                    SBC #'0'
.1966c8		48		pha		                    PHA                         ; Save it
.1966c9		a6 20		ldx $0340	                    LDX #S_ANSI_VARS.ARGC,D
.1966cb		16 21		asl $0341,x	                    ASL #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 2
.1966cd		b5 21		lda $0341,x	                    LDA #S_ANSI_VARS.ARG0,D,X
.1966cf		0a		asl a		                    ASL A                       ; A := arg * 4
.1966d0		0a		asl a		                    ASL A                       ; A := arg * 8
.1966d1		18		clc		                    CLC
.1966d2		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10
.1966d4		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := A
.1966d6		18		clc		                    CLC
.1966d7		68		pla		                    PLA                         ; Get the digit back
.1966d8		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10 + digit
.1966da		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 10 + digit
.1966dc		80 31		bra $19670f	                    BRA done                    ; And we're done with this particular character
.1966de		c9 3b		cmp #$3b	csi_not_digit       CMP #';'                    ; Is it an argument separator?
.1966e0		d0 0e		bne $1966f0	                    BNE csi_not_sep
.1966e2		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D     ; Get the argument count
.1966e4		c9 02		cmp #$02	                    CMP #ANSI_MAX_ARG           ; Are we at the maximum argument count?
.1966e6		d0 03		bne $1966eb	                    BNE csi_next_arg            ; No: move to the next argument
.1966e8		82 93 ff	brl $19667e	                    BRL pr_and_reset            ; Yes: print and reset state
.1966eb		1a		inc a		csi_next_arg        INC A
.1966ec		85 20		sta $0340	                    STA #S_ANSI_VARS.ARGC,D     ; Set the new argument count
.1966ee		80 1f		bra $19670f	                    BRA done                    ; And we're done with this character
.1966f0		c9 40		cmp #$40	csi_not_sep         CMP #'@'
.1966f2		90 0a		bcc $1966fe	                    BLT csi_not_upper
.1966f4		c9 5b		cmp #$5b	                    CMP #'Z'+1
.1966f6		b0 06		bcs $1966fe	                    BGE csi_not_upper
.1966f8		22 1f 67 19	jsl $19671f	                    JSL ANSI_ANSI_UPPER         ; Process an ANSI upper case code
.1966fc		80 11		bra $19670f	                    BRA done
.1966fe		c9 61		cmp #$61	csi_not_upper       CMP #'a'
.196700		90 0a		bcc $19670c	                    BLT csi_not_lower
.196702		c9 7b		cmp #$7b	                    CMP #'z'+1
.196704		b0 06		bcs $19670c	                    BGE csi_not_lower
.196706		22 64 67 19	jsl $196764	                    JSL ANSI_ANSI_LOWER         ; Process an ANSI lower case code
.19670a		80 03		bra $19670f	                    BRA done
.19670c		82 6f ff	brl $19667e	csi_not_lower       BRL pr_and_reset            ; Invalid sequence: print it and reset
.19670f		28		plp		done                PLP
.196710		2b		pld		                    PLD
.196711		7a		ply		                    PLY
.196712		fa		plx		                    PLX
.196713		6b		rtl		                    RTL
.196714						ANSI_INVALID
.196714		08		php		                    PHP
.196715		e2 20		sep #$20	                SEP #$20        ; set A short
.196717		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.196719		22 f0 67 19	jsl $1967f0	                    JSL ANSI_PUTRAWC            ; Print the character
.19671d		28		plp		                    PLP
.19671e		6b		rtl		                    RTL
.19671f						ANSI_ANSI_UPPER
.19671f		08		php		                    PHP
.196720		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196722		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.196724		38		sec		                    SEC
.196725		e9 40		sbc #$40	                    SBC #'@'
.196727		0a		asl a		                    ASL A
.196728		aa		tax		                    TAX
.196729		fc 2e 67	jsr ($19672e,x)	                    JSR (ansi_table,X)
.19672c		28		plp		                    PLP
.19672d		6b		rtl		                    RTL
>19672e		88 6a				ansi_table          .word <>ANSI_ICH        ; '@' -- ICH -- Insert Character
>196730		0b 68				                    .word <>ANSI_CUU        ; 'A' -- CUU -- Cursor Up
>196732		1f 68				                    .word <>ANSI_CUD        ; 'B' -- CUD -- Cursor Down
>196734		33 68				                    .word <>ANSI_CUF        ; 'C' -- CUF -- Cursor Forward
>196736		47 68				                    .word <>ANSI_CUB        ; 'D' -- CUB -- Cursor Back
>196738		14 67				                    .word <>ANSI_INVALID    ; 'E' -- CNL -- Cursor Next Line
>19673a		14 67				                    .word <>ANSI_INVALID    ; 'F' -- CPL -- Cursor Previous Line
>19673c		14 67				                    .word <>ANSI_INVALID    ; 'G' -- CHA -- Cursor Horizontal Absolute
>19673e		5b 68				                    .word <>ANSI_CUP        ; 'H' -- CUP -- Cursor Position
>196740		14 67				                    .word <>ANSI_INVALID    ; 'I'
>196742		da 69				                    .word <>ANSI_ED         ; 'J' -- ED -- Erase In Display
>196744		37 6a				                    .word <>ANSI_EL         ; 'K' -- EL -- Erase In Line
>196746		14 67				                    .word <>ANSI_INVALID    ; 'L'
>196748		14 67				                    .word <>ANSI_INVALID    ; 'M'
>19674a		14 67				                    .word <>ANSI_INVALID    ; 'N'
>19674c		14 67				                    .word <>ANSI_INVALID    ; 'O'
>19674e		cc 6a				                    .word <>ANSI_DCH        ; 'P' -- DCH -- Delete Character
>196750		14 67				                    .word <>ANSI_INVALID    ; 'Q'
>196752		14 67				                    .word <>ANSI_INVALID    ; 'R'
>196754		14 67				                    .word <>ANSI_INVALID    ; 'S' -- SU -- Scroll Up
>196756		14 67				                    .word <>ANSI_INVALID    ; 'T' -- SD -- Scroll Down
>196758		14 67				                    .word <>ANSI_INVALID    ; 'U'
>19675a		14 67				                    .word <>ANSI_INVALID    ; 'V'
>19675c		14 67				                    .word <>ANSI_INVALID    ; 'W'
>19675e		14 67				                    .word <>ANSI_INVALID    ; 'X'
>196760		14 67				                    .word <>ANSI_INVALID    ; 'Y'
>196762		14 67				                    .word <>ANSI_INVALID    ; 'Z'
.196764						ANSI_ANSI_LOWER
.196764		08		php		                    PHP
.196765		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196767		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.196769		38		sec		                    SEC
.19676a		e9 61		sbc #$61	                    SBC #'a'
.19676c		0a		asl a		                    ASL A
.19676d		aa		tax		                    TAX
.19676e		fc 73 67	jsr ($196773,x)	                    JSR (ansi_table,X)
.196771		28		plp		                    PLP
.196772		6b		rtl		                    RTL
>196773		14 67				ansi_table          .word <>ANSI_INVALID    ; 'a'
>196775		14 67				                    .word <>ANSI_INVALID    ; 'b'
>196777		14 67				                    .word <>ANSI_INVALID    ; 'c'
>196779		14 67				                    .word <>ANSI_INVALID    ; 'd'
>19677b		14 67				                    .word <>ANSI_INVALID    ; 'e'
>19677d		14 67				                    .word <>ANSI_INVALID    ; 'f' -- HVP -- Horizontal Vertical Position
>19677f		14 67				                    .word <>ANSI_INVALID    ; 'g'
>196781		74 68				                    .word <>ANSI_SET_MODE   ; 'h'
>196783		14 67				                    .word <>ANSI_INVALID    ; 'i'
>196785		14 67				                    .word <>ANSI_INVALID    ; 'j'
>196787		14 67				                    .word <>ANSI_INVALID    ; 'k'
>196789		b1 68				                    .word <>ANSI_RESET_MODE ; 'l'
>19678b		ee 68				                    .word <>ANSI_SGR        ; 'm' -- SGR -- Select Graphics Rendition
>19678d		14 67				                    .word <>ANSI_INVALID    ; 'n'
>19678f		14 67				                    .word <>ANSI_INVALID    ; 'o'
>196791		14 67				                    .word <>ANSI_INVALID    ; 'p'
>196793		14 67				                    .word <>ANSI_INVALID    ; 'q'
>196795		14 67				                    .word <>ANSI_INVALID    ; 'r'
>196797		14 67				                    .word <>ANSI_INVALID    ; 's'
>196799		14 67				                    .word <>ANSI_INVALID    ; 't'
>19679b		14 67				                    .word <>ANSI_INVALID    ; 'u'
>19679d		14 67				                    .word <>ANSI_INVALID    ; 'v'
>19679f		14 67				                    .word <>ANSI_INVALID    ; 'w'
>1967a1		14 67				                    .word <>ANSI_INVALID    ; 'x'
>1967a3		14 67				                    .word <>ANSI_INVALID    ; 'y'
>1967a5		14 67				                    .word <>ANSI_INVALID    ; 'z'
.1967a7						ANSI_PR_CONTROL
.1967a7		08		php		                    PHP
.1967a8		e2 20		sep #$20	                SEP #$20        ; set A short
.1967aa		c2 10		rep #$10	                REP #$10        ; set X long
.1967ac		c9 0d		cmp #$0d	                    CMP #CHAR_CR                ; Handle carriage return
.1967ae		f0 12		beq $1967c2	                    BEQ do_cr
.1967b0		c9 0a		cmp #$0a	                    CMP #CHAR_LF                ; Handle line feed
.1967b2		f0 1a		beq $1967ce	                    BEQ do_lf
.1967b4		c9 08		cmp #$08	                    CMP #CHAR_BS                ; Handle back space
.1967b6		f0 1c		beq $1967d4	                    BEQ do_bs
.1967b8		c9 09		cmp #$09	                    CMP #CHAR_TAB               ; Handle TAB
.1967ba		f0 1e		beq $1967da	                    BEQ do_tab
.1967bc		22 f0 67 19	jsl $1967f0	                    JSL ANSI_PUTRAWC            ; Otherwise, just print it raw and wriggling!
.1967c0		80 2c		bra $1967ee	                    BRA done
.1967c2		a2 00 00	ldx #$0000	do_cr               LDX #0                      ; Move to the beginning of the next line
.1967c5		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.1967c7		c8		iny		                    INY
.1967c8		22 a5 6b 19	jsl $196ba5	                    JSL ANSI_LOCATE
.1967cc		80 20		bra $1967ee	                    BRA done
.1967ce		22 82 6b 19	jsl $196b82	do_lf               JSL ANSI_CSRDOWN            ; Move the cursor down a line
.1967d2		80 1a		bra $1967ee	                    BRA done
.1967d4		22 46 6b 19	jsl $196b46	do_bs               JSL ANSI_CSRLEFT            ; Move the cursor to the left (TODO: delete to the left?)
.1967d8		80 14		bra $1967ee	                    BRA done
.1967da						do_tab
.1967da		c2 30		rep #$30	                REP #$30        ; set A&X long
.1967dc		a5 0e		lda $032e	                    LDA #S_ANSI_VARS.CURSORX,D  ; Move to the next power 8th column
.1967de		29 f8 ff	and #$fff8	                    AND #$FFF8
.1967e1		18		clc		                    CLC
.1967e2		69 08 00	adc #$0008	                    ADC #$0008
.1967e5		aa		tax		                    TAX
.1967e6		e2 20		sep #$20	                SEP #$20        ; set A short
.1967e8		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.1967ea		22 a5 6b 19	jsl $196ba5	                    JSL ANSI_LOCATE
.1967ee		28		plp		done                PLP
.1967ef		6b		rtl		                    RTL
.1967f0						ANSI_PUTRAWC
.1967f0		da		phx		                    PHX
.1967f1		5a		phy		                    PHY
.1967f2		0b		phd		                    PHD
.1967f3		08		php		                    PHP
.1967f4		e2 20		sep #$20	                SEP #$20        ; set A short
.1967f6		22 36 66 19	jsl $196636	                    JSL ANSI_SETDEVICE              ; Look at the current output channel and point
.1967fa		b0 0a		bcs $196806	                    BCS done                        ; If invalid, just return
.1967fc		87 0b		sta [$032b]	                    STA [#S_ANSI_VARS.CURSORPOS,D]  ; Save the character on the screen
.1967fe		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Set the color based on CURCOLOR
.196800		87 13		sta [$0333]	                    STA [#S_ANSI_VARS.COLORPOS,D]
.196802		22 1b 6b 19	jsl $196b1b	                    JSL ANSI_CSRRIGHT              ; And advance the cursor
.196806		28		plp		done                PLP
.196807		2b		pld		                    PLD
.196808		7a		ply		                    PLY
.196809		fa		plx		                    PLX
.19680a		6b		rtl		                    RTL
.19680b						ANSI_CUU
.19680b		08		php		                    PHP
.19680c		e2 20		sep #$20	                SEP #$20        ; set A short
.19680e		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196810		d0 02		bne $196814	                    BNE loop                        ; Move so long as not 0
.196812		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.196814		48		pha		loop                PHA                             ; Save the count
.196815		22 64 6b 19	jsl $196b64	                    JSL ANSI_CSRUP                  ; Cursor Up
.196819		68		pla		                    PLA                             ; Restore the count
.19681a		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.19681b		d0 f7		bne $196814	                    BNE loop
.19681d		28		plp		                    PLP
.19681e		60		rts		                    RTS
.19681f						ANSI_CUD
.19681f		08		php		                    PHP
.196820		e2 20		sep #$20	                SEP #$20        ; set A short
.196822		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196824		d0 02		bne $196828	                    BNE loop                        ; Move so long as not 0
.196826		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.196828		48		pha		loop                PHA                             ; Save the count
.196829		22 82 6b 19	jsl $196b82	                    JSL ANSI_CSRDOWN                ; Cursor Down
.19682d		68		pla		                    PLA                             ; Restore the count
.19682e		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.19682f		d0 f7		bne $196828	                    BNE loop
.196831		28		plp		                    PLP
.196832		60		rts		                    RTS
.196833						ANSI_CUF
.196833		08		php		                    PHP
.196834		e2 20		sep #$20	                SEP #$20        ; set A short
.196836		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196838		d0 02		bne $19683c	                    BNE loop                        ; Move so long as not 0
.19683a		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.19683c		48		pha		loop                PHA                             ; Save the count
.19683d		22 1b 6b 19	jsl $196b1b	                    JSL ANSI_CSRRIGHT               ; Cursor right
.196841		68		pla		                    PLA                             ; Restore the count
.196842		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196843		d0 f7		bne $19683c	                    BNE loop
.196845		28		plp		                    PLP
.196846		60		rts		                    RTS
.196847						ANSI_CUB
.196847		08		php		                    PHP
.196848		e2 20		sep #$20	                SEP #$20        ; set A short
.19684a		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.19684c		d0 02		bne $196850	                    BNE loop                        ; Move so long as not 0
.19684e		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.196850		48		pha		loop                PHA                             ; Save the count
.196851		22 46 6b 19	jsl $196b46	                    JSL ANSI_CSRLEFT                ; Cursor left
.196855		68		pla		                    PLA                             ; Restore the count
.196856		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196857		d0 f7		bne $196850	                    BNE loop
.196859		28		plp		                    PLP
.19685a		60		rts		                    RTS
.19685b						ANSI_CUP
.19685b		08		php		                    PHP
.19685c		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19685e		a6 21		ldx $0341	                    LDX #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196860		d0 02		bne $196864	                    BNE get_row
.196862		a2 01		ldx #$01	                    LDX #1                          ; Default to 1
.196864		a4 22		ldy $0342	get_row             LDY #S_ANSI_VARS.ARG1,D         ; Get the second argument
.196866		d0 02		bne $19686a	                    BNE adjust_coords
.196868		a0 01		ldy #$01	                    LDY #1                          ; Default to 1
.19686a		ca		dex		adjust_coords       DEX                             ; Translate from base 1 to base 0 coordinates
.19686b		88		dey		                    DEY
.19686c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19686e		22 a5 6b 19	jsl $196ba5	                    JSL ANSI_LOCATE                 ; Set the cursor position
.196872		28		plp		                    PLP
.196873		60		rts		                    RTS
.196874						ANSI_SET_MODE
.196874		08		php		                    PHP
.196875		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196877		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196879		c9 19		cmp #$19	                    CMP #25
.19687b		d0 24		bne $1968a1	                    BNE chk_break
.19687d		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.196881		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.196883		d0 0c		bne $196891	                    BNE check_evid
.196885		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.196889		09 01		ora #$01	                    ORA #Vky_Cursor_Enable
.19688b		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.19688f		80 1e		bra $1968af	                    BRA done
.196891		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.196893		d0 1a		bne $1968af	                    BNE done
.196895		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.196899		09 01		ora #$01	                    ORA #EVID_Cursor_Enable
.19689b		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.19689f		80 0e		bra $1968af	                    BRA done
.1968a1		c9 1c		cmp #$1c	chk_break           CMP #28
.1968a3		d0 0a		bne $1968af	                    BNE done
.1968a5		22 10 70 19	jsl $197010	                    JSL KBD_GET_CONTROL
.1968a9		09 80		ora #$80	                    ORA #KBD_CTRL_BREAK
.1968ab		22 23 70 19	jsl $197023	                    JSL KBD_SET_CONTROL
.1968af		28		plp		done                PLP
.1968b0		60		rts		                    RTS
.1968b1						ANSI_RESET_MODE
.1968b1		08		php		                    PHP
.1968b2		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1968b4		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.1968b6		c9 19		cmp #$19	                    CMP #25
.1968b8		d0 24		bne $1968de	                    BNE chk_break
.1968ba		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.1968be		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.1968c0		d0 0c		bne $1968ce	                    BNE check_evid
.1968c2		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.1968c6		29 fe		and #$fe	                    AND #~Vky_Cursor_Enable
.1968c8		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.1968cc		80 1e		bra $1968ec	                    BRA done
.1968ce		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.1968d0		d0 1a		bne $1968ec	                    BNE done
.1968d2		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.1968d6		29 fe		and #$fe	                    AND #~EVID_Cursor_Enable
.1968d8		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.1968dc		80 0e		bra $1968ec	                    BRA done
.1968de		c9 1c		cmp #$1c	chk_break           CMP #28
.1968e0		d0 0a		bne $1968ec	                    BNE done
.1968e2		22 10 70 19	jsl $197010	                    JSL KBD_GET_CONTROL
.1968e6		29 7f		and #$7f	                    AND #~KBD_CTRL_BREAK
.1968e8		22 23 70 19	jsl $197023	                    JSL KBD_SET_CONTROL
.1968ec		28		plp		done                PLP
.1968ed		60		rts		                    RTS
.1968ee						ANSI_SGR
.1968ee		08		php		                    PHP
.1968ef		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1968f1		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.1968f3		d0 0d		bne $196902	                    BNE chk_1
.1968f5		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR             ; 0 ==> Return to the default colors
.1968f7		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1968f9		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Switch off inversion
.1968fb		29 3f		and #$3f	                    AND #~(CONTROL_INVERT | CONTROL_BOLD)
.1968fd		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.1968ff		82 d6 00	brl $1969d8	                    BRL done
.196902		c9 01		cmp #$01	chk_1               CMP #1
.196904		d0 0f		bne $196915	                    BNE chk_2
.196906		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Make the current color bold
.196908		09 80		ora #$80	                    ORA #$80
.19690a		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.19690c		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be bold
.19690e		09 40		ora #$40	                    ORA #CONTROL_BOLD
.196910		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.196912		82 c3 00	brl $1969d8	                    BRL done
.196915		c9 02		cmp #$02	chk_2               CMP #2
.196917		f0 04		beq $19691d	                    BEQ normal_intensity
.196919		c9 16		cmp #$16	chk_22              CMP #22
.19691b		d0 0f		bne $19692c	                    BNE chk_7
.19691d		a5 12		lda $0332	normal_intensity    LDA #S_ANSI_VARS.CURCOLOR,D     ; 2 ==> Set the foreground to normal intensity
.19691f		29 7f		and #$7f	                    AND #~$80
.196921		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196923		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be normal
.196925		29 bf		and #$bf	                    AND #~CONTROL_BOLD
.196927		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.196929		82 ac 00	brl $1969d8	                    BRL done
.19692c		c9 07		cmp #$07	chk_7               CMP #7
.19692e		d0 2c		bne $19695c	                    BNE chk_27
.196930		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors already inverted?
.196932		89 80		bit #$80	                    BIT #CONTROL_INVERT
.196934		f0 03		beq $196939	                    BEQ invert_on
.196936		82 9f 00	brl $1969d8	                    BRL done                        ; Yes: just finish
.196939		09 80		ora #$80	invert_on           ORA #CONTROL_INVERT             ; No: Mark that the colors are inverted
.19693b		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.19693d		a5 12		lda $0332	swap_colors         LDA #S_ANSI_VARS.CURCOLOR,D     ; Exchange the upper and lower nibbles
.19693f		0a		asl a		                    ASL  A
.196940		69 80		adc #$80	                    ADC  #$80
.196942		2a		rol a		                    ROL  A
.196943		0a		asl a		                    ASL  A
.196944		69 80		adc #$80	                    ADC  #$80
.196946		2a		rol a		                    ROL  A
.196947		29 f7		and #$f7	                    AND #%11110111                  ; Make sure the background is not bolded
.196949		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.19694b		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.19694d		89 40		bit #$40	                    BIT #CONTROL_BOLD
.19694f		d0 03		bne $196954	                    BNE bold_on
.196951		82 84 00	brl $1969d8	                    BRL done                        ; No: we're done
.196954		a5 12		lda $0332	bold_on             LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.196956		09 80		ora #$80	                    ORA #$80
.196958		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.19695a		80 7c		bra $1969d8	                    BRA done
.19695c		c9 1b		cmp #$1b	chk_27              CMP #27
.19695e		d0 0c		bne $19696c	                    BNE chk_39
.196960		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors inverted?
.196962		89 80		bit #$80	                    BIT #CONTROL_INVERT
.196964		f0 72		beq $1969d8	                    BEQ done                        ; No: just finish
.196966		29 7f		and #$7f	                    AND #~CONTROL_INVERT            ; Yes: Mark that the colors are back to normal
.196968		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.19696a		80 d1		bra $19693d	                    BRA swap_colors                 ; And go swap the colors
.19696c		c9 27		cmp #$27	chk_39              CMP #39
.19696e		d0 10		bne $196980	                    BNE chk_49
.196970		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196972		29 0f		and #$0f	                    AND #$0F
.196974		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196976		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.196978		29 f0		and #$f0	                    AND #$F0
.19697a		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.19697c		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.19697e		80 58		bra $1969d8	                    BRA done
.196980		c9 31		cmp #$31	chk_49              CMP #49
.196982		d0 10		bne $196994	                    BNE chk_foreground
.196984		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196986		29 f0		and #$f0	                    AND #$F0
.196988		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.19698a		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.19698c		29 0f		and #$0f	                    AND #$0F
.19698e		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.196990		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196992		80 44		bra $1969d8	                    BRA done
.196994		c9 1e		cmp #$1e	chk_foreground      CMP #30                         ; If [30..37], set the foreground color
.196996		90 29		bcc $1969c1	                    BLT chk_background
.196998		c9 26		cmp #$26	                    CMP #38
.19699a		b0 25		bcs $1969c1	                    BGE chk_background
.19699c		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.19699e		29 0f		and #$0f	                    AND #$0F
.1969a0		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1969a2		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.1969a4		38		sec		                    SEC
.1969a5		e9 1e		sbc #$1e	                    SBC #30
.1969a7		0a		asl a		                    ASL A
.1969a8		0a		asl a		                    ASL A
.1969a9		0a		asl a		                    ASL A
.1969aa		0a		asl a		                    ASL A
.1969ab		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.1969ad		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1969af		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.1969b1		89 40		bit #$40	                    BIT #CONTROL_BOLD
.1969b3		d0 03		bne $1969b8	                    BNE bold_fore                   ; No: we're done
.1969b5		82 20 00	brl $1969d8	                    BRL done
.1969b8		a5 12		lda $0332	bold_fore           LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.1969ba		09 80		ora #$80	                    ORA #$80
.1969bc		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1969be		82 17 00	brl $1969d8	                    BRL done
.1969c1		c9 28		cmp #$28	chk_background      CMP #40                         ; If [40..47], set the background color
.1969c3		90 13		bcc $1969d8	                    BLT done
.1969c5		c9 30		cmp #$30	                    CMP #48
.1969c7		b0 0f		bcs $1969d8	                    BGE done
.1969c9		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.1969cb		29 f0		and #$f0	                    AND #$F0
.1969cd		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1969cf		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.1969d1		38		sec		                    SEC
.1969d2		e9 28		sbc #$28	                    SBC #40
.1969d4		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.1969d6		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1969d8		28		plp		done                PLP
.1969d9		60		rts		                    RTS
.1969da						ANSI_ED
.1969da		5a		phy		                    PHY
.1969db		08		php		                    PHP
.1969dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1969de		c2 10		rep #$10	                REP #$10        ; set X long
.1969e0		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.1969e2		d0 1b		bne $1969ff	                    BNE not_0                           ; Is the code 0?
.1969e4						code_0
.1969e4		c2 20		rep #$20	                REP #$20        ; set A long
.1969e6		38		sec		                    SEC                                 ; Calculate min index to erase
.1969e7		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.1969e9		e5 00		sbc $0320	                    SBC #S_ANSI_VARS.SCREENBEGIN,D
.1969eb		a8		tay		                    TAY
.1969ec		e2 20		sep #$20	                SEP #$20        ; set A short
.1969ee		a9 20		lda #$20	code_2_loop         LDA #' '
.1969f0		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.1969f2		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.1969f4		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.1969f6		c8		iny		                    INY
.1969f7		c0 00 20	cpy #$2000	                    CPY #$2000
.1969fa		d0 f2		bne $1969ee	                    BNE code_2_loop
.1969fc		82 35 00	brl $196a34	                    BRL done
.1969ff		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.196a01		d0 18		bne $196a1b	                    BNE not_1
.196a03						code_1
.196a03		c2 20		rep #$20	                REP #$20        ; set A long
.196a05		38		sec		                    SEC                                 ; Calculate max index to erase
.196a06		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.196a08		e5 00		sbc $0320	                    SBC #S_ANSI_VARS.SCREENBEGIN,D
.196a0a		a8		tay		                    TAY
.196a0b		e2 20		sep #$20	                SEP #$20        ; set A short
.196a0d		a9 20		lda #$20	code_1_loop         LDA #' '
.196a0f		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.196a11		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196a13		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.196a15		88		dey		                    DEY                                 ; Move to the previous index
.196a16		10 f5		bpl $196a0d	                    BPL code_1_loop                     ; And loop until we're done
.196a18		82 19 00	brl $196a34	                    BRL done
.196a1b		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.196a1d		f0 04		beq $196a23	                    BEQ cls_all
.196a1f		c9 03		cmp #$03	                    CMP #3
.196a21		d0 11		bne $196a34	                    BNE done                            ; No: just ignore the sequence
.196a23		a0 00 00	ldy #$0000	cls_all             LDY #0                              ; Start with the cursor's position
.196a26		a9 20		lda #$20	cls_all_loop        LDA #' '
.196a28		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.196a2a		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196a2c		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.196a2e		c8		iny		                    INY                                 ; Go to the next position
.196a2f		c0 00 20	cpy #$2000	                    CPY #$2000                          ; Have we reached the end?
.196a32		d0 f2		bne $196a26	                    BNE cls_all_loop                    ; No: keep going
.196a34		28		plp		done                PLP
.196a35		7a		ply		                    PLY
.196a36		60		rts		                    RTS
.196a37						ANSI_EL
.196a37		da		phx		                    PHX
.196a38		5a		phy		                    PHY
.196a39		08		php		                    PHP
.196a3a		c2 30		rep #$30	                REP #$30        ; set A&X long
.196a3c		38		sec		                    SEC
.196a3d		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D        ; Compute the address of the first character of the line
.196a3f		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.196a41		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.196a43		e2 20		sep #$20	                SEP #$20        ; set A short
.196a45		a5 02		lda $0322	                    LDA #S_ANSI_VARS.SCREENBEGIN+2,D    ; Get the bank of the screen
.196a47		85 1b		sta $033b	                    STA #S_ANSI_VARS.TMPPTR1+2,D        ; And put it in the TMPPTR1
.196a49		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.196a4b		d0 0e		bne $196a5b	                    BNE not_0                           ; Is the code 0?
.196a4d						code_0
.196a4d		a9 20		lda #$20	                    LDA #' '
.196a4f		a4 0e		ldy $032e	                    LDY #S_ANSI_VARS.CURSORX,D          ; Start at the cursor position
.196a51		97 19		sta [$0339],y	code_0_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.196a53		c8		iny		                    INY
.196a54		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.196a56		d0 f9		bne $196a51	                    BNE code_0_loop                     ; No: keep looping
.196a58		82 29 00	brl $196a84	                    BRL done
.196a5b		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.196a5d		d0 11		bne $196a70	                    BNE not_1
.196a5f						code_1
.196a5f		a9 20		lda #$20	                    LDA #' '
.196a61		a0 00 00	ldy #$0000	                    LDY #0
.196a64		97 19		sta [$0339],y	code_1_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.196a66		c8		iny		                    INY
.196a67		c4 0e		cpy $032e	                    CPY #S_ANSI_VARS.CURSORX,D          ; Have we reached the cursor?
.196a69		d0 f9		bne $196a64	                    BNE code_1_loop                     ; No: keep looping
.196a6b		97 19		sta [$0339],y	                    STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; And clear under the cursor
.196a6d		82 14 00	brl $196a84	                    BRL done
.196a70		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.196a72		f0 04		beq $196a78	                    BEQ code_2_3
.196a74		c9 03		cmp #$03	                    CMP #3
.196a76		d0 0c		bne $196a84	                    BNE done                            ; No: just ignore the sequence
.196a78						code_2_3
.196a78		a9 20		lda #$20	                    LDA #' '
.196a7a		a0 00 00	ldy #$0000	                    LDY #0
.196a7d		97 19		sta [$0339],y	code_2_3_loop       STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.196a7f		c8		iny		                    INY
.196a80		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.196a82		d0 f9		bne $196a7d	                    BNE code_2_3_loop                   ; No: keep looping
.196a84		28		plp		done                PLP
.196a85		7a		ply		                    PLY
.196a86		fa		plx		                    PLX
.196a87		60		rts		                    RTS
.196a88						ANSI_ICH
.196a88		5a		phy		                    PHY
.196a89		08		php		                    PHP
.196a8a		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196a8c		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.196a8e		f0 04		beq $196a94	                    BEQ default_1                       ; If 0, default to 1
.196a90		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.196a92		d0 04		bne $196a98	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.196a94		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.196a96		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.196a98		38		sec		calc_src_dest       SEC
.196a99		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D     ; TMPPTR1 := COLS_VISIBLE - CURSORX (destination index)
.196a9b		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.196a9d		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.196a9f		38		sec		                    SEC
.196aa0		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D             ; TMPPTR1+1 := TMPPTR1 - n (source index)
.196aa2		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D
.196aa4		a4 1a		ldy $033a	insert_loop         LDY #S_ANSI_VARS.TMPPTR1+1,D        ; text[dest] := text[source]
.196aa6		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.196aa8		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.196aaa		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.196aac		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D        ; color[dest] := color[source]
.196aae		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.196ab0		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.196ab2		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.196ab4		c6 19		dec $0339	                    DEC #S_ANSI_VARS.TMPPTR1,D          ; Move to the previous position
.196ab6		c6 1a		dec $033a	                    DEC #S_ANSI_VARS.TMPPTR1+1,D
.196ab8		10 ea		bpl $196aa4	                    BPL insert_loop                     ; Keep looping until we reach the end
.196aba		a0 00		ldy #$00	                    LDY #0
.196abc		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.196abe		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.196ac0		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196ac2		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.196ac4		c8		iny		                    INY                                 ; Move to the next byte
.196ac5		c4 21		cpy $0341	                    CPY #S_ANSI_VARS.ARG0,D             ; Until we reach the end
.196ac7		d0 f3		bne $196abc	                    BNE fill_loop
.196ac9		28		plp		                    PLP
.196aca		7a		ply		                    PLY
.196acb		60		rts		                    RTS
.196acc						ANSI_DCH
.196acc		5a		phy		                    PHY
.196acd		08		php		                    PHP
.196ace		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196ad0		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.196ad2		f0 04		beq $196ad8	                    BEQ default_1                       ; If 0, default to 1
.196ad4		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.196ad6		d0 04		bne $196adc	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.196ad8		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.196ada		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.196adc		a9 00		lda #$00	calc_src_dest       LDA #0
.196ade		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D        ; TMPPTR+1 := 0 (destination)
.196ae0		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.196ae2		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D          ; TMPPTR+1 := n (source)
.196ae4		38		sec		                    SEC                                 ; Calculate end offset
.196ae5		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D
.196ae7		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.196ae9		85 22		sta $0342	                    STA #S_ANSI_VARS.ARG1,D
.196aeb		a4 19		ldy $0339	del_loop            LDY #S_ANSI_VARS.TMPPTR1,D          ; text[dest] := text[source]
.196aed		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.196aef		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.196af1		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.196af3		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D          ; color[dest] := color[source]
.196af5		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.196af7		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.196af9		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.196afb		e6 19		inc $0339	                    INC #S_ANSI_VARS.TMPPTR1,D          ; Move to the next position
.196afd		e6 1a		inc $033a	                    INC #S_ANSI_VARS.TMPPTR1+1,D
.196aff		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.196b01		c5 22		cmp $0342	                    CMP #S_ANSI_VARS.ARG1,D
.196b03		90 e6		bcc $196aeb	                    BLT del_loop                        ; Keep looping until we reach the end
.196b05		38		sec		                    SEC                                 ; Calculate the starting point to fill with blanks
.196b06		a5 1a		lda $033a	                    LDA #S_ANSI_VARS.TMPPTR1+1,D
.196b08		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D
.196b0a		a8		tay		                    TAY
.196b0b		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.196b0d		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.196b0f		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196b11		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.196b13		c8		iny		                    INY                                 ; Move to the next byte
.196b14		c4 22		cpy $0342	                    CPY #S_ANSI_VARS.ARG1,D             ; Until we reach the end
.196b16		90 f3		bcc $196b0b	                    BLT fill_loop
.196b18		28		plp		                    PLP
.196b19		7a		ply		                    PLY
.196b1a		60		rts		                    RTS
.196b1b						ANSI_CSRRIGHT
.196b1b		da		phx		                    PHX
.196b1c		5a		phy		                    PHY
.196b1d		0b		phd		                    PHD
.196b1e		08		php		                    PHP
.196b1f		c2 30		rep #$30	                REP #$30        ; set A&X long
.196b21		22 36 66 19	jsl $196636	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.196b25		b0 1a		bcs $196b41	                    BCS done                            ; If invalid, just return
.196b27		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the new column
.196b29		e8		inx		                    INX
.196b2a		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the current row
.196b2c		e4 03		cpx $0323	                    CPX #S_ANSI_VARS.COLS_VISIBLE,D     ; Are we off screen?
.196b2e		90 0d		bcc $196b3d	                    BCC nowrap                          ; No: just set the position
.196b30		a2 00 00	ldx #$0000	                    LDX #0                              ; Yes: move to the first column
.196b33		c8		iny		                    INY                                 ; And move to the next row
.196b34		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Are we still off screen?
.196b36		90 05		bcc $196b3d	                    BCC nowrap                          ; No: just set the position
.196b38		88		dey		                    DEY                                 ; Yes: lock to the last row
.196b39		22 09 6c 19	jsl $196c09	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.196b3d		22 a5 6b 19	jsl $196ba5	nowrap              JSL ANSI_LOCATE                     ; Set the cursor position
.196b41		28		plp		done                PLP
.196b42		2b		pld		                    PLD
.196b43		7a		ply		                    PLY
.196b44		fa		plx		                    PLX
.196b45		6b		rtl		                    RTL
.196b46						ANSI_CSRLEFT
.196b46		da		phx		                    PHX
.196b47		5a		phy		                    PHY
.196b48		0b		phd		                    PHD
.196b49		08		php		                    PHP
.196b4a		c2 30		rep #$30	                REP #$30        ; set A&X long
.196b4c		22 36 66 19	jsl $196636	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.196b50		b0 0d		bcs $196b5f	                    BCS done                    ; If invalid, just return
.196b52		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D  ; Check that we are not already @ Zero
.196b54		f0 09		beq $196b5f	                    BEQ done                    ; If so, just ignore this call
.196b56		ca		dex		                    DEX
.196b57		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.196b59		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.196b5b		22 a5 6b 19	jsl $196ba5	                    JSL ANSI_LOCATE
.196b5f		28		plp		done                PLP
.196b60		2b		pld		                    PLD
.196b61		7a		ply		                    PLY
.196b62		fa		plx		                    PLX
.196b63		6b		rtl		                    RTL
.196b64						ANSI_CSRUP
.196b64		da		phx		                    PHX
.196b65		5a		phy		                    PHY
.196b66		0b		phd		                    PHD
.196b67		08		php		                    PHP
.196b68		c2 30		rep #$30	                REP #$30        ; set A&X long
.196b6a		22 36 66 19	jsl $196636	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.196b6e		b0 0d		bcs $196b7d	                    BCS done                    ; If invalid, just return
.196b70		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D  ; Check if we are not already @ Zero
.196b72		f0 09		beq $196b7d	                    BEQ done                    ; If we are, just ignore the call
.196b74		88		dey		                    DEY
.196b75		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.196b77		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D
.196b79		22 a5 6b 19	jsl $196ba5	                    JSL ANSI_LOCATE
.196b7d		28		plp		done                PLP
.196b7e		2b		pld		                    PLD
.196b7f		7a		ply		                    PLY
.196b80		fa		plx		                    PLX
.196b81		6b		rtl		                    RTL
.196b82						ANSI_CSRDOWN
.196b82		da		phx		                    PHX
.196b83		5a		phy		                    PHY
.196b84		0b		phd		                    PHD
.196b85		08		php		                    PHP
.196b86		c2 30		rep #$30	                REP #$30        ; set A&X long
.196b88		22 36 66 19	jsl $196636	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.196b8c		b0 12		bcs $196ba0	                    BCS done                            ; If invalid, just return
.196b8e		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the current column
.196b90		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the new row
.196b92		c8		iny		                    INY
.196b93		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Check to see if we're off screen
.196b95		90 05		bcc $196b9c	                    BCC noscroll                        ; No: go ahead and set the position
.196b97		88		dey		                    DEY                                 ; Yes: go back to the last row
.196b98		22 09 6c 19	jsl $196c09	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.196b9c		22 a5 6b 19	jsl $196ba5	noscroll            JSL ANSI_LOCATE                     ; And set the cursor position
.196ba0		28		plp		done                PLP
.196ba1		2b		pld		                    PLD
.196ba2		7a		ply		                    PLY
.196ba3		fa		plx		                    PLX
.196ba4		6b		rtl		                    RTL
.196ba5						ANSI_LOCATE
.196ba5		da		phx		                    PHX
.196ba6		5a		phy		                    PHY
.196ba7		0b		phd		                    PHD
.196ba8		08		php		                    PHP
.196ba9		22 36 66 19	jsl $196636	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.196bad		b0 55		bcs $196c04	                    BCS done                    ; If invalid, just return
.196baf		c2 30		rep #$30	                REP #$30        ; set A&X long
.196bb1						locate_scroll
.196bb1		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D
.196bb3		90 07		bcc $196bbc	                    BCC locate_scrolldone
.196bb5		22 09 6c 19	jsl $196c09	                    JSL ANSI_SCROLLUP
.196bb9		88		dey		                    DEY
.196bba		80 f5		bra $196bb1	                    BRA locate_scroll
.196bbc						locate_scrolldone
.196bbc		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.196bbe		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.196bc0		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.196bc2						locate_row
.196bc2		c0 00 00	cpy #$0000	                    CPY #$0
.196bc5		f0 08		beq $196bcf	                    BEQ locate_right
.196bc7		18		clc		locate_down         CLC
.196bc8		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.196bca		88		dey		                    DEY
.196bcb		f0 02		beq $196bcf	                    BEQ locate_right
.196bcd		80 f8		bra $196bc7	                    BRA locate_down
.196bcf		18		clc		locate_right        CLC
.196bd0		65 0e		adc $032e	                    ADC #S_ANSI_VARS.CURSORX,D      ; move the cursor right X columns
.196bd2		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D
.196bd4		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.196bd6		e2 20		sep #$20	                SEP #$20        ; set A short
.196bd8		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT
.196bdc		c9 04		cmp #$04	                    CMP #CHAN_EVID
.196bde		f0 0e		beq $196bee	                    beq locate_evid
.196be0		c2 20		rep #$20	                REP #$20        ; set A long
.196be2		98		tya		                    TYA
.196be3		8f 16 00 af	sta $af0016	                    STA @l VKY_TXT_CURSOR_Y_REG_L
.196be7		8a		txa		                    TXA
.196be8		8f 14 00 af	sta $af0014	                    STA @l VKY_TXT_CURSOR_X_REG_L
.196bec		80 0c		bra $196bfa	                    BRA update_colorpos
.196bee						locate_evid
.196bee		c2 20		rep #$20	                REP #$20        ; set A long
.196bf0		98		tya		                    TYA
.196bf1		8f 16 1e ae	sta $ae1e16	                    STA @l EVID_TXT_CURSOR_Y_REG_L
.196bf5		8a		txa		                    TXA
.196bf6		8f 14 1e ae	sta $ae1e14	                    STA @l EVID_TXT_CURSOR_X_REG_L
.196bfa						update_colorpos
.196bfa		c2 20		rep #$20	                REP #$20        ; set A long
.196bfc		18		clc		                    CLC
.196bfd		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.196bff		69 00 20	adc #$2000	                    ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.196c02		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D
.196c04		28		plp		done                PLP
.196c05		2b		pld		                    PLD
.196c06		7a		ply		                    PLY
.196c07		fa		plx		                    PLX
.196c08		6b		rtl		                    RTL
.196c09						ANSI_SCROLLUP
.196c09		da		phx		                    PHX
.196c0a		5a		phy		                    PHY
.196c0b		8b		phb		                    PHB
.196c0c		0b		phd		                    PHD
.196c0d		08		php		                    PHP
.196c0e		22 36 66 19	jsl $196636	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.196c12		90 03		bcc $196c17	                    BCC calc_size
.196c14		82 81 00	brl $196c98	                    BRL done                    ; If invalid, just return
.196c17						calc_size
.196c17		c2 30		rep #$30	                REP #$30        ; set A&X long
.196c19		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.196c1b		8f 00 01 00	sta $000100	                    STA @l UNSIGNED_MULT_A_LO
.196c1f		a5 07		lda $0327	                    LDA #S_ANSI_VARS.LINES_VISIBLE,D
.196c21		8f 02 01 00	sta $000102	                    STA @l UNSIGNED_MULT_B_LO
.196c25		af 04 01 00	lda $000104	                    LDA @l UNSIGNED_MULT_AL_LO
.196c29		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.196c2b		18		clc		                    CLC
.196c2c		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.196c2e		a8		tay		                    TAY
.196c2f		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.196c31		aa		tax		                    TAX
.196c32		e2 20		sep #$20	                SEP #$20        ; set A short
.196c34		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID
.196c38		c9 04		cmp #$04	                    CMP #CHAN_EVID
.196c3a		f0 09		beq $196c45	                    BEQ move_text_1                             ; Yes: do the move on the EVID memory
.196c3c						move_text_0
.196c3c		c2 20		rep #$20	                REP #$20        ; set A long
.196c3e		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.196c40		54 af af	mvn #$af,#$af	                    MVN `CS_TEXT_MEM_PTR,`CS_TEXT_MEM_PTR       ; Move the data on the main screen
.196c43		80 07		bra $196c4c	                    BRA scroll_color
.196c45						move_text_1
.196c45		c2 20		rep #$20	                REP #$20        ; set A long
.196c47		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.196c49		54 ae ae	mvn #$ae,#$ae	                    MVN `EVID_TEXT_MEM,`EVID_TEXT_MEM           ; Move the data on the EVID screen
.196c4c						scroll_color
.196c4c		c2 30		rep #$30	                REP #$30        ; set A&X long
.196c4e		18		clc		                    CLC
.196c4f		a5 16		lda $0336	                    LDA #S_ANSI_VARS.COLORBEGIN,D
.196c51		a8		tay		                    TAY
.196c52		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.196c54		aa		tax		                    TAX
.196c55		e2 20		sep #$20	                SEP #$20        ; set A short
.196c57		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID?
.196c5b		c9 04		cmp #$04	                    CMP #CHAN_EVID
.196c5d		f0 09		beq $196c68	                    BEQ move_color_1                            ; Yes: scroll the EVID color matrix
.196c5f						move_color_0
.196c5f		c2 20		rep #$20	                REP #$20        ; set A long
.196c61		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.196c63		54 af af	mvn #$af,#$af	                    MVN `CS_COLOR_MEM_PTR,`CS_COLOR_MEM_PTR     ; Move the data on the main screen
.196c66		80 07		bra $196c6f	                    BRA vicky_lastline
.196c68						move_color_1
.196c68		c2 20		rep #$20	                REP #$20        ; set A long
.196c6a		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.196c6c		54 ae ae	mvn #$ae,#$ae	                    MVN `EVID_COLOR_MEM,`EVID_COLOR_MEM         ; Move the data on the EVID screen
.196c6f						vicky_lastline
.196c6f		c2 20		rep #$20	                REP #$20        ; set A long
.196c71		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.196c73		48		pha		                    PHA
.196c74		18		clc		                    CLC
.196c75		65 00		adc $0320	                    ADC #S_ANSI_VARS.SCREENBEGIN,D
.196c77		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.196c79		a0 00 00	ldy #$0000	start_clear         LDY #0
.196c7c		a9 20 00	lda #$0020	                    LDA #' '
.196c7f		97 19		sta [$0339],y	clr_text            STA [#S_ANSI_VARS.TMPPTR1,D],Y
.196c81		c8		iny		                    INY
.196c82		c4 0f		cpy $032f	                    CPY #COLS_VISIBLE,D
.196c84		d0 f9		bne $196c7f	                    BNE clr_text
.196c86		68		pla		vicky_lastcolor     PLA
.196c87		18		clc		                    CLC
.196c88		65 16		adc $0336	                    ADC #S_ANSI_VARS.COLORBEGIN,D
.196c8a		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.196c8c		a0 00 00	ldy #$0000	start_color         LDY #0
.196c8f		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196c91		97 19		sta [$0339],y	clr_color           STA [#S_ANSI_VARS.TMPPTR1,D],Y
.196c93		c8		iny		                    INY
.196c94		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D
.196c96		d0 f9		bne $196c91	                    BNE clr_color
.196c98		28		plp		done                PLP
.196c99		2b		pld		                    PLD
.196c9a		ab		plb		                    PLB
.196c9b		7a		ply		                    PLY
.196c9c		fa		plx		                    PLX
.196c9d		6b		rtl		                    RTL
.196c9e						ANSI_CLRSCREEN
.196c9e		da		phx		                    PHX
.196c9f		5a		phy		                    PHY
.196ca0		0b		phd		                    PHD
.196ca1		08		php		                    PHP
.196ca2		22 36 66 19	jsl $196636	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.196ca6		b0 1e		bcs $196cc6	                    BCS done                            ; If invalid, just return
.196ca8		e2 20		sep #$20	                SEP #$20        ; set A short
.196caa		c2 10		rep #$10	                REP #$10        ; set X long
.196cac		a0 00 00	ldy #$0000	                    LDY #0
.196caf		a9 20		lda #$20	                    LDA #$20		                    ; Fill the Entire Screen with Space
.196cb1		97 00		sta [$0320],y	iclearloop0	        STA [#S_ANSI_VARS.SCREENBEGIN,D],Y
.196cb3		c8		iny		                    INY
.196cb4		c0 00 20	cpy #$2000	                    CPY #$2000
.196cb7		d0 f8		bne $196cb1	                    BNE iclearloop0
.196cb9		a0 00 00	ldy #$0000	                    LDY	#0
.196cbc		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D         ; Fill the current color
.196cbe		97 16		sta [$0336],y	evid_clearloop1     STA [#S_ANSI_VARS.COLORBEGIN,D],Y
.196cc0		c8		iny		                    INY
.196cc1		c0 00 20	cpy #$2000	                    CPY #$2000
.196cc4		d0 f8		bne $196cbe	                    BNE evid_clearloop1
.196cc6		28		plp		done                PLP
.196cc7		2b		pld		                    PLD
.196cc8		7a		ply		                    PLY
.196cc9		fa		plx		                    PLX
.196cca		6b		rtl		                    RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/Libraries/kbd_driver.asm

=16						KBD_INBUF_SIZE = 16         ; Number of scan codes that can be buffered
=0						KBD_STATE_IDLE = 0          ; Keyboard is IDLE
=1						KBD_STATE_E0 = 1            ; Keyboard has sent E0
=2						KBD_STATE_E02A = 2          ; Keybaord has sent E0 2A (leading to Print Screen E02AE037)
=3						KBD_STATE_E02AE0 = 3
=4						KBD_STATE_E1 = 4            ; Keyboard has sent E1 (leading to Pause/Break)
=5						KBD_STATE_E11D = 5
=6						KBD_STATE_E11D45 = 6
=7						KBD_STATE_E11D45E1 = 7
=8						KBD_STATE_E11D45E19D = 8
=9						KBD_STATE_E0B7 = 9          ; Keyboard has sent E0 B7 (leading to break of Print Screen E0 B7 E0 AA)
=10						KBD_STATE_E0B7E0 = 10
=0						KBD_ACTION_IGNORE = 0       ; State machine action: do nothing with the current byte
=1						KBD_ACTION_EMIT_BASE = 1    ; State machine action: translate scancode from base table and emit it
=2						KBD_ACTION_EMIT_E0 = 2      ; State machine action: translate scancode from E0 prefix table and emit it
=$01						KBD_STAT_OBF = $01          ; Keyboard status: Output Buffer is Full
=$02						KBD_STAT_IBF = $02          ; Keyboard status: Input Buffer is Full
=$a7						KBD_CTRL_CMD_DISABLE2 = $A7 ; Keybaord controller command: disable output device #2
=$a9						KBD_CTRL_CMD_ENABLE2 = $A9  ; Keybaord controller command: enable output device #2
=$aa						KBD_CTRL_CMD_SELFTEST = $AA ; Keyboard controller command: start self test
=$ab						KBD_CTRL_CMD_KBDTEST = $AB  ; Keyboard controller command: start keyboard test
=$ad						KBD_CTRL_CMD_DISABLE1 = $AD ; Keybaord controller command: disable output device #1
=$ae						KBD_CTRL_CMD_ENABLE1 = $AE  ; Keybaord controller command: enable output device #1
=$60						KBD_CTRL_CMD_WRITECMD = $60 ; Keyboard controller command: write to the command register
=$ff						KBD_CMD_RESET = $FF         ; Keyboard command: reset the keyboard
=$f4						KBD_CMD_ENABLE = $F4        ; Keyboard command: enable to keyboard
=$ed						KBD_CMD_SET_LED = $ED       ; Keyboard command: set the LEDs
=$55						KBD_RESP_OK = $55           ; Keyboard response: Command was OK
=$fa						KBD_RESP_ACK = $FA          ; Keyboard response: command acknowledged
=$01						KBD_LOCK_SCROLL = $01       ; LED/lock mask for Scroll Lock key
=$02						KBD_LOCK_NUMBER = $02       ; LED/lock mask for Num Lock key
=$04						KBD_LOCK_CAPS = $04         ; LED/lock mask for Caps Lock key
=$01						KBD_MOD_LSHIFT  = %00000001     ; Left shift is pressed
=$02						KBD_MOD_RSHIFT  = %00000010     ; Right shift is pressed
=$04						KBD_MOD_LCTRL   = %00000100     ; Left CTRL is pressed
=$08						KBD_MOD_RCTRL   = %00001000     ; Right CTRL is pressed
=$10						KBD_MOD_LALT    = %00010000     ; Left ALT is pressed
=$20						KBD_MOD_RALT    = %00100000     ; Right ALT is pressed
=$40						KBD_MOD_OS      = %01000000     ; OS key (e.g. Windows Key) is pressed
=$80						KBD_MOD_MENU    = %10000000     ; Menu key is pressed
=$80						KBD_CTRL_BREAK      = %10000000 ; CONTROL Flag to indicate if keyboard should capture BREAK
=$40						KBD_CTRL_MONITOR    = %01000000 ; CONTROL Flag to indicate if keyboard should trap ALT-BREAK to go to the monitor
=$80						KBD_STAT_BREAK  = %10000000     ; STATUS flag, BREAK has been pressed recently
=$01						KBD_STAT_SCAN   = %00000001     ; STATUS flag to indicate if there are scan codes in the queue
=$02						KBD_STAT_CHAR   = %00000010     ; STATUS flag to indicate if there are characters in the queue
=$61						KBD_SC_BREAK = $61              ; Scan code for the PAUSE/BREAK key
=$3a						KBD_SC_CAPSLOCK = $3A           ; Scan code for the CAPS lock key
=$45						KBD_SC_NUMLOCK = $45            ; Scan code for the NUM lock key
=$46						KBD_SC_SCROLL = $46             ; Scan code for the SCROLL lock key
=$2a						KBD_SC_LSHIFT = $2A             ; Scan code for the left SHIFT key
=$1d						KBD_SC_LCTRL = $1D              ; Scan code for the left CTLR key
=$38						KBD_SC_LALT = $38               ; Scan code for the left ALT key
=$36						KBD_SC_RSHIFT = $36             ; Scan code for the right SHIFT key
=$5e						KBD_SC_RCTRL = $5E              ; Scan code for the right CTRL key
=$5c						KBD_SC_RALT = $5C               ; Scan code for the right ALT key
=$38						KBD_SC_PIVOT = $38              ; Scan code we will use as a pivot for checking NUM lock
.0000						S_KBD_CONTROL
>0000						STATE               .byte ?                     ; The state of the keyboard controller state machine
>0001						CONTROL             .byte ?                     ; Control register
>0002						STATUS              .byte ?                     ; Status register
>0003						SC_BUF              .fill KBD_INBUF_SIZE        ; Buffer for keyboard scancodes read
>0013						SC_HEAD             .byte ?                     ; Index of the first scancode cell to write to
>0014						CHAR_BUF            .fill KBD_INBUF_SIZE        ; Character buffer
>0024						CHAR_HEAD           .byte ?                     ; Number of characters in the character buffer
>0025						MODIFIERS           .byte ?                     ; State of the modifier keys
>0026						LOCKS               .byte ?                     ; State of the lock keys: Caps, Num, Scroll
>0027						TBL_UNMOD           .dword ?                    ; Pointer to the scan code translation table for unmodified keys
>002b						TBL_SHIFT           .dword ?                    ; Pointer to the scan code translation table for shifted keys
>002f						TBL_CTRL            .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL
>0033						TBL_LOCK            .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
>0037						TBL_LOCK_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
>003b						TBL_CTRL_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL and SHIFT
.196ccb						IINITKEYBOARD
.196ccb		da		phx		                    PHX
.196ccc		5a		phy		                    PHY
.196ccd		0b		phd		                    PHD
.196cce		08		php		                    PHP
.196ccf		48		pha		                PHA             ; begin setdp macro
.196cd0		08		php		                PHP
.196cd1		c2 20		rep #$20	                REP #$20        ; set A long
.196cd3		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.196cd6		5b		tcd		                TCD
.196cd7		28		plp		                PLP
.196cd8		68		pla		                PLA             ; end setdp macro
.196cd9		e2 20		sep #$20	                SEP #$20        ; set A short
.196cdb		c2 10		rep #$10	                REP #$10        ; set X long
.196cdd		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1                        ; Disable the keyboard interrupts while we get things started
.196ce1		09 01		ora #$01	                    ORA #FNX1_INT00_KBD
.196ce3		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.196ce7		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                         ; Set the state machine to the starting IDLE state
.196ce9		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.196ceb		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D                ; Mark the scancode buffer as empty
.196ced		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D              ; Mark the character buffer as empty
.196cef		64 25		stz $0f25	                    STZ #S_KBD_CONTROL.MODIFIERS,D              ; Default to modifiers being off
.196cf1		64 02		stz $0f02	                    STZ #S_KBD_CONTROL.STATUS,D                 ; Clear the status register
.196cf3		a9 80		lda #$80	                    LDA #KBD_CTRL_BREAK                         ; Enable BREAK processing
.196cf5		85 01		sta $0f01	                    STA #S_KBD_CONTROL.CONTROL,D
.196cf7		c2 20		rep #$20	                REP #$20        ; set A long
.196cf9		a9 00 75	lda #$7500	                    LDA #<>SC_US_UNMOD
.196cfc		85 27		sta $0f27	                    STA #S_KBD_CONTROL.TBL_UNMOD,D
.196cfe		a9 80 75	lda #$7580	                    LDA #<>SC_US_SHFT
.196d01		85 2b		sta $0f2b	                    STA #S_KBD_CONTROL.TBL_SHIFT,D
.196d03		a9 00 76	lda #$7600	                    LDA #<>SC_US_CTRL
.196d06		85 2f		sta $0f2f	                    STA #S_KBD_CONTROL.TBL_CTRL,D
.196d08		a9 80 76	lda #$7680	                    LDA #<>SC_US_LOCK
.196d0b		85 33		sta $0f33	                    STA #S_KBD_CONTROL.TBL_LOCK,D
.196d0d		a9 00 77	lda #$7700	                    LDA #<>SC_US_LOCK_SHFT
.196d10		85 37		sta $0f37	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.196d12		a9 80 77	lda #$7780	                    LDA #<>SC_US_CTRL_SHFT
.196d15		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.196d17		e2 20		sep #$20	                SEP #$20        ; set A short
.196d19		a9 19		lda #$19	                    LDA #`SC_US_UNMOD
.196d1b		85 29		sta $0f29	                    STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.196d1d		a9 19		lda #$19	                    LDA #`SC_US_SHFT
.196d1f		85 2d		sta $0f2d	                    STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.196d21		a9 19		lda #$19	                    LDA #`SC_US_CTRL
.196d23		85 31		sta $0f31	                    STA #S_KBD_CONTROL.TBL_CTRL+2,D
.196d25		a9 19		lda #$19	                    LDA #`SC_US_LOCK
.196d27		85 35		sta $0f35	                    STA #S_KBD_CONTROL.TBL_LOCK+2,D
.196d29		a9 19		lda #$19	                    LDA #`SC_US_LOCK_SHFT
.196d2b		85 39		sta $0f39	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.196d2d		a9 19		lda #$19	                    LDA #`SC_US_CTRL_SHFT
.196d2f		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.196d31		a9 ad		lda #$ad	                    LDA #KBD_CTRL_CMD_DISABLE1  ; Disable the keyboard sending data
.196d33		22 b7 6d 19	jsl $196db7	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.196d37		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.196d3b		af 03 18 af	lda $af1803	flush_output        LDA @l KBD_DATA_BUF         ; We just throw that away
.196d3f		a9 aa		lda #$aa	                    LDA #KBD_CTRL_CMD_SELFTEST  ; Send the self test command
.196d41		22 c2 6d 19	jsl $196dc2	                    JSL KBD_CTRL_SND_CMD
.196d45		c9 55		cmp #$55	                    CMP #KBD_RESP_OK            ; Did we get an OK?
.196d47		f0 05		beq $196d4e	                    BEQ test_AB
.196d49		a9 02		lda #$02	                    LDA #2                      ; Return error #2
.196d4b		82 59 00	brl $196da7	                    BRL done
.196d4e		a9 ab		lda #$ab	test_AB             LDA #KBD_CTRL_CMD_KBDTEST   ; Send the keyboard test command
.196d50		22 c2 6d 19	jsl $196dc2	                    JSL KBD_CTRL_SND_CMD
.196d54		c9 00		cmp #$00	                    CMP #0                      ; Did we get a good response?
.196d56		f0 05		beq $196d5d	                    BEQ write_command
.196d58		a9 03		lda #$03	                    LDA #3                      ; Return error #3
.196d5a		82 4a 00	brl $196da7	                    BRL done
.196d5d		a9 60		lda #$60	write_command       LDA #KBD_CTRL_CMD_WRITECMD
.196d5f		a2 43 00	ldx #$0043	                    LDX #%01000011              ; Translate to set 1, no interrupts
.196d62		22 f6 6d 19	jsl $196df6	                    JSL KBD_CTRL_SND_CMD_P
.196d66		a9 ae		lda #$ae	enable_dev1         LDA #KBD_CTRL_CMD_ENABLE1   ; Re-enable the keyboard sending data
.196d68		22 b7 6d 19	jsl $196db7	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.196d6c		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.196d70		a9 ff		lda #$ff	reset_kbd           LDA #KBD_CMD_RESET          ; Send a reset command to the keyboard
.196d72		a2 ff ff	ldx #$ffff	                    LDX #$FFFF                  ; And wait a while for it to complete the reset
.196d75		22 d3 6d 19	jsl $196dd3	                    JSL KBD_SND_CMD
.196d79		a0 80 00	ldy #$0080	                    LDY #128                    ; Attemp enabling the keyboard 128 times
.196d7c		a9 f4		lda #$f4	enable_loop         LDA #KBD_CMD_ENABLE         ; Try to enable the keyboard
.196d7e		a2 00 00	ldx #$0000	                    LDX #0
.196d81		22 d3 6d 19	jsl $196dd3	                    JSL KBD_SND_CMD
.196d85		a9 36		lda #$36	set_led             LDA #"6"
.196d87		22 18 10 00	jsl $001018	                    JSL PUTC
.196d8b		a9 00		lda #$00	                    LDA #0                      ; Set the state of the locks
.196d8d		22 fd 6f 19	jsl $196ffd	                    JSL KBD_SETLOCKS
.196d91		af 41 01 00	lda $000141	                    LDA @l INT_PENDING_REG1     ; Read the Pending Register &
.196d95		29 01		and #$01	                    AND #FNX1_INT00_KBD
.196d97		8f 41 01 00	sta $000141	                    STA @l INT_PENDING_REG1     ; Writing it back will clear the Active Bit
.196d9b		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.196d9f		29 fe		and #$fe	                    AND #~FNX1_INT00_KBD
.196da1		8f 4d 01 00	sta $00014d	                    STA @l INT_MASK_REG1
.196da5		a9 00		lda #$00	return_0            LDA #0                      ; Return status code for success
.196da7		28		plp		done                PLP
.196da8		2b		pld		                    PLD
.196da9		7a		ply		                    PLY
.196daa		fa		plx		                    PLX
.196dab		6b		rtl		                    RTL
.196dac						KBD_WAIT_OUT
.196dac		48		pha		                    PHA
.196dad		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.196db1		89 01		bit #$01	                    BIT #KBD_STAT_OBF       ; Check to see if the output buffer is full
.196db3		f0 f8		beq $196dad	                    BEQ wait                ; If it isn't, keep waiting
.196db5		68		pla		                    PLA
.196db6		6b		rtl		                    RTL
.196db7						KBD_WAIT_IN
.196db7		48		pha		                    PHA
.196db8		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.196dbc		89 02		bit #$02	                    BIT #KBD_STAT_IBF       ; Check to see if the input buffer has data
.196dbe		d0 f8		bne $196db8	                    BNE wait                ; If not, wait for it to have something
.196dc0		68		pla		                    PLA
.196dc1		6b		rtl		                    RTL
.196dc2						KBD_CTRL_SND_CMD
.196dc2		22 b7 6d 19	jsl $196db7	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.196dc6		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.196dca		22 ac 6d 19	jsl $196dac	                    JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.196dce		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.196dd2		6b		rtl		                    RTL
.196dd3						KBD_SND_CMD
.196dd3		22 b7 6d 19	jsl $196db7	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.196dd7		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.196ddb		c2 10		rep #$10	                REP #$10        ; set X long
.196ddd		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.196de0		f0 0b		beq $196ded	                    BEQ get_response        ; If 0, check for a response
.196de2		ca		dex		                    DEX                     ; Count down
.196de3		ea		nop		                    NOP                     ; And do a delay
.196de4		ea		nop		                    NOP
.196de5		ea		nop		                    NOP
.196de6		ea		nop		                    NOP
.196de7		ea		nop		                    NOP
.196de8		ea		nop		                    NOP
.196de9		ea		nop		                    NOP
.196dea		ea		nop		                    NOP
.196deb		80 f0		bra $196ddd	                    BRA delay
.196ded		22 ac 6d 19	jsl $196dac	get_response        JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.196df1		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.196df5		6b		rtl		                    RTL
.196df6						KBD_CTRL_SND_CMD_P
.196df6		22 b7 6d 19	jsl $196db7	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.196dfa		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.196dfe		8a		txa		                    TXA
.196dff		22 b7 6d 19	jsl $196db7	                    JSL KBD_WAIT_IN         ; Send the parameter to the controller
.196e03		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.196e07		6b		rtl		                    RTL
.196e08						KBD_PROCESS_BYTE
.196e08		8b		phb		                    PHB
.196e09		0b		phd		                    PHD
.196e0a		08		php		                    PHP
.196e0b		48		pha		                PHA             ; begin setdbr macro
.196e0c		08		php		                PHP
.196e0d		e2 20		sep #$20	                SEP #$20        ; set A short
.196e0f		a9 19		lda #$19	                LDA #`KBD_STATE_MACH
.196e11		48		pha		                PHA
.196e12		ab		plb		                PLB
.196e13		28		plp		                PLP
.196e14		68		pla		                PLA             ; end setdbr macro
.196e15		48		pha		                PHA             ; begin setdp macro
.196e16		08		php		                PHP
.196e17		c2 20		rep #$20	                REP #$20        ; set A long
.196e19		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.196e1c		5b		tcd		                TCD
.196e1d		28		plp		                PLP
.196e1e		68		pla		                PLA             ; end setdp macro
.196e1f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196e21		a9 00		lda #$00	                    LDA #0
.196e23		8f e0 00 00	sta $0000e0	                    STA @l MOUSE_IDX                    ; A bit of a hack to try to stabilize the mouse
.196e27		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF                 ; Get the current scancode byte
.196e2b		d0 03		bne $196e30	                    BNE save_scancode
.196e2d		82 67 00	brl $196e97	                    BRL done                            ; If it's 0, just ignore it
.196e30						LOCALS
>0001						l_break             .byte ?                             ; The make/break bit of the scancode
>0002						l_code              .byte ?                             ; The scancode
.196e30		48		pha		save_scancode       PHA
.196e31		48		pha		                    PHA
.196e32		29 80		and #$80	                    AND #$80
.196e34		83 01		sta $01,s	                    STA l_break                         ; Save the make/break bit
.196e36		a2 00		ldx #$00	                    LDX #0                              ; Start from the beginning
.196e38		bf 00 74 19	lda $197400,x	chk_transition      LDA @l KBD_STATE_MACH,X             ; Get the tranition's start state
.196e3c		c9 ff		cmp #$ff	                    CMP #$FF
.196e3e		d0 03		bne $196e43	                    BNE compare_state
.196e40		82 54 00	brl $196e97	                    BRL done                            ; If $FF: we've reached the end... this is an error... just ignore it?
.196e43		c5 00		cmp $0f00	compare_state       CMP #S_KBD_CONTROL.STATE,D          ; Compare it to the current state
.196e45		d0 0e		bne $196e55	                    BNE next_transition                 ; If they don't match, go to the next transition
.196e47		bf 01 74 19	lda $197401,x	                    LDA @l KBD_STATE_MACH+1,X           ; Get the tranition's test byte
.196e4b		f0 0e		beq $196e5b	                    BEQ apply                           ; Is it 0? Yes: the default applies
.196e4d		a3 02		lda $02,s	                    LDA l_code                          ; Otherwise: get the scan code back
.196e4f		df 01 74 19	cmp $197401,x	                    CMP @l KBD_STATE_MACH+1,X           ; Compare it to the transition's test byte
.196e53		f0 06		beq $196e5b	                    BEQ apply                           ; If equal: this matches, apply the transition
.196e55		e8		inx		next_transition     INX                                 ; Move to the next transition
.196e56		e8		inx		                    INX
.196e57		e8		inx		                    INX
.196e58		e8		inx		                    INX
.196e59		80 dd		bra $196e38	                    BRA chk_transition                  ; Check to see if the next transition applies
.196e5b		bf 02 74 19	lda $197402,x	apply               LDA @l KBD_STATE_MACH+2,X           ; Get the tranition's destination state
.196e5f		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D          ; And save it as our new state
.196e61		bf 03 74 19	lda $197403,x	                    LDA @l KBD_STATE_MACH+3,X           ; Get the tranition's action
.196e65		c9 00		cmp #$00	                    CMP #KBD_ACTION_IGNORE              ; Is it IGNORE?
.196e67		f0 2e		beq $196e97	                    BEQ done                            ; Yes: we're done for now
.196e69		c9 01		cmp #$01	                    CMP #KBD_ACTION_EMIT_BASE           ; Is it EMIT_BASE?
.196e6b		f0 06		beq $196e73	                    BEQ emit_base                       ; Yes: emit the translation of the base byte
.196e6d		c9 02		cmp #$02	                    CMP #KBD_ACTION_EMIT_E0             ; Is it EMIT_E0?
.196e6f		f0 0f		beq $196e80	                    BEQ emit_e0                         ; Yes: emit the translation of the E0 prefixed byte
.196e71		80 18		bra $196e8b	                    BRA emit_A                          ; Otherwise: just emit the action byte as the new scan code
.196e73		a3 02		lda $02,s	emit_base           LDA l_code
.196e75		29 7f		and #$7f	                    AND #$7F                            ; Strip off the make/break bit
.196e77		aa		tax		                    TAX
.196e78		bf 00 73 19	lda $197300,x	                    LDA @l TBL_SET1,X                   ; Get the translation of the base scan code
.196e7c		03 01		ora $01,s	                    ORA l_break                         ; Add the make/break bit back
.196e7e		80 0b		bra $196e8b	                    BRA emit_A                          ; Emit the translation
.196e80		a3 02		lda $02,s	emit_e0             LDA l_code
.196e82		29 7f		and #$7f	                    AND #$7F                            ; Strip off any make/break bit
.196e84		aa		tax		                    TAX
.196e85		bf 80 73 19	lda $197380,x	                    LDA @l TBL_SET1_E0,X                ; Get the translation of the E0 prefixed scan code
.196e89		03 01		ora $01,s	                    ORA l_break                         ; Add in the make/break flag
.196e8b		c9 00		cmp #$00	emit_A              CMP #0                              ; Is the code NUL?
.196e8d		f0 08		beq $196e97	                    BEQ done                            ; If so, skip enqueuing it
.196e8f		22 9f 6e 19	jsl $196e9f	enqueue             JSL KBD_SC_ENQUEUE                  ; Enqueue the scancode
.196e93		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                 ; Set the state machine to the initial state
.196e95		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.196e97						done
.196e97		e2 20		sep #$20	                SEP #$20        ; set A short
.196e99		68		pla		                    PLA                                 ; Clean the scan code byte from the stack
.196e9a		68		pla		                    PLA
.196e9b		28		plp		                    PLP
.196e9c		2b		pld		                    PLD
.196e9d		ab		plb		                    PLB
.196e9e		6b		rtl		                    RTL
.196e9f						KBD_SC_ENQUEUE
.196e9f		0b		phd		                    PHD
.196ea0		08		php		                    PHP
.196ea1		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.196ea2		48		pha		                PHA             ; begin setdp macro
.196ea3		08		php		                PHP
.196ea4		c2 20		rep #$20	                REP #$20        ; set A long
.196ea6		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.196ea9		5b		tcd		                TCD
.196eaa		28		plp		                PLP
.196eab		68		pla		                PLA             ; end setdp macro
.196eac		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196eae		c9 00		cmp #$00	                    CMP #0                          ; Is the scan code a NUL?
.196eb0		f0 2f		beq $196ee1	                    BEQ done                        ; Yes: just ignore
.196eb2		c9 61		cmp #$61	                    CMP #KBD_SC_BREAK               ; Is it the BREAK key?
.196eb4		d0 10		bne $196ec6	                    BNE chk_locks                   ; No: check the various lock keys
.196eb6		a5 01		lda $0f01	                    LDA #S_KBD_CONTROL.CONTROL,D
.196eb8		89 80		bit #$80	                    BIT #KBD_CTRL_BREAK                 ; Are we processing BREAK?
.196eba		f0 08		beq $196ec4	                    BEQ enqueue_break                   ; No: enqueue it as normal
.196ebc		a9 80		lda #$80	                    LDA #KBD_STAT_BREAK                 ; Yes: turn on the BREAK bit
.196ebe		05 02		ora $0f02	                    ORA #S_KBD_CONTROL.STATUS,D
.196ec0		85 02		sta $0f02	                    STA #S_KBD_CONTROL.STATUS,D
.196ec2		80 1d		bra $196ee1	                    BRA done                            ; And we're done
.196ec4		a9 61		lda #$61	enqueue_break       LDA #KBD_SC_BREAK
.196ec6		c9 3a		cmp #$3a	chk_locks           CMP #KBD_SC_CAPSLOCK            ; Is it the CAPS lock?
.196ec8		f0 1a		beq $196ee4	                    BEQ toggle_caps                 ; Yes: toggle the CAPS lock bits
.196eca		c9 45		cmp #$45	                    CMP #KBD_SC_NUMLOCK             ; Is it the NUM lock?
.196ecc		f0 20		beq $196eee	                    BEQ toggle_num                  ; Yes: toggle the NUM lock bits
.196ece		c9 46		cmp #$46	                    CMP #KBD_SC_SCROLL              ; Is it the SCROLL lock?
.196ed0		f0 22		beq $196ef4	                    BEQ toggle_scroll               ; Yes: toggle the SCROLL lock bits
.196ed2		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.196ed4		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.196ed6		f0 09		beq $196ee1	                    BEQ done                        ; Yes: we're full... ignore the scancode
.196ed8		95 03		sta $0f03,x	                    STA #S_KBD_CONTROL.SC_BUF,D,X   ; No: we have room, write the scan code to the buffer
.196eda		e8		inx		                    INX                             ; Advance to the next location
.196edb		86 13		stx $0f13	                    STX #S_KBD_CONTROL.SC_HEAD,D
.196edd		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Set the KBD_STAT_SCAN bit
.196edf		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.196ee1		28		plp		done                PLP
.196ee2		2b		pld		                    PLD
.196ee3		6b		rtl		                    RTL
.196ee4		a5 26		lda $0f26	toggle_caps         LDA #S_KBD_CONTROL.LOCKS,D
.196ee6		49 04		eor #$04	                    EOR #KBD_LOCK_CAPS              ; Toggle the CAPS lock
.196ee8		22 fd 6f 19	jsl $196ffd	save_locks          JSL KBD_SETLOCKS                ; Set the locks
.196eec		80 f3		bra $196ee1	                    BRA done
.196eee		a5 26		lda $0f26	toggle_num          LDA #S_KBD_CONTROL.LOCKS,D
.196ef0		49 02		eor #$02	                    EOR #KBD_LOCK_NUMBER            ; Toggle the NUM lock
.196ef2		80 f4		bra $196ee8	                    BRA save_locks
.196ef4		a5 26		lda $0f26	toggle_scroll       LDA #S_KBD_CONTROL.LOCKS,D
.196ef6		49 01		eor #$01	                    EOR #KBD_LOCK_SCROLL            ; Toggle the SCROLL lock
.196ef8		80 ee		bra $196ee8	                    BRA save_locks
.196efa						KBD_CHAR_ENQUEUE
.196efa		0b		phd		                    PHD
.196efb		08		php		                    PHP
.196efc		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.196efd		48		pha		                PHA             ; begin setdp macro
.196efe		08		php		                PHP
.196eff		c2 20		rep #$20	                REP #$20        ; set A long
.196f01		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.196f04		5b		tcd		                TCD
.196f05		28		plp		                PLP
.196f06		68		pla		                PLA             ; end setdp macro
.196f07		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196f09		c9 00		cmp #$00	                    CMP #0                          ; Is the character a NUL?
.196f0b		f0 0f		beq $196f1c	                    BEQ done                        ; Yes: just ignore
.196f0d		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D  ; Get the index of the next free spot
.196f0f		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.196f11		f0 09		beq $196f1c	                    BEQ done                        ; Yes: we're full... ignore the scancode
.196f13		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X ; No: we have room, write the scan code to the buffer
.196f15		e8		inx		                    INX                             ; Advance to the next location
.196f16		86 24		stx $0f24	                    STX #S_KBD_CONTROL.CHAR_HEAD,D
.196f18		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR              ; Set the KBD_STAT_CHAR bit
.196f1a		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.196f1c		28		plp		done                PLP
.196f1d		2b		pld		                    PLD
.196f1e		6b		rtl		                    RTL
.196f1f						KBD_CHAR_DEQUEUE
.196f1f		da		phx		                    PHX
.196f20		0b		phd		                    PHD
.196f21		08		php		                    PHP
.196f22		48		pha		                PHA             ; begin setdp macro
.196f23		08		php		                PHP
.196f24		c2 20		rep #$20	                REP #$20        ; set A long
.196f26		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.196f29		5b		tcd		                TCD
.196f2a		28		plp		                PLP
.196f2b		68		pla		                PLA             ; end setdp macro
.196f2c		78		sei		                    SEI                                 ; Disable IRQ for the duration of this routine to avoid race conditions
.196f2d		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196f2f		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; Get the index of the next free spot
.196f31		f0 21		beq $196f54	                    BEQ return_empty                    ; If it's 0, we have no data
.196f33		a5 14		lda $0f14	                    LDA #S_KBD_CONTROL.CHAR_BUF,D       ; Get the character at the head of the queue
.196f35		48		pha		                    PHA                                 ; Save it
.196f36		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; How many bytes were there?
.196f38		e0 01		cpx #$01	                    CPX #1                              ; Is it one?
.196f3a		d0 08		bne $196f44	                    BNE copy_down                       ; No: we need to copy down the remaining bytes
.196f3c		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D      ; Yes: mark that we have no data in the queue now
.196f3e		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR                  ; Clear the KBD_STAT_CHAR bit
.196f40		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.196f42		80 0d		bra $196f51	                    BRA return_head                     ; And return the character we found
.196f44		a2 00		ldx #$00	copy_down           LDX #0                              ; Starting at the beginning of the buffer...
.196f46		b5 15		lda $0f15,x	loop                LDA #S_KBD_CONTROL.CHAR_BUF+1,D,X   ; Get the next byte
.196f48		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X     ; Move it down
.196f4a		e8		inx		                    INX                                 ; And move to the next byte
.196f4b		e4 24		cpx $0f24	                    CPX #S_KBD_CONTROL.CHAR_HEAD,D      ; Have we reached the end?
.196f4d		d0 f7		bne $196f46	                    BNE loop                            ; No: keep copying bytes
.196f4f		c6 24		dec $0f24	                    DEC #S_KBD_CONTROL.CHAR_HEAD,D      ; Decrement the index
.196f51		68		pla		return_head         PLA                                 ; Get the character back
.196f52		80 02		bra $196f56	                    BRA done                            ; And return it
.196f54		a9 00		lda #$00	return_empty        LDA #0                              ; Return: 0 for no character
.196f56		28		plp		done                PLP
.196f57		2b		pld		                    PLD
.196f58		fa		plx		                    PLX
.196f59		6b		rtl		                    RTL
.196f5a						KBD_GET_SCANCODE
.196f5a		da		phx		                    PHX
.196f5b		0b		phd		                    PHD
.196f5c		08		php		                    PHP
.196f5d		48		pha		                PHA             ; begin setdp macro
.196f5e		08		php		                PHP
.196f5f		c2 20		rep #$20	                REP #$20        ; set A long
.196f61		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.196f64		5b		tcd		                TCD
.196f65		28		plp		                PLP
.196f66		68		pla		                PLA             ; end setdp macro
.196f67		78		sei		                    SEI                             ; Disable IRQ for the duration of this routine to avoid race conditions
.196f68		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196f6a		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.196f6c		f0 21		beq $196f8f	                    BEQ return_empty                ; If it's 0, we have no data
.196f6e		a5 03		lda $0f03	                    LDA #S_KBD_CONTROL.SC_BUF,D     ; Get the scan code at the head of the queue
.196f70		48		pha		                    PHA                             ; Save it
.196f71		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; How many bytes were there?
.196f73		e0 01		cpx #$01	                    CPX #1                          ; Is it one?
.196f75		d0 08		bne $196f7f	                    BNE copy_down                   ; No: we need to copy down the remaining bytes
.196f77		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D    ; Yes: mark that we have no data in the queue now
.196f79		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Clear the KBD_STAT_SCAN bit
.196f7b		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.196f7d		80 0d		bra $196f8c	                    BRA return_head                 ; And return the scan code we found
.196f7f		a2 00		ldx #$00	copy_down           LDX #0                          ; Starting at the beginning of the buffer...
.196f81		b5 04		lda $0f04,x	loop                LDA #S_KBD_CONTROL.SC_BUF+1,D,X ; Get the next byte
.196f83		85 03		sta $0f03	                    STA #S_KBD_CONTROL.SC_BUF,D     ; Move it down
.196f85		e8		inx		                    INX                             ; And move to the next byte
.196f86		e4 13		cpx $0f13	                    CPX #S_KBD_CONTROL.SC_HEAD,D    ; Have we reached the end?
.196f88		d0 f7		bne $196f81	                    BNE loop                        ; No: keep copying bytes
.196f8a		c6 13		dec $0f13	                    DEC #S_KBD_CONTROL.SC_HEAD,D    ; Reduce the index to the next free byte
.196f8c		68		pla		return_head         PLA                             ; Get the scan code back
.196f8d		80 02		bra $196f91	                    BRA done                        ; And return it
.196f8f		a9 00		lda #$00	return_empty        LDA #0                          ; Return: 0 for no scan code
.196f91		28		plp		done                PLP
.196f92		2b		pld		                    PLD
.196f93		fa		plx		                    PLX
.196f94		6b		rtl		                    RTL
.196f95						KBD_TEST_BREAK
.196f95		0b		phd		                PHD
.196f96		08		php		                PHP
.196f97		48		pha		                PHA             ; begin setdp macro
.196f98		08		php		                PHP
.196f99		c2 20		rep #$20	                REP #$20        ; set A long
.196f9b		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.196f9e		5b		tcd		                TCD
.196f9f		28		plp		                PLP
.196fa0		68		pla		                PLA             ; end setdp macro
.196fa1		e2 20		sep #$20	                SEP #$20        ; set A short
.196fa3		a9 80		lda #$80	                LDA #KBD_STAT_BREAK             ; Check the BREAK bit in STATUS
.196fa5		14 02		trb $0f02	                TRB #S_KBD_CONTROL.STATUS,D     ; ... and clear it
.196fa7		d0 04		bne $196fad	                BNE ret_true                    ; If it was set, return TRUE
.196fa9		28		plp		ret_false       PLP                             ; Otherwise, return false
.196faa		2b		pld		                PLD
.196fab		18		clc		                CLC
.196fac		6b		rtl		                RTL
.196fad		28		plp		ret_true        PLP
.196fae		2b		pld		                PLD
.196faf		38		sec		                SEC
.196fb0		6b		rtl		                RTL
.196fb1						KBD_GETMODS_ANSI
.196fb1		0b		phd		                    PHD
.196fb2		08		php		                    PHP
.196fb3		48		pha		                PHA             ; begin setdp macro
.196fb4		08		php		                PHP
.196fb5		c2 20		rep #$20	                REP #$20        ; set A long
.196fb7		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.196fba		5b		tcd		                TCD
.196fbb		28		plp		                PLP
.196fbc		68		pla		                PLA             ; end setdp macro
.196fbd		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196fbf		a9 00		lda #$00	                    LDA #0                      ; Make space for the result code
.196fc1		48		pha		                    PHA
>0001						l_result            .byte ?
.196fc2		a5 25		lda $0f25	                    LDA #S_KBD_CONTROL.MODIFIERS,D
.196fc4		89 03		bit #$03	                    BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT
.196fc6		f0 06		beq $196fce	                    BEQ check_alt
.196fc8		a3 01		lda $01,s	                    LDA l_result
.196fca		09 02		ora #$02	                    ORA #%00000010
.196fcc		83 01		sta $01,s	                    STA l_result
.196fce		a5 25		lda $0f25	check_alt           LDA #S_KBD_CONTROL.MODIFIERS,D
.196fd0		89 30		bit #$30	                    BIT #KBD_MOD_LALT | KBD_MOD_RALT
.196fd2		f0 06		beq $196fda	                    BEQ check_ctrl
.196fd4		a3 01		lda $01,s	                    LDA l_result
.196fd6		09 04		ora #$04	                    ORA #%00000100
.196fd8		83 01		sta $01,s	                    STA l_result
.196fda		a5 25		lda $0f25	check_ctrl          LDA #S_KBD_CONTROL.MODIFIERS,D
.196fdc		89 0c		bit #$0c	                    BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL
.196fde		f0 06		beq $196fe6	                    BEQ return_result
.196fe0		a3 01		lda $01,s	                    LDA l_result
.196fe2		09 08		ora #$08	                    ORA #%00001000
.196fe4		83 01		sta $01,s	                    STA l_result
.196fe6		68		pla		return_result       PLA
.196fe7		28		plp		                    PLP
.196fe8		2b		pld		                    PLD
.196fe9		6b		rtl		                    RTL
.196fea						KBD_GETLOCKS
.196fea		0b		phd		                PHD
.196feb		08		php		                PHP
.196fec		48		pha		                PHA             ; begin setdp macro
.196fed		08		php		                PHP
.196fee		c2 20		rep #$20	                REP #$20        ; set A long
.196ff0		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.196ff3		5b		tcd		                TCD
.196ff4		28		plp		                PLP
.196ff5		68		pla		                PLA             ; end setdp macro
.196ff6		e2 20		sep #$20	                SEP #$20        ; set A short
.196ff8		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D
.196ffa		28		plp		                PLP
.196ffb		2b		pld		                PLD
.196ffc		6b		rtl		                RTL
.196ffd						KBD_SETLOCKS
.196ffd		0b		phd		                PHD
.196ffe		08		php		                PHP
.196fff		48		pha		                PHA             ; begin setdp macro
.197000		08		php		                PHP
.197001		c2 20		rep #$20	                REP #$20        ; set A long
.197003		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197006		5b		tcd		                TCD
.197007		28		plp		                PLP
.197008		68		pla		                PLA             ; end setdp macro
.197009		e2 20		sep #$20	                SEP #$20        ; set A short
.19700b		85 26		sta $0f26	                STA #S_KBD_CONTROL.LOCKS,D
.19700d		28		plp		                PLP
.19700e		2b		pld		                PLD
.19700f		6b		rtl		                RTL
.197010						KBD_GET_CONTROL
.197010		0b		phd		                PHD
.197011		08		php		                PHP
.197012		48		pha		                PHA             ; begin setdp macro
.197013		08		php		                PHP
.197014		c2 20		rep #$20	                REP #$20        ; set A long
.197016		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197019		5b		tcd		                TCD
.19701a		28		plp		                PLP
.19701b		68		pla		                PLA             ; end setdp macro
.19701c		e2 20		sep #$20	                SEP #$20        ; set A short
.19701e		a5 01		lda $0f01	                LDA #S_KBD_CONTROL.CONTROL,D
.197020		28		plp		                PLP
.197021		2b		pld		                PLD
.197022		6b		rtl		                RTL
.197023						KBD_SET_CONTROL
.197023		0b		phd		                PHD
.197024		08		php		                PHP
.197025		48		pha		                PHA             ; begin setdp macro
.197026		08		php		                PHP
.197027		c2 20		rep #$20	                REP #$20        ; set A long
.197029		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.19702c		5b		tcd		                TCD
.19702d		28		plp		                PLP
.19702e		68		pla		                PLA             ; end setdp macro
.19702f		e2 20		sep #$20	                SEP #$20        ; set A short
.197031		85 01		sta $0f01	                STA #S_KBD_CONTROL.CONTROL,D
.197033		28		plp		                PLP
.197034		2b		pld		                PLD
.197035		6b		rtl		                RTL
.197036						KBD_GETCW
.197036		22 42 70 19	jsl $197042	                JSL KBD_GETC
.19703a		c9 00		cmp #$00	                CMP #0
.19703c		f0 01		beq $19703f	                BEQ wait
.19703e		6b		rtl		                RTL
.19703f		cb		wai		wait            WAI
.197040		80 f4		bra $197036	                BRA KBD_GETCW
.197042						KBD_GETC
.197042		0b		phd		                PHD
.197043		08		php		                PHP
.197044		48		pha		                PHA             ; begin setdp macro
.197045		08		php		                PHP
.197046		c2 20		rep #$20	                REP #$20        ; set A long
.197048		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.19704b		5b		tcd		                TCD
.19704c		28		plp		                PLP
.19704d		68		pla		                PLA             ; end setdp macro
.19704e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197050		22 1f 6f 19	jsl $196f1f	                JSL KBD_CHAR_DEQUEUE        ; Try to fetch a character from the character queue
.197054		c9 00		cmp #$00	                CMP #0                      ; Did we get anything back?
.197056		f0 03		beq $19705b	                BEQ get_scancode            ; No: try to get a scan code
.197058		82 cb 00	brl $197126	                BRL done                    ; Yes: return the character we had queued
.19705b		22 5a 6f 19	jsl $196f5a	get_scancode    JSL KBD_GET_SCANCODE        ; Fetch the next scancode
.19705f		c9 00		cmp #$00	                CMP #0                      ; Is it NUL?
.197061		d0 04		bne $197067	                BNE chk_make_break
.197063		28		plp		                PLP                         ; Yes: return 0... we got nothin
.197064		38		sec		                SEC
.197065		2b		pld		                PLD
.197066		6b		rtl		                RTL
.197067		89 80		bit #$80	chk_make_break  BIT #$80                    ; Is it a break scan code?
.197069		d0 08		bne $197073	                BNE handle_break            ; Yes: process the break
.19706b		c9 2a		cmp #$2a	handle_make     CMP #KBD_SC_LSHIFT          ; Is it a make LSHIFT?
.19706d		d0 0c		bne $19707b	                BNE not_make_ls
.19706f		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.197071		80 4e		bra $1970c1	                BRA set_modifier
.197073		c9 aa		cmp #$aa	handle_break    CMP #KBD_SC_LSHIFT | $80    ; Is it a break LSHIFT?
.197075		d0 0c		bne $197083	                BNE not_break_ls
.197077		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.197079		80 50		bra $1970cb	                BRA clr_modifier
.19707b		c9 1d		cmp #$1d	not_make_ls     CMP #KBD_SC_LCTRL           ; Is it a make LCTRL?
.19707d		d0 0c		bne $19708b	                BNE not_make_lc
.19707f		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.197081		80 3e		bra $1970c1	                BRA set_modifier
.197083		c9 9d		cmp #$9d	not_break_ls    CMP #KBD_SC_LCTRL | $80     ; Is it a break LCTRL?
.197085		d0 0c		bne $197093	                BNE not_break_lc
.197087		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.197089		80 40		bra $1970cb	                BRA clr_modifier
.19708b		c9 38		cmp #$38	not_make_lc     CMP #KBD_SC_LALT            ; Is it a make LALT?
.19708d		d0 0c		bne $19709b	                BNE not_make_la
.19708f		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.197091		80 2e		bra $1970c1	                BRA set_modifier
.197093		c9 b8		cmp #$b8	not_break_lc    CMP #KBD_SC_LALT | $80      ; Is it a break LALT?
.197095		d0 0c		bne $1970a3	                BNE not_break_la
.197097		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.197099		80 30		bra $1970cb	                BRA clr_modifier
.19709b		c9 36		cmp #$36	not_make_la     CMP #KBD_SC_RSHIFT          ; Is it a make RSHIFT?
.19709d		d0 0c		bne $1970ab	                BNE not_make_rs
.19709f		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.1970a1		80 1e		bra $1970c1	                BRA set_modifier
.1970a3		c9 b6		cmp #$b6	not_break_la    CMP #KBD_SC_RSHIFT | $80    ; Is it a break RSHIFT?
.1970a5		d0 0c		bne $1970b3	                BNE not_break_rs
.1970a7		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.1970a9		80 20		bra $1970cb	                BRA clr_modifier
.1970ab		c9 5e		cmp #$5e	not_make_rs     CMP #KBD_SC_RCTRL           ; Is it a make RCTRL?
.1970ad		d0 0c		bne $1970bb	                BNE not_make_rc
.1970af		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.1970b1		80 0e		bra $1970c1	                BRA set_modifier
.1970b3		c9 de		cmp #$de	not_break_rs    CMP #KBD_SC_RCTRL | $80     ; Is it a break RCTRL?
.1970b5		d0 0e		bne $1970c5	                BNE not_break_rc
.1970b7		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.1970b9		80 10		bra $1970cb	                BRA clr_modifier
.1970bb		c9 5c		cmp #$5c	not_make_rc     CMP #KBD_SC_RALT            ; Is it a make RALT?
.1970bd		d0 12		bne $1970d1	                BNE not_make_ra
.1970bf		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.1970c1		04 25		tsb $0f25	set_modifier    TSB #S_KBD_CONTROL.MODIFIERS,D  ; Set the indicated modifier bit
.1970c3		80 08		bra $1970cd	                BRA return_null
.1970c5		c9 dc		cmp #$dc	not_break_rc    CMP #KBD_SC_RALT | $80          ; Is it a break RALT?
.1970c7		d0 04		bne $1970cd	                BNE return_null                 ; No: we don't use any other break scan codes
.1970c9		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.1970cb		14 25		trb $0f25	clr_modifier    TRB #S_KBD_CONTROL.MODIFIERS,D  ; Clear the indicated modifier bit
.1970cd		a9 00		lda #$00	return_null     LDA #0
.1970cf		80 55		bra $197126	                BRA done
.1970d1		a8		tay		not_make_ra     TAY                                     ; Use the scan code as an index...
.1970d2		c9 38		cmp #$38	                CMP #KBD_SC_PIVOT
.1970d4		90 0e		bcc $1970e4	                BLT below_38
.1970d6		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D              ; Check the NUM lock
.1970d8		89 02		bit #$02	                BIT #KBD_LOCK_NUMBER
.1970da		f0 2a		beq $197106	                BEQ fetch_unmod                         ; No: translate the keys as unmodified
.1970dc		a5 25		lda $0f25	chk_num_shift   LDA #S_KBD_CONTROL.MODIFIERS,D
.1970de		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Check for a shift key being pressed
.1970e0		d0 24		bne $197106	                BNE fetch_unmod                         ; If so: translate the keys as modified
.1970e2		80 30		bra $197114	                BRA fetch_caps                          ; No: translate the key using the lock table
.1970e4		a5 25		lda $0f25	below_38        LDA #S_KBD_CONTROL.MODIFIERS,D
.1970e6		89 0c		bit #$0c	                BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL      ; Is either control key pressed?
.1970e8		f0 0c		beq $1970f6	                BEQ chk_capslock                        ; No: check for capslock
.1970ea		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.1970ec		f0 04		beq $1970f2	                BEQ fetch_control                       ; No: translate just based off of control
.1970ee		b7 3b		lda [$0f3b],y	                LDA [#S_KBD_CONTROL.TBL_CTRL_SHIFT,D],Y ; Look up the key modfified by CTRL and SHIFT
.1970f0		80 26		bra $197118	                BRA chk_ansi
.1970f2		b7 2f		lda [$0f2f],y	fetch_control   LDA [#S_KBD_CONTROL.TBL_CTRL,D],Y       ; Look up the key modified by CONTROL
.1970f4		80 22		bra $197118	                BRA chk_ansi
.1970f6		a5 26		lda $0f26	chk_capslock    LDA #S_KBD_CONTROL.LOCKS,D              ; Check the CAPS lock
.1970f8		89 04		bit #$04	                BIT #KBD_LOCK_CAPS
.1970fa		d0 0e		bne $19710a	                BNE chk_caps_shift                      ; Yes: check the state of the SHIFT key
.1970fc		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.1970fe		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.197100		f0 04		beq $197106	                BEQ fetch_unmod                         ; No: translate just based off of control
.197102		b7 2b		lda [$0f2b],y	fetch_shifted   LDA [#S_KBD_CONTROL.TBL_SHIFT,D],Y      ; Look up the key modified by SHIFT
.197104		80 12		bra $197118	                BRA chk_ansi
.197106		b7 27		lda [$0f27],y	fetch_unmod     LDA [#S_KBD_CONTROL.TBL_UNMOD,D],Y      ; Look up the unmodified key
.197108		80 0e		bra $197118	                BRA chk_ansi
.19710a		a5 25		lda $0f25	chk_caps_shift  LDA #S_KBD_CONTROL.MODIFIERS,D
.19710c		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.19710e		f0 04		beq $197114	                BEQ fetch_caps                          ; No: translate just based off of control
.197110		b7 37		lda [$0f37],y	                LDA [#S_KBD_CONTROL.TBL_LOCK_SHIFT,D],Y ; Look up the key modified by CAPS and SHIFT
.197112		80 04		bra $197118	                BRA chk_ansi
.197114		b7 33		lda [$0f33],y	fetch_caps      LDA [#S_KBD_CONTROL.TBL_LOCK,D],Y       ; Look up the key modified by CAPSLOCK
.197116		80 00		bra $197118	                BRA chk_ansi
.197118		c9 80		cmp #$80	chk_ansi        CMP #$80                                ; Check to see if we have an ANSI escape sequence to send
.19711a		90 0a		bcc $197126	                BLT done                                ; If not, just return the character
.19711c		c9 96		cmp #$96	                CMP #$96
.19711e		b0 06		bcs $197126	                BGE done
.197120		22 62 71 19	jsl $197162	                JSL KBD_ENQ_ANSI                        ; Expand and enqueue the ANSI sequence
.197124		a9 1b		lda #$1b	                LDA #CHAR_ESC                           ; And return the ESC key to start the sequence
.197126		28		plp		done            PLP
.197127		2b		pld		                PLD
.197128		18		clc		                CLC
.197129		6b		rtl		                RTL
.19712a						KBD_ENQUEUE_BCD
.19712a		08		php		                PHP
.19712b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19712d		48		pha		                PHA                     ; Save the value
.19712e		4a		lsr a		                LSR A                   ; Get the 10s digit
.19712f		4a		lsr a		                LSR A
.197130		4a		lsr a		                LSR A
.197131		4a		lsr a		                LSR A
.197132		c9 00		cmp #$00	                CMP #0                  ; If it's 0, move to the 1s digit
.197134		f0 0b		beq $197141	                BEQ enqueue_1
.197136		c9 0a		cmp #$0a	                CMP #$0A                ; If it's out of range, ignore this whole call
.197138		b0 13		bcs $19714d	                BGE done_A
.19713a		18		clc		                CLC                     ; Enqueue the tens digit
.19713b		69 30		adc #$30	                ADC #'0'
.19713d		22 fa 6e 19	jsl $196efa	                JSL KBD_CHAR_ENQUEUE
.197141		68		pla		enqueue_1       PLA                     ; Enqueue the ones digit
.197142		29 0f		and #$0f	                AND #$0F
.197144		18		clc		                CLC
.197145		69 30		adc #$30	                ADC #'0'
.197147		22 fa 6e 19	jsl $196efa	                JSL KBD_CHAR_ENQUEUE
.19714b		28		plp		done            PLP
.19714c		6b		rtl		                RTL
.19714d		68		pla		done_A          PLA
.19714e		80 fb		bra $19714b	                BRA done
.197150						KBD_BIN_TO_BCD
.197150		da		phx		                PHX
.197151		08		php		                PHP
.197152		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197154		aa		tax		                TAX
.197155		a9 99		lda #$99	                LDA #$99                ; Start with -1 in BCD form
.197157		f8		sed		                SED                     ; Switch to Decimal arithmetic
.197158		18		clc		loop            CLC
.197159		69 01		adc #$01	                ADC #1                  ; Add 1 with BCD arithmetic
.19715b		ca		dex		                DEX                     ; Decrement input value in X
.19715c		10 fa		bpl $197158	                BPL loop                ; loop until input value < 0
.19715e		d8		cld		                CLD                     ; Switch back to Binary arithmetic
.19715f		28		plp		                PLP
.197160		fa		plx		                PLX
.197161		6b		rtl		                RTL
.197162						KBD_ENQ_ANSI
.197162		08		php		                PHP
.197163		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197165		c9 80		cmp #$80	                CMP #$80                        ; check to make sure the code is within range
.197167		b0 03		bcs $19716c	                BGE chk_high_end
.197169		82 4a 00	brl $1971b6	                BRL done                        ; Out of range, just ignore it
.19716c		c9 96		cmp #$96	chk_high_end    CMP #$96
.19716e		90 03		bcc $197173	                BLT save_value
.197170		82 43 00	brl $1971b6	                BRL done                        ; Out of range, just ignore it
.197173		48		pha		save_value      PHA
.197174		a9 5b		lda #$5b	                LDA #'['
.197176		22 fa 6e 19	jsl $196efa	                JSL KBD_CHAR_ENQUEUE
.19717a		68		pla		                PLA
.19717b		38		sec		                SEC
.19717c		e9 80		sbc #$80	                SBC #$80                ; Convert to an offset
.19717e		aa		tax		                TAX                     ; And use it as an index to...
.19717f		bf b8 71 19	lda $1971b8,x	                LDA @l ENCODE_CODE,X    ; Get the number
.197183		10 0b		bpl $197190	                BPL send_number         ; If MSB is not set, send the number as-is
.197185		29 7f		and #$7f	                AND #$7F                ; Remove the MSB
.197187		18		clc		                CLC
.197188		69 41		adc #$41	                ADC #'A'                ; Convert to 'A' .. 'D'
.19718a		22 fa 6e 19	jsl $196efa	                JSL KBD_CHAR_ENQUEUE    ; Enqueue the code
.19718e		80 26		bra $1971b6	                BRA done
.197190		22 50 71 19	jsl $197150	send_number     JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.197194		22 2a 71 19	jsl $19712a	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.197198		22 b1 6f 19	jsl $196fb1	chk_modifier    JSL KBD_GETMODS_ANSI    ; Get the modifiers
.19719c		c9 00		cmp #$00	                CMP #0                  ; Are there any?
.19719e		f0 10		beq $1971b0	                BEQ close               ; No: close the sequence
.1971a0		48		pha		                PHA
.1971a1		a9 3b		lda #$3b	                LDA #';'                ; Enqueue the separator
.1971a3		22 fa 6e 19	jsl $196efa	                JSL KBD_CHAR_ENQUEUE
.1971a7		68		pla		                PLA
.1971a8		22 50 71 19	jsl $197150	                JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.1971ac		22 2a 71 19	jsl $19712a	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.1971b0		a9 7e		lda #$7e	close           LDA #'~'                ; Enqueue closing code
.1971b2		22 fa 6e 19	jsl $196efa	                JSL KBD_CHAR_ENQUEUE
.1971b6		28		plp		done            PLP
.1971b7		6b		rtl		                RTL
>1971b8		01 02 03 04 05 06		ENCODE_CODE     .byte 1, 2, 3, 4, 5, 6      ; Insert, etc...
>1971be		80 81 82 83			                .byte $80, $81, $82, $83    ; Cursor keys
>1971c2		0b 0c 0d 0e 0f			                .byte 11, 12, 13, 14, 15    ; F1 - F5
>1971c7		11 12 13 14 15			                .byte 17, 18, 19, 20, 21    ; F6 - F10
>1971cc		17 18				                .byte 23, 24                ; F11 - F12
.1971ce						KBD_SETTABLE
.1971ce		48		pha		                PHA
.1971cf		8b		phb		                PHB
.1971d0		0b		phd		                PHD
.1971d1		08		php		                PHP
.1971d2		48		pha		                PHA             ; begin setdp macro
.1971d3		08		php		                PHP
.1971d4		c2 20		rep #$20	                REP #$20        ; set A long
.1971d6		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1971d9		5b		tcd		                TCD
.1971da		28		plp		                PLP
.1971db		68		pla		                PLA             ; end setdp macro
.1971dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1971de		8b		phb		                PHB                 ; Get the data bank into A
.1971df		68		pla		                PLA
.1971e0		c2 20		rep #$20	                REP #$20        ; set A long
.1971e2		29 ff 00	and #$00ff	                AND #$00FF
.1971e5		85 29		sta $0f29	                STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.1971e7		85 2d		sta $0f2d	                STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.1971e9		85 31		sta $0f31	                STA #S_KBD_CONTROL.TBL_CTRL+2,D
.1971eb		85 35		sta $0f35	                STA #S_KBD_CONTROL.TBL_LOCK+2,D
.1971ed		85 39		sta $0f39	                STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.1971ef		85 3d		sta $0f3d	                STA #S_KBD_CONTROL.TBL_CTRL_SHIFT+2,D
.1971f1		86 27		stx $0f27	                STX #S_KBD_CONTROL.TBL_UNMOD,D
.1971f3		86 2b		stx $0f2b	                STX #S_KBD_CONTROL.TBL_SHIFT,D
.1971f5		86 2f		stx $0f2f	                STX #S_KBD_CONTROL.TBL_CTRL,D
.1971f7		86 33		stx $0f33	                STX #S_KBD_CONTROL.TBL_LOCK,D
.1971f9		86 37		stx $0f37	                STX #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.1971fb		86 3b		stx $0f3b	                STX #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.1971fd		28		plp		                PLP
.1971fe		2b		pld		                PLD
.1971ff		ab		plb		                PLB
.197200		68		pla		                PLA
.197201		6b		rtl		                RTL
>197202						.align 256
>197300		00 01 02 03 04 05 06 07		TBL_SET1        .byte $00, $01, $02, $03, $04, $05, $06, $07    ; $00 - $07
>197308		08 09 0a 0b 0c 0d 0e 0f		                .byte $08, $09, $0A, $0B, $0C, $0D, $0E, $0F    ; $08 - $0F
>197310		10 11 12 13 14 15 16 17		                .byte $10, $11, $12, $13, $14, $15, $16, $17    ; $10 - $17
>197318		18 19 1a 1b 1c 1d 1e 1f		                .byte $18, $19, $1A, $1B, $1C, $1D, $1E, $1F    ; $18 - $1F
>197320		20 21 22 23 24 25 26 27		                .byte $20, $21, $22, $23, $24, $25, $26, $27    ; $20 - $27
>197328		28 29 2a 2b 2c 2d 2e 2f		                .byte $28, $29, $2A, $2B, $2C, $2D, $2E, $2F    ; $28 - $2F
>197330		30 31 32 33 34 35 36 37		                .byte $30, $31, $32, $33, $34, $35, $36, $37    ; $30 - $37
>197338		38 39 3a 3b 3c 3d 3e 3f		                .byte $38, $39, $3A, $3B, $3C, $3D, $3E, $3F    ; $38 - $3F
>197340		40 41 42 43 44 45 46 47		                .byte $40, $41, $42, $43, $44, $45, $46, $47    ; $40 - $47
>197348		48 49 4a 4b 4c 4d 4e 4f		                .byte $48, $49, $4A, $4B, $4C, $4D, $4E, $4F    ; $48 - $4F
>197350		50 51 52 53 54 55 56 57		                .byte $50, $51, $52, $53, $54, $55, $56, $57    ; $50 - $57
>197358		58 00 00 00 00 00 00 00		                .byte $58, $00, $00, $00, $00, $00, $00, $00    ; $58 - $5F
>197360		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>197368		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>197370		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>197378		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
>197380		00 00 00 00 00 00 00 00		TBL_SET1_E0     .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $00 - $07
>197388		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $08 - $0F
>197390		70 00 00 00 00 00 00 00		                .byte $70, $00, $00, $00, $00, $00, $00, $00    ; $10 - $17
>197398		00 71 00 00 6d 5e 00 00		                .byte $00, $71, $00, $00, $6D, $5E, $00, $00    ; $18 - $1F
>1973a0		72 00 6e 00 6f 00 00 00		                .byte $72, $00, $6E, $00, $6F, $00, $00, $00    ; $20 - $27
>1973a8		00 00 00 00 00 00 73 00		                .byte $00, $00, $00, $00, $00, $00, $73, $00    ; $28 - $2F
>1973b0		74 00 00 00 00 6c 00 00		                .byte $74, $00, $00, $00, $00, $6C, $00, $00    ; $30 - $37
>1973b8		5c 00 00 00 00 00 00 00		                .byte $5C, $00, $00, $00, $00, $00, $00, $00    ; $38 - $3F
>1973c0		00 00 00 00 00 00 61 63		                .byte $00, $00, $00, $00, $00, $00, $61, $63    ; $40 - $47
>1973c8		68 64 00 69 00 6b 00 66		                .byte $68, $64, $00, $69, $00, $6B, $00, $66    ; $48 - $4F
>1973d0		6a 67 62 65 00 00 00 00		                .byte $6A, $67, $62, $65, $00, $00, $00, $00    ; $50 - $57
>1973d8		00 00 00 00 00 5d 00 00		                .byte $00, $00, $00, $00, $00, $5D, $00, $00    ; $58 - $5F
>1973e0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>1973e8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>1973f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>1973f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
.197400						KBD_STATE_MACH
>197400		00 e0 01 00			                .byte KBD_STATE_IDLE, $E0, KBD_STATE_E0, 0                          ; IDLE =[E0]=> STATE_E0
>197404		00 e1 04 00			                .byte KBD_STATE_IDLE, $E1, KBD_STATE_E1, 0                          ; IDLE =[E1]=> STATE_E1
>197408		00 00 00 01			                .byte KBD_STATE_IDLE, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_BASE       ; IDLE =[default]=> IDLE / emit(TBL_SET1[x])
>19740c		01 2a 02 00			                .byte KBD_STATE_E0, $2A, KBD_STATE_E02A, 0                          ; STATE_E0 =[2A]=> STATE_E02A
>197410		01 b7 09 00			                .byte KBD_STATE_E0, $B7, KBD_STATE_E0B7, 0                          ; STATE_E0 =[B7]=> STATE_E0B7
>197414		01 00 00 02			                .byte KBD_STATE_E0, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_E0           ; STATE_E0 =[default]=> IDLE, emit(TBL_SET1_E0[x])
>197418		02 e0 03 00			                .byte KBD_STATE_E02A, $E0, KBD_STATE_E02AE0, 0                      ; STATE_E02A =[E0]=> STATE_E02AE0
>19741c		02 00 00 00			                .byte KBD_STATE_E02A, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E02A =[default]=> IDLE, ignore(x)
>197420		03 37 00 60			                .byte KBD_STATE_E02AE0, $37, KBD_STATE_IDLE, $60                    ; STATE_E02AE0 =[37]=> IDLE, emit(make{PrintScreen})
>197424		03 00 00 00			                .byte KBD_STATE_E02AE0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E02AE0 =[default]=> IDLE, ignore(x)
>197428		09 e0 0a 00			                .byte KBD_STATE_E0B7, $E0, KBD_STATE_E0B7E0, 0                      ; STATE_E0B7 =[E0]=> STATE_E0B7E0
>19742c		09 00 00 00			                .byte KBD_STATE_E0B7, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E0B7 =[default]=> IDLE, ignore(x)
>197430		0a aa 00 e0			                .byte KBD_STATE_E0B7E0, $AA, KBD_STATE_IDLE, $E0                    ; STATE_E0B7E0 =[AA]=> IDLE, emit(break{PrintScreen})
>197434		0a 00 00 00			                .byte KBD_STATE_E0B7E0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E0B7E0 =[default]=> IDLE, ignore(x)
>197438		04 1d 05 00			                .byte KBD_STATE_E1, $1D, KBD_STATE_E11D, 0                          ; STATE_E1 =[1D]=> STATE_E11D
>19743c		04 00 00 00			                .byte KBD_STATE_E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE            ; STATE_E1 =[default]=> IDLE, ignore(x)
>197440		05 45 06 00			                .byte KBD_STATE_E11D, $45, KBD_STATE_E11D45, 0                      ; STATE_E11D =[45]=> STATE_E11D45
>197444		05 00 00 00			                .byte KBD_STATE_E11D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E11D =[default]=> IDLE, ignore(x)
>197448		06 e1 07 00			                .byte KBD_STATE_E11D45, $E1, KBD_STATE_E11D45E1, 0                  ; STATE_E11D45 =[E1]=> STATE_E11D45E1
>19744c		06 00 00 00			                .byte KBD_STATE_E11D45, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E11D45 =[default]=> IDLE, ignore(x)
>197450		07 9d 08 00			                .byte KBD_STATE_E11D45E1, $9D, KBD_STATE_E11D45E19D, 0              ; STATE_E11D45E1 =[9D]=> STATE_E11D45E19D
>197454		07 00 00 00			                .byte KBD_STATE_E11D45E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE      ; STATE_E11D45E1 =[default]=> IDLE, ignore(x)
>197458		08 c5 00 61			                .byte KBD_STATE_E11D45E19D, $C5, KBD_STATE_IDLE, $61                ; STATE_E11D45E19D =[C5]=> IDLE, emit(make{Pause})
>19745c		08 00 00 00			                .byte KBD_STATE_E11D45E19D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE    ; STATE_E11D45E19D =[default]=> IDLE, ignore(x)
>197460		ff ff ff ff			                .byte $FF, $FF, $FF, $FF                                            ; End of state machine
>197464						.align 256
>197500		00 1b 31 32 33 34 35 36		SC_US_UNMOD     .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>197508		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>197510		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>197518		6f 70 5b 5d 0d 00 61 73		                .byte 'o', 'p', '[', ']', $0D, $00, 'a', 's'                        ; $18 - $1F
>197520		64 66 67 68 6a 6b 6c 3b		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';'                        ; $20 - $27
>197528		27 60 00 5c 7a 78 63 76		                .byte $27, '`', $00, '\', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>197530		62 6e 6d 2c 2e 2f 00 2a		                .byte 'b', 'n', 'm', ',', '.', '/', $00, '*'                        ; $30 - $37
>197538		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197540		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197548		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197550		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197558		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197560		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197568		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197570		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197578		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197580		00 1b 21 40 23 24 25 5e		SC_US_SHFT      .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197588		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197590		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>197598		4f 50 7b 7d 0a 00 41 53		                .byte 'O', 'P', '{', '}', $0A, $00, 'A', 'S'                        ; $18 - $1F
>1975a0		44 46 47 48 4a 4b 4c 3a		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':'                        ; $20 - $27
>1975a8		22 7e 00 7c 5a 58 43 56		                .byte $22, '~', $00, '|', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>1975b0		42 4e 4d 3c 3e 3f 00 00		                .byte 'B', 'N', 'M', '<', '>', '?', $00, $00                        ; $30 - $37
>1975b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>1975c0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>1975c8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>1975d0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>1975d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>1975e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>1975e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>1975f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>1975f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197600		00 1b 31 32 33 34 35 1e		SC_US_CTRL      .byte $00, $1B, '1', '2', '3', '4', '5', $1E                        ; $00 - $07
>197608		37 38 39 30 1f 3d 08 09		                .byte '7', '8', '9', '0', $1F, '=', $08, $09                        ; $08 - $0F
>197610		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>197618		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>197620		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>197628		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>197630		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>197638		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197640		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197648		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197650		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197658		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197660		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197668		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197670		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197678		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197680		00 1b 31 32 33 34 35 36		SC_US_LOCK      .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>197688		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>197690		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>197698		4f 50 5b 5d 0d 00 41 53		                .byte 'O', 'P', '[', ']', $0D, $00, 'A', 'S'                        ; $18 - $1F
>1976a0		44 46 47 48 4a 4b 4c 3b		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';'                        ; $20 - $27
>1976a8		27 60 00 5c 5a 58 43 56		                .byte $27, '`', $00, '\', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>1976b0		42 4e 4d 2c 2e 2f 00 00		                .byte 'B', 'N', 'M', ',', '.', '/', $00, $00                        ; $30 - $37
>1976b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>1976c0		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>1976c8		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>1976d0		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>1976d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>1976e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>1976e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>1976f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>1976f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197700		00 1b 21 40 23 24 25 5e		SC_US_LOCK_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197708		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197710		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>197718		6f 70 7b 7d 0a 00 61 73		                .byte 'o', 'p', '{', '}', $0A, $00, 'a', 's'                        ; $18 - $1F
>197720		64 66 67 68 6a 6b 6c 3a		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ':'                        ; $20 - $27
>197728		22 7e 00 7c 7a 78 63 76		                .byte $22, '~', $00, '|', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>197730		62 6e 6d 3c 3e 3f 00 00		                .byte 'b', 'n', 'm', '<', '>', '?', $00, $00                        ; $30 - $37
>197738		00 20 00 00 00 00 00 00		                .byte $00, ' ', $00, $00, $00, $00, $00, $00                        ; $38 - $3F
>197740		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>197748		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>197750		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>197758		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197760		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197768		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197770		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197778		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197780		00 1b 21 40 23 24 25 5e		SC_US_CTRL_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197788		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197790		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>197798		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>1977a0		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>1977a8		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>1977b0		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>1977b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>1977c0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>1977c8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>1977d0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>1977d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>1977e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>1977e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>1977f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>1977f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F

;******  Return to file: src/kernel.asm


;******  Processing file: src/Libraries/mouse_driver.asm

.197800						IINITMOUSE
.197800		48		pha		                PHA
.197801		da		phx		                PHX
.197802		8b		phb		                PHB
.197803		0b		phd		                PHD
.197804		08		php		                PHP
.197805		48		pha		                PHA             ; begin setdbr macro
.197806		08		php		                PHP
.197807		e2 20		sep #$20	                SEP #$20        ; set A short
.197809		a9 00		lda #$00	                LDA #0
.19780b		48		pha		                PHA
.19780c		ab		plb		                PLB
.19780d		28		plp		                PLP
.19780e		68		pla		                PLA             ; end setdbr macro
.19780f		48		pha		                PHA             ; begin setdp macro
.197810		08		php		                PHP
.197811		c2 20		rep #$20	                REP #$20        ; set A long
.197813		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.197816		5b		tcd		                TCD
.197817		28		plp		                PLP
.197818		68		pla		                PLA             ; end setdp macro
.197819		78		sei		                SEI
.19781a		e2 20		sep #$20	                SEP #$20        ; set A short
.19781c		c2 10		rep #$10	                REP #$10        ; set X long
.19781e		18		clc		                CLC
.19781f		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.197822		20 00 79	jsr $197900	DO_CMD_A9_AGAIN JSR Poll_Inbuf_Mouse_TimeOut
.197825		b0 0b		bcs $197832	                BCS mouse_init_fail
.197827		a9 a9		lda #$a9	                LDA #$A9                        ; Tests second PS2 Channel
.197829		8f 07 18 af	sta $af1807	                STA @l KBD_CMD_BUF
.19782d		20 d8 78	jsr $1978d8	                JSR Poll_Outbuf_Mouse_TimeOut
.197830		90 2b		bcc $19785d	                BCC mouse_found
.197832		a9 00		lda #$00	mouse_init_fail LDA #0                          ; Disable the mouse pointer
.197834		8f 00 07 af	sta $af0700	                STA @l MOUSE_PTR_CTRL_REG_L
.197838		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Make sure the mouse interrupt is disabled
.19783c		09 80		ora #$80	                ORA #FNX0_INT07_MOUSE
.19783e		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.197842		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1         ; Read the Pending Register &
.197846		29 01		and #$01	                AND #FNX1_INT00_KBD
.197848		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1         ; Writing it back will clear the Active Bit
.19784c		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.197850		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.197852		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.197856		28		plp		                PLP                             ; Return failure
.197857		2b		pld		                PLD
.197858		ab		plb		                PLB
.197859		fa		plx		                PLX
.19785a		68		pla		                PLA
.19785b		38		sec		                SEC
.19785c		6b		rtl		                RTL
.19785d		af 03 18 af	lda $af1803	mouse_found     LDA @l KBD_OUT_BUF              ; Clear the Output buffer
.197861		c9 00		cmp #$00	                CMP #$00
.197863		d0 bd		bne $197822	                BNE DO_CMD_A9_AGAIN
.197865		a9 f5		lda #$f5	                LDA #$F5                        ; Disable the mouse
.197867		20 b7 78	jsr $1978b7	                JSR MOUSE_WRITE
.19786a		20 cc 78	jsr $1978cc	                JSR MOUSE_READ
.19786d		b0 c3		bcs $197832	                BCS mouse_init_fail
.19786f		a9 f6		lda #$f6	                LDA #$F6                        ;Tell the mouse to use default settings
.197871		20 b7 78	jsr $1978b7	                JSR MOUSE_WRITE
.197874		20 cc 78	jsr $1978cc	                JSR MOUSE_READ
.197877		b0 b9		bcs $197832	                BCS mouse_init_fail
.197879		a9 e8		lda #$e8	                LDA #$E8
.19787b		20 b7 78	jsr $1978b7	                JSR MOUSE_WRITE
.19787e		20 cc 78	jsr $1978cc	                JSR MOUSE_READ
.197881		b0 af		bcs $197832	                BCS mouse_init_fail
.197883		a9 00		lda #$00	                LDA #$00
.197885		20 b7 78	jsr $1978b7	                JSR MOUSE_WRITE
.197888		20 cc 78	jsr $1978cc	                JSR MOUSE_READ
.19788b		b0 a5		bcs $197832	                BCS mouse_init_fail
.19788d		a9 f4		lda #$f4	                LDA #$F4                        ; Enable the Mouse
.19788f		20 b7 78	jsr $1978b7	                JSR MOUSE_WRITE
.197892		20 cc 78	jsr $1978cc	                JSR MOUSE_READ
.197895		b0 9b		bcs $197832	                BCS mouse_init_fail
.197897		a9 00		lda #$00	                LDA #$00
.197899		8d e0 00	sta $00e0	                STA @w MOUSE_IDX
.19789c		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.1978a0		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.1978a2		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.1978a6		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Enable the mouse interrupt
.1978aa		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.1978ac		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.1978b0		28		plp		mouse_init_ok   PLP
.1978b1		2b		pld		                PLD
.1978b2		ab		plb		                PLB
.1978b3		fa		plx		                PLX
.1978b4		68		pla		                PLA
.1978b5		18		clc		                CLC
.1978b6		6b		rtl		                RTL
.1978b7						MOUSE_WRITE
.1978b7		e2 20		sep #$20	                SEP #$20        ; set A short
.1978b9		48		pha		                PHA
.1978ba		20 f3 78	jsr $1978f3	                JSR Poll_Inbuf          ; Test bit $01 (if 2, Full)
.1978bd		a9 d4		lda #$d4	                LDA #$D4
.1978bf		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF         ; KBD_CMD_BUF		= $AF1064
.1978c3		20 f3 78	jsr $1978f3	                JSR Poll_Inbuf
.1978c6		68		pla		                PLA
.1978c7		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF        ; KBD_DATA_BUF	= $AF1060
.1978cb		60		rts		                RTS
.1978cc						MOUSE_READ
.1978cc		e2 20		sep #$20	                SEP #$20        ; set A short
.1978ce		20 d8 78	jsr $1978d8	                JSR Poll_Outbuf_Mouse_TimeOut   ; Test bit $01 (if 1, Full)
.1978d1		b0 04		bcs $1978d7	                BCS done
.1978d3		af 03 18 af	lda $af1803	                LDA KBD_INPT_BUF        ; KBD_INPT_BUF	= $AF1060
.1978d7		60		rts		done            RTS
.1978d8						Poll_Outbuf_Mouse_TimeOut
.1978d8		e2 20		sep #$20	                SEP #$20        ; set A short
.1978da		c2 10		rep #$10	                REP #$10        ; set X long
.1978dc		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.1978df		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.1978e3		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.1978e5		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.1978e7		f0 08		beq $1978f1	                BEQ ret_success
.1978e9		ca		dex		                DEX
.1978ea		e0 00 00	cpx #$0000	                CPX #$0000
.1978ed		d0 f0		bne $1978df	                BNE wait
.1978ef		38		sec		                SEC                     ; Return timeout error
.1978f0		60		rts		                RTS
.1978f1		18		clc		ret_success     CLC                     ; Return success
.1978f2		60		rts		                RTS
.1978f3						Poll_Inbuf
.1978f3		e2 20		sep #$20	                SEP #$20        ; set A short
.1978f5		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT         ; Load Status Byte
.1978f9		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.1978fb		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.1978fd		f0 f6		beq $1978f5	                BEQ wait
.1978ff		60		rts		                RTS
.197900						Poll_Inbuf_Mouse_TimeOut
.197900		e2 20		sep #$20	                SEP #$20        ; set A short
.197902		c2 10		rep #$10	                REP #$10        ; set X long
.197904		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.197907		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.19790b		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.19790d		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.19790f		d0 08		bne $197919	                BNE ret_success
.197911		ca		dex		                DEX
.197912		e0 00 00	cpx #$0000	                CPX #$0000
.197915		d0 f0		bne $197907	                BNE wait
.197917		38		sec		                SEC                     ; Return timeout error
.197918		60		rts		                RTS
.197919		18		clc		ret_success     CLC                     ; Return success
.19791a		60		rts		                RTS
.19791b						MOUSE_INTERRUPT
.19791b		8b		phb		                PHB
.19791c		0b		phd		                PHD
.19791d		08		php		                PHP
.19791e						                setasx
.19791e		78		sei		                SEI
.19791f		48		pha		                PHA             ; begin setdbr macro
.197920		08		php		                PHP
.197921		e2 20		sep #$20	                SEP #$20        ; set A short
.197923		a9 00		lda #$00	                LDA #0
.197925		48		pha		                PHA
.197926		ab		plb		                PLB
.197927		28		plp		                PLP
.197928		68		pla		                PLA             ; end setdbr macro
.197929		48		pha		                PHA             ; begin setdp macro
.19792a		08		php		                PHP
.19792b		c2 20		rep #$20	                REP #$20        ; set A long
.19792d		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.197930		5b		tcd		                TCD
.197931		28		plp		                PLP
.197932		68		pla		                PLA             ; end setdp macro
.197933		ae e0 00	ldx $00e0	                LDX @w MOUSE_IDX                ; Get the # of the mouse byte to write
.197936		af 03 18 af	lda $af1803	                LDA @l KBD_INPT_BUF             ; Get the byte from the PS/2 interface
.19793a		9f 06 07 af	sta $af0706,x	                STA @l MOUSE_PTR_BYTE0,X        ; Store it into the correct Vicky register
.19793e		e8		inx		next_byte       INX                             ; Move to the next byte
.19793f		e0 03 00	cpx #$0003	                CPX #$03                        ; Have we written 3 bytes?
.197942		d0 1b		bne $19795f	                BNE save_ptr                    ; No: return and wait for the next mouse interrupt
.197944		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.197948		85 e1		sta $e1		                STA @b MOUSE_POS_X_LO
.19794a		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.19794e		85 e2		sta $e2		                STA @b MOUSE_POS_X_HI
.197950		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.197954		85 e3		sta $e3		                STA @b MOUSE_POS_Y_LO
.197956		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.19795a		85 e4		sta $e4		                STA @b MOUSE_POS_Y_HI
.19795c		a2 00 00	ldx #$0000	                LDX #0                          ; Reset our state machine to the beginning
.19795f		8e e0 00	stx $00e0	save_ptr        STX @w MOUSE_IDX                ; Save our next byte position (state)
.197962		28		plp		                PLP
.197963		2b		pld		                PLD
.197964		ab		plb		                PLB
.197965		6b		rtl		                RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/SplashScreenCode/boot_sound.asm

.197966						BOOT_SOUND
.197966		48		pha		                PHA
.197967		da		phx		                PHX
.197968		08		php		                PHP
.197969		e2 20		sep #$20	                SEP #$20        ; set A short
.19796b		a9 00		lda #$00	                LDA #0
.19796d		a2 00 00	ldx #$0000	                LDX #0
.197970		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.197974		e8		inx		                INX                             ; Move to the next SID register
.197975		e0 18 00	cpx #$0018	                CPX #24
.197978		d0 f6		bne $197970	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.19797a		a9 29		lda #$29	                LDA #$29                        ; Attack = 2, Decay = 9
.19797c		8f 05 e4 af	sta $afe405	                STA @l SID0_V1_ATCK_DECY
.197980		8f 0c e4 af	sta $afe40c	                STA @l SID0_V2_ATCK_DECY
.197984		8f 13 e4 af	sta $afe413	                STA @l SID0_V3_ATCK_DECY
.197988		a9 1f		lda #$1f	                LDA #$1F                        ; Sustain = 1, Release = 5
.19798a		8f 06 e4 af	sta $afe406	                STA @l SID0_V1_SSTN_RLSE
.19798e		8f 0d e4 af	sta $afe40d	                STA @l SID0_V2_SSTN_RLSE
.197992		8f 14 e4 af	sta $afe414	                STA @l SID0_V3_SSTN_RLSE
.197996		a9 0f		lda #$0f	                LDA #15                         ; Set the volume to max
.197998		8f 18 e4 af	sta $afe418	                STA @l SID0_MODE_VOL
.19799c		a9 60		lda #$60	                LDA #96                         ; Set voice 1 to F-3
.19799e		8f 00 e4 af	sta $afe400	                STA @l SID0_V1_FREQ_LO
.1979a2		a9 16		lda #$16	                LDA #22
.1979a4		8f 01 e4 af	sta $afe401	                STA @l SID0_V1_FREQ_HI
.1979a8		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.1979aa		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.1979ae		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.1979b1		22 cd 0f 19	jsl $190fcd	                JSL ILOOP_MS
.1979b5		a9 31		lda #$31	                LDA #49                         ; Set voice 2 to A-3
.1979b7		8f 07 e4 af	sta $afe407	                STA @l SID0_V2_FREQ_LO
.1979bb		a9 08		lda #$08	                LDA #8
.1979bd		8f 08 e4 af	sta $afe408	                STA @l SID0_V2_FREQ_HI
.1979c1		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.1979c3		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.1979c7		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.1979ca		22 cd 0f 19	jsl $190fcd	                JSL ILOOP_MS
.1979ce		a9 87		lda #$87	                LDA #135                        ; Set voice 3 to C-3
.1979d0		8f 0e e4 af	sta $afe40e	                STA @l SID0_V3_FREQ_LO
.1979d4		a9 21		lda #$21	                LDA #33
.1979d6		8f 0f e4 af	sta $afe40f	                STA @l SID0_V3_FREQ_HI
.1979da		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.1979dc		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.1979e0		a2 20 4e	ldx #$4e20	                LDX #20000                      ; Hold down the keys, so to speak... for a while
.1979e3		22 cd 0f 19	jsl $190fcd	                JSL ILOOP_MS
.1979e7		a9 10		lda #$10	                LDA #$10                        ; Release the keys...
.1979e9		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.1979ed		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.1979f1		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.1979f5		a9 0e		lda #$0e	                LDA #14
.1979f7		8f 18 e4 af	sta $afe418	dampen          STA @l SID0_MODE_VOL
.1979fb		a2 64 00	ldx #$0064	                LDX #100
.1979fe		22 cd 0f 19	jsl $190fcd	                JSL ILOOP_MS
.197a02		3a		dec a		                DEC A
.197a03		d0 f2		bne $1979f7	                BNE dampen
.197a05		28		plp		                PLP
.197a06		fa		plx		                PLX
.197a07		68		pla		                PLA
.197a08		6b		rtl		                RTL
.197a09						BOOT_SOUND_OFF
.197a09		48		pha		                PHA
.197a0a		da		phx		                PHX
.197a0b		08		php		                PHP
.197a0c		a2 00 00	ldx #$0000	                LDX #0
.197a0f		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.197a13		e8		inx		                INX                             ; Move to the next SID register
.197a14		e0 18 00	cpx #$0018	                CPX #24
.197a17		d0 f6		bne $197a0f	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.197a19		28		plp		                PLP
.197a1a		fa		plx		                PLX
.197a1b		68		pla		                PLA
.197a1c		6b		rtl		                RTL

;******  Return to file: src/kernel.asm

.197a1d						    KERNEL_DATA
>197a1d		20 20 20 20 0b 0c 0b 0c		    greet_msg   .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " UU    UU" ,$0D
>197a25		0b 0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>197a35		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>197a3d		0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>197a4c		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>197a54		0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>197a62		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>197a6a		0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>197a77		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UUUUUUUU",$0D
>197a7f		0b 0c 20 55 55 55 55 55 55 55 55 0d
>197a8b		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX U -- 1,572,864 Bytes Free", $0D
>197a93		45 4e 49 58 20 55 20 2d 2d 20 31 2c 35 37 32 2c
>197aa3		38 36 34 20 42 79 74 65 73 20 46 72 65 65 0d
>197ab2		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com -- Kernel: "
>197aba		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 2d 20 4b 65
>197aca		72 6e 65 6c 3a 20

;******  Processing file: src/version.asm

>197ad0		76 30 2e 34 2e 30 2d 61		.text "v0.4.0-alpha+346 (2021-06-26)"
>197ad8		6c 70 68 61 2b 33 34 36 20 28 32 30 32 31 2d 30
>197ae8		36 2d 32 36 29

;******  Return to file: src/kernel.asm

>197aed		0d 00				                .text $0D,$00
>197aef		90 90 90 90 90 90 d0 d0		  greet_clr_line1 .text $90, $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>197af7		b0 b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>197b07		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>197b17		f0 f0
>197b19		90 90 90 90 90 d0 d0 b0		  greet_clr_line2 .text $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>197b21		b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>197b31		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>197b41		f0 f0
>197b43		90 90 90 90 d0 d0 b0 b0		  greet_clr_line3 .text $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>197b4b		a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>197b5b		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>197b6b		f0 f0
>197b6d		90 90 90 d0 d0 b0 b0 a0		  greet_clr_line4 .text $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>197b75		a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>197b85		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>197b95		f0 f0
>197b97		90 90 d0 d0 b0 b0 a0 a0		  greet_clr_line5 .text $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>197b9f		e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>197baf		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>197bbf		f0 f0
>197bc1		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>197bc5		00 00 80 ff			                .text $00, $00, $80, $FF
>197bc9		00 80 00 ff			                .text $00, $80, $00, $FF
>197bcd		80 00 00 ff			                .text $80, $00, $00, $FF
>197bd1		00 80 80 ff			                .text $00, $80, $80, $FF
>197bd5		80 80 00 ff			                .text $80, $80, $00, $FF
>197bd9		80 00 80 ff			                .text $80, $00, $80, $FF
>197bdd		80 80 80 ff			                .text $80, $80, $80, $FF
>197be1		00 45 ff ff			                .text $00, $45, $FF, $FF
>197be5		13 45 8b ff			                .text $13, $45, $8B, $FF
>197be9		00 00 20 ff			                .text $00, $00, $20, $FF
>197bed		00 20 00 ff			                .text $00, $20, $00, $FF
>197bf1		20 00 00 ff			                .text $20, $00, $00, $FF
>197bf5		20 20 20 ff			                .text $20, $20, $20, $FF
>197bf9		40 40 40 ff			                .text $40, $40, $40, $FF
>197bfd		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>197c01		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>197c05		00 00 80 ff			                .text $00, $00, $80, $FF
>197c09		00 80 00 ff			                .text $00, $80, $00, $FF
>197c0d		80 00 00 ff			                .text $80, $00, $00, $FF
>197c11		00 20 20 ff			                .text $00, $20, $20, $FF
>197c15		20 20 00 ff			                .text $20, $20, $00, $FF
>197c19		20 00 20 ff			                .text $20, $00, $20, $FF
>197c1d		20 20 20 ff			                .text $20, $20, $20, $FF
>197c21		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>197c25		13 45 8b ff			                .text $13, $45, $8B, $FF
>197c29		00 00 20 ff			                .text $00, $00, $20, $FF
>197c2d		00 20 00 ff			                .text $00, $20, $00, $FF
>197c31		40 00 00 ff			                .text $40, $00, $00, $FF
>197c35		10 10 10 ff			                .text $10, $10, $10, $FF
>197c39		40 40 40 ff			                .text $40, $40, $40, $FF
>197c3d		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>197c41		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>197c49		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>197c59		00
>197c5a		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>197c62		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>197c72		00
>197c73		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>197c7b		20 45 78 65 63 75 74 65 64 2e 0d 00
>197c87		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>197c8f		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>197c9f		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>197ca7		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>197cb7		64 2e 2e 2e 0d 00
>197cbd		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>197cc5		20 50 72 65 73 65 6e 74 0d 00
>197ccf		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>197cd7		65 73 65 6e 74 0d 00
>197cde		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>197ce6		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>197cf6		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>197d06		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>197d0e		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>197d1e		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>197d2b		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>197d33		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>197d3f		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>197d47		54 55 52 45 20 46 4f 55 4e 44 2e 00
>197d53		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>197d5b		45 44 2e 00
>197d5f		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>197d67		47 20 42 4d 50 20 50 41 52 53 45 52 00
>197d74		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>197d7c		50 72 65 73 65 6e 74 3a 00
>197d85		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>197d8d		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>197d9d		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>197dab		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>197db3		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>197dc3		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>197dd0		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>197dd8		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>197de8		72 64 2e 00
>197dec		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>197df4		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>197e04		49 44 45 20 64 72 69 76 65 2e 00
>197e0f		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>197e17		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>197e27		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>197e35		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>197e3d		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>197e4c		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>197e54		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>197e63		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>197e6b		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>197e7b		2e 2e 00
>197e7e		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>197e86		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>197e8e		52 4f 52 00
>197e92		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>197e9a		38 39 41 42 43 44 45 46 00
>197ea3						.align 256
>197f00		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>197f08		37 38 39 30 2d 3d 08 09
>197f10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>197f18		6f 70 5b 5d 0d 00 61 73
>197f20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>197f28		27 60 00 5c 7a 78 63 76
>197f30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>197f38		00 20 00 81 82 83 84 85
>197f40		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>197f48		11 00 00 9d 00 1d 00 00
>197f50		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>197f58		8c 00 00 00 00 00 00 00
>197f60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>197f68		00 00 00 00 00 00 00 00
>197f70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>197f78		00 00 00 00 00 00 00 00
>197f80		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>197f88		26 2a 28 29 5f 2b 08 09
>197f90		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>197f98		4f 50 7b 7d 0d 00 41 53
>197fa0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>197fa8		22 7e 00 7c 5a 58 43 56
>197fb0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>197fb8		00 20 00 00 00 00 00 00
>197fc0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>197fc8		00 00 00 00 00 00 00 00
>197fd0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>197fd8		00 00 00 00 00 00 00 00
>197fe0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>197fe8		00 00 00 00 00 00 00 00
>197ff0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>197ff8		00 00 00 00 00 00 00 00
>198000		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198008		37 38 39 30 2d 3d 08 09
>198010		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>198018		0f 10 5b 5d 0d 00 01 13
>198020		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>198028		27 00 00 5c 1a 18 03 16
>198030		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198038		00 20 00 00 00 00 00 00
>198040		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198048		00 00 00 00 00 00 00 00
>198050		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198058		00 00 00 00 00 00 00 00
>198060		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198068		00 00 00 00 00 00 00 00
>198070		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198078		00 00 00 00 00 00 00 00
>198080		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198088		37 38 39 30 2d 3d 08 09
>198090		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198098		6f 70 5b 5d 0d 00 61 73
>1980a0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>1980a8		27 60 00 5c 7a 78 63 76
>1980b0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1980b8		00 20 00 00 00 00 00 00
>1980c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1980c8		00 00 00 00 00 00 00 00
>1980d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1980d8		00 00 00 00 00 00 00 00
>1980e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1980e8		00 00 00 00 00 00 00 00
>1980f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1980f8		00 00 00 00 00 00 00 00
>198100		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198108		37 38 39 30 2d 3d 08 09
>198110		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198118		6f 70 5b 5d 0d 00 61 73
>198120		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198128		27 60 00 5c 7a 78 63 76
>198130		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198138		00 20 00 00 00 00 00 00
>198140		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198148		00 00 00 00 00 00 00 00
>198150		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198158		00 00 00 00 00 00 00 00
>198160		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198168		00 00 00 00 00 00 00 00
>198170		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198178		00 00 00 00 00 00 00 00
>198180		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>198188		00 00 00 00 00 00 00 00
>198190		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>198198		00 00 00 00 00 00 00 00
>1981a0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>1981a8		00 00 00 00 00 00 00 00
>1981b0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>1981b8		00 00 00 00 00 00 00 00
>1981c0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>1981c8		11 00 00 9d 00 1d 00 05
>1981d0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1981d8		00 00 00 00 00 00 00 00
>1981e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1981e8		00 00 00 00 00 00 00 00
>1981f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1981f8		00 00 00 00 00 00 00 00
>198200						.align 256
>198200		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>198208		34 37 3a 3d 3f 41 44 46
>198210		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>198218		57 58 5a 5b 5d 5e 60 61
>198220		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>198228		6d 6f 70 71 72 73 75 76
>198230		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>198238		80 81 82 83 84 85 86 87
>198240		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>198248		8f 90 91 92 93 93 94 95
>198250		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>198258		9d 9e 9e 9f a0 a1 a2 a2
>198260		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>198268		a9 aa ab ab ac ad ae ae
>198270		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>198278		b5 b5 b6 b7 b7 b8 b9 b9
>198280		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>198288		bf c0 c0 c1 c2 c2 c3 c4
>198290		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>198298		c9 ca ca cb cb cc cd cd
>1982a0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>1982a8		d2 d3 d4 d4 d5 d5 d6 d6
>1982b0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>1982b8		db dc dc dd de de df df
>1982c0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>1982c8		e4 e4 e5 e5 e6 e6 e7 e7
>1982d0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>1982d8		ec ec ed ed ee ee ef ef
>1982e0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>1982e8		f4 f4 f5 f5 f6 f6 f7 f7
>1982f0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>1982f8		fb fc fc fd fd fe fe ff
>198300						.align 256
>198300		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>198308		25 27 2a 2c 2e 30 32 34
>198310		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>198318		44 46 47 49 4a 4c 4d 4f
>198320		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>198328		5b 5c 5d 5e 60 61 62 63
>198330		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>198338		6d 6e 70 71 72 73 74 75
>198340		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>198348		7e 7f 80 81 82 83 84 84
>198350		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>198358		8d 8e 8e 8f 90 91 92 93
>198360		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>198368		9a 9b 9c 9d 9e 9f 9f a0
>198370		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>198378		a7 a8 a9 aa aa ab ac ad
>198380		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>198388		b3 b4 b5 b6 b6 b7 b8 b8
>198390		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>198398		bf bf c0 c1 c2 c2 c3 c4
>1983a0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>1983a8		ca ca cb cc cc cd ce ce
>1983b0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>1983b8		d4 d5 d6 d6 d7 d7 d8 d9
>1983c0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>1983c8		de df e0 e0 e1 e1 e2 e3
>1983d0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>1983d8		e8 e9 e9 ea ea eb ec ec
>1983e0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>1983e8		f1 f2 f3 f3 f4 f4 f5 f5
>1983f0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>1983f8		fb fb fc fc fd fd fe ff
>198400						.align 256
>198400		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>198408		83 dd ce 39 cd c5 3b 15
>198410		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>198418		87 12 31 65 89 27 88 42
>198420		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>198428		94 ce 56 ec fe da 58 c9
>198430		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>198438		d0 10 2c b2 4b ea 32 61
>198440		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>198448		a1 e6 ca 2d b3 ce b0 79
>198450		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>198458		5f e3 fb bd 15 2e be f5
>198460		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>198468		8d 8f 2c 80 0a 5e 99 36
>198470		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>198478		13 52 44 2f e3 ef 44 a2
>198480		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>198488		be 23 02 58 0a 52 5e b4
>198490		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>198498		d5 cf 3e df c4 9e da bb
>1984a0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>1984a8		77 7d b1 3b 4a 68 35 6e
>1984b0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>1984b8		b5 8f 44 63 55 6f e1 50
>1984c0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>1984c8		57 74 b9 bd 05 14 50 eb
>1984d0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>1984d8		44 bc ec db 22 58 fc be
>1984e0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>1984e8		24 aa 82 11 5c 9f 43 4d
>1984f0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>1984f8		3e 3d 66 7e 0a 1c 6b 74
>198500						.align 16
>198500		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>198508		01 01 01 00 00 00 00 00
>198510		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>198518		ff ff ff 01 00 00 00 00
>198520		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>198528		01 55 ff ff 01 00 00 00
>198530		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>198538		ff ff ff ff 01 00 00 00
>198540		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>198548		ff ff 01 ff ff 01 00 00
>198550		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>198558		01 ff ff 01 ff 01 00 00
>198560		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>198568		ff 01 ff ff ff 01 00 00
>198570		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>198578		ff ff ff ff ff 01 01 00
>198580		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>198588		ff ff ff ff 01 ff ff 01
>198590		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>198598		ff ff ff ff ff ff ff 01
>1985a0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>1985a8		55 55 01 ff ff 55 01 00
>1985b0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>1985b8		01 01 55 ff 55 01 00 00
>1985c0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>1985c8		01 55 55 55 01 00 00 00
>1985d0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>1985d8		01 55 55 01 00 00 00 00
>1985e0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>1985e8		00 01 01 00 00 00 00 00
>1985f0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1985f8		00 00 00 00 00 00 00 00
>1a0000		5c 72 8a 1a 5c 84 70 1a		        .binary "binaries/basic816_1A0000.bin"
>1a0008		5c 76 27 1a 5c ba 02 1a 5c 58 00 1a 5c b8 00 1a
>1a0018		5c 0f 04 1a 5c 5e 02 1a 5c 79 02 1a 5c 80 02 1a
>1a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>1a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>1a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>1a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>1a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>1a0078		0d d0 03 4c b1 00 c9 08 d0 1a e0 00 00 f0 ed da
>1a0088		bf 01 4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0
>1a0098		fa ca 80 0e c9 20 90 d4 9f 00 4c 00 e8 20 18 00
>1a00a8		80 ca a9 08 20 18 00 80 c3 a9 00 20 1c 00 28 60
>1a00b8		da 5a 8b 0b 08 22 4c 10 00 28 2b ab 7a fa 60 08
>1a00c8		e2 30 48 a9 1b 20 18 00 a9 5b 20 18 00 68 20 18
>1a00d8		00 28 60 0b 8b 08 08 e2 20 48 a9 00 48 ab 68 28
>1a00e8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 3b 38 e9 04
>1a00f8		00 1b e2 20 a9 00 83 02 83 03 83 04 20 14 00 c9
>1a0108		00 f0 f9 83 01 a3 02 d0 35 a3 01 c9 08 d0 0a 20
>1a0118		18 00 a9 50 20 c7 00 80 e3 c9 0d f0 0a c9 1b d0
>1a0128		06 a9 01 83 02 80 d5 20 18 00 a3 01 85 0c c2 20
>1a0138		3b 18 69 04 00 1b e2 20 a5 0c 28 2b ab 60 c9 01
>1a0148		d0 10 a3 01 c9 5b f0 03 82 a9 ff a9 02 83 02 82
>1a0158		aa ff c9 02 d0 29 a3 01 c9 41 90 0c c9 45 b0 08
>1a0168		a3 01 20 c7 00 82 8c ff c9 30 90 10 c9 3a b0 0c
>1a0178		38 e9 30 83 03 a9 03 83 02 82 80 ff 82 75 ff c9
>1a0188		03 d0 41 a3 01 c9 30 90 29 c9 3a b0 25 a3 03 8f
>1a0198		00 01 00 a9 00 8f 01 01 00 8f 03 01 00 a9 0a 8f
>1a01a8		02 01 00 a3 01 38 e9 30 18 6f 04 01 00 83 03 82
>1a01b8		4a ff c9 3b d0 07 a9 04 83 02 82 3f ff c9 7e f0
>1a01c8		40 82 30 ff c9 04 f0 03 82 5f ff a3 01 c9 30 90
>1a01d8		29 c9 3a b0 25 a3 04 8f 00 01 00 a9 00 8f 01 01
>1a01e8		00 8f 03 01 00 a9 0a 8f 02 01 00 a3 01 38 e9 30
>1a01f8		18 6f 04 01 00 83 04 82 02 ff c9 7e f0 03 82 f3
>1a0208		fe a3 03 c9 02 f0 0b c9 03 f0 0b c9 18 f0 0f 82
>1a0218		e2 fe a9 40 80 02 a9 50 20 c7 00 82 d6 fe a5 d2
>1a0228		d0 10 a3 04 c9 08 d0 0a a9 1b 20 18 00 a9 5f 20
>1a0238		18 00 82 bf fe 08 e2 20 af 00 00 af 89 3c f0 08
>1a0248		09 03 8f 00 00 af 80 0c 09 01 8f 00 00 af a9 00
>1a0258		22 3c 10 00 28 60 08 e2 20 c9 00 f0 08 af 10 00
>1a0268		af 09 01 80 06 af 10 00 af 29 fe 8f 10 00 af 28
>1a0278		60 08 22 84 10 00 28 60 48 da 5a 0b 08 e2 20 c2
>1a0288		10 a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f 00
>1a0298		c0 af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00 5b
>1a02a8		68 28 a2 00 00 a0 00 00 22 84 10 00 28 2b 7a fa
>1a02b8		68 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a02c8		c2 30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2 20
>1a02d8		29 ff 00 85 0a af 11 00 00 8f 08 01 00 af 1c 00
>1a02e8		00 3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08 a5
>1a02f8		0a 69 00 00 85 0a e2 20 af 0f 00 00 85 8f a0 00
>1a0308		00 a2 00 00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0 f4
>1a0318		af 0f 00 00 3a aa bf 00 4f 00 c9 20 d0 09 a9 00
>1a0328		9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 20 69
>1a0338		03 a2 00 00 a9 00 9f 18 f0 1a e8 e0 40 00 d0 f6
>1a0348		a9 80 8f b4 08 00 e2 20 a9 00 8f 89 0f 00 a9 00
>1a0358		8f 00 02 af 8f 0c 02 af 8f 18 02 af 8f 24 02 af
>1a0368		60 08 e2 20 af 0e 08 af 09 08 8f 0e 08 af af 00
>1a0378		08 af 8f 84 e8 af af 02 08 af 8f 85 e8 af a9 03
>1a0388		8f 86 e8 af af 0e 08 af 29 f7 8f 0e 08 af ea ea
>1a0398		ea a9 01 8f 86 e8 af 28 60 08 e2 20 48 48 a9 00
>1a03a8		22 3c 10 00 68 22 18 10 00 af 89 0f 00 29 01 d0
>1a03b8		f8 68 28 60 08 e2 20 48 48 a9 01 22 3c 10 00 68
>1a03c8		22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60 08
>1a03d8		c2 20 48 e2 20 a9 0d 20 18 00 c2 20 68 28 60 08
>1a03e8		22 78 10 00 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>1a03f8		68 28 e2 20 a5 b6 1a 85 b6 cf 13 00 00 90 05 20
>1a0408		14 00 64 b6 2b 28 60 da 5a 0b 08 08 c2 20 48 a9
>1a0418		00 08 5b 68 28 e2 20 c2 10 8f b5 08 00 af b4 08
>1a0428		00 29 20 f0 07 af b5 08 00 20 28 00 af b4 08 00
>1a0438		29 80 f0 07 af b5 08 00 20 a1 03 af b4 08 00 29
>1a0448		40 f0 14 af b5 08 00 20 bc 03 af b5 08 00 c9 0d
>1a0458		d0 05 a9 0a 20 bc 03 28 2b 7a fa 60 08 e2 20 bd
>1a0468		00 00 f0 06 20 18 00 e8 80 f5 28 60 08 c2 20 48
>1a0478		48 4a 4a 4a 4a 4a 4a 4a 4a 20 8e 04 68 29 ff 00
>1a0488		20 8e 04 68 28 60 08 c2 20 48 e2 20 48 4a 4a 4a
>1a0498		4a 20 a5 04 68 20 a5 04 c2 20 68 28 60 08 c2 30
>1a04a8		da 29 0f 00 aa bf 00 d0 1a 20 18 00 fa 28 60 08
>1a04b8		c2 30 48 da 5a 8b 0b c2 30 a3 0b 18 69 03 00 aa
>1a04c8		e2 20 a9 1a 48 ab bd 00 00 f0 06 20 a1 03 e8 80
>1a04d8		f5 c2 30 2b ab 7a fa 68 28 60 08 e2 20 c9 5b b0
>1a04e8		04 c9 41 b0 0b c9 7b b0 04 c9 61 b0 03 28 18 60
>1a04f8		28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 03 28 18
>1a0508		60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 13 c9
>1a0518		67 b0 04 c9 61 b0 0b c9 47 b0 04 c9 41 b0 03 28
>1a0528		18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 12
>1a0538		c9 67 b0 04 c9 61 b0 0f c9 47 b0 04 c9 41 b0 09
>1a0548		28 60 38 e9 30 80 f9 29 df 38 e9 37 80 f2 08 e2
>1a0558		20 c9 7b b0 06 c9 61 90 02 29 df 28 60 08 e2 20
>1a0568		c2 10 bd 00 00 f0 09 20 56 05 9d 00 00 e8 80 f2
>1a0578		28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>1a0588		48 06 23 26 25 a5 23 85 0c a5 25 85 0e 06 0c 26
>1a0598		0e 06 0c 26 0e 18 a5 23 65 0c 85 23 a5 25 65 0e
>1a05a8		85 25 68 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>1a05b8		68 28 c2 20 a5 23 8f 1a 01 00 a9 0a 00 8f 18 01
>1a05c8		00 af 1c 01 00 85 23 64 25 af 1e 01 00 85 29 64
>1a05d8		2b e2 20 a9 00 85 27 85 2d 2b 28 60 08 0b 08 c2
>1a05e8		20 48 a9 00 08 5b 68 28 c2 20 a5 23 8f 1a 01 00
>1a05f8		a9 64 00 8f 18 01 00 af 1c 01 00 85 23 64 25 af
>1a0608		1e 01 00 85 29 64 2b e2 20 a9 00 85 27 85 2d 2b
>1a0618		28 60 08 c2 20 a5 23 d0 08 a5 25 d0 04 28 e2 02
>1a0628		60 28 c2 02 60 08 c2 30 a9 ff ff 85 23 85 25 e2
>1a0638		20 a9 00 85 27 28 60 08 c2 30 a9 00 00 85 23 85
>1a0648		25 e2 20 a9 00 85 27 28 60 08 e2 20 a5 27 c9 00
>1a0658		f0 07 c9 01 d0 05 20 0a 5c 28 60 08 c2 20 48 a9
>1a0668		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a0678		ff 00 20 5e 1e e2 20 dc d4 08 08 e2 20 a5 2d c9
>1a0688		00 f0 37 c9 01 d0 35 c2 20 a5 25 48 a5 23 48 c2
>1a0698		20 a5 29 85 23 a5 2b 85 25 e2 20 a9 01 85 27 20
>1a06a8		0a 5c c2 20 a5 23 85 29 a5 25 85 2b e2 20 a9 00
>1a06b8		85 2d c2 20 68 85 23 68 85 25 28 60 08 c2 20 48
>1a06c8		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>1a06d8		29 ff 00 20 5e 1e e2 20 dc d4 08 08 e2 20 a5 27
>1a06e8		c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a06f8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a0708		e2 20 dc d4 08 08 e2 20 a5 27 c9 00 f0 07 c9 01
>1a0718		d0 0b 20 0a 5c c2 20 a5 25 d0 21 28 60 08 c2 20
>1a0728		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a0738		20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20 48
>1a0748		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>1a0758		29 ff 00 20 5e 1e e2 20 dc d4 08 08 e2 20 a5 27
>1a0768		c9 00 f0 07 c9 01 d0 11 20 0a 5c a5 26 d0 29 a5
>1a0778		25 d0 25 a5 24 d0 21 28 60 08 c2 20 48 a9 00 08
>1a0788		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a0798		20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a07a8		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a07b8		5e 1e e2 20 dc d4 08 08 e2 20 a5 27 c9 01 f0 26
>1a07c8		c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a07d8		a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>1a07e8		dc d4 08 20 04 5c 28 60 08 e2 20 a5 2d c9 01 f0
>1a07f8		26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a0808		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>1a0818		20 dc d4 08 20 21 08 28 60 c2 20 a5 25 48 a5 23
>1a0828		48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20 a9 00 85
>1a0838		27 20 04 5c c2 20 a5 23 85 29 a5 25 85 2b e2 20
>1a0848		a9 01 85 2d c2 20 68 85 23 68 85 25 60 08 e2 20
>1a0858		a5 27 c9 00 f0 23 c9 01 f0 2e 08 c2 20 48 a9 00
>1a0868		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a0878		00 20 5e 1e e2 20 dc d4 08 a5 2d c9 00 f0 16 c9
>1a0888		01 d0 d7 20 04 5c 80 0d a5 2d c9 01 f0 07 c9 00
>1a0898		d0 c8 20 21 08 e2 20 a5 27 28 60 08 e2 20 a5 27
>1a08a8		c9 02 d0 25 a5 2d c9 02 f0 24 08 c2 20 48 a9 00
>1a08b8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a08c8		00 20 5e 1e e2 20 dc d4 08 20 55 08 a5 27 28 60
>1a08d8		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 64 23
>1a08e8		64 25 e2 20 64 27 a7 00 c9 26 f0 44 e2 20 a7 00
>1a08f8		20 fb 04 90 76 20 7a 05 38 e9 30 c2 20 29 ff 00
>1a0908		18 65 23 85 23 a5 25 69 00 00 85 25 20 1d 21 80
>1a0918		db 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a0928		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a0938		20 1d 21 a7 00 c9 48 f0 04 c9 68 d0 d4 20 1d 21
>1a0948		e2 20 a7 00 20 0c 05 90 22 20 2d 05 c2 20 06 23
>1a0958		26 25 06 23 26 25 06 23 26 25 06 23 26 25 29 ff
>1a0968		00 18 65 23 85 23 20 1d 21 80 d5 2b 28 60 08 c2
>1a0978		30 a5 04 f0 1c 38 a5 04 e5 1a a8 e2 20 b7 1a f0
>1a0988		10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0 ff ff d0
>1a0998		ec a9 00 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>1a09a8		c2 30 a5 1a 85 00 e2 20 a5 1c 85 02 20 3e 21 a7
>1a09b8		00 20 fb 04 90 0c 20 d8 08 c2 20 a5 23 85 d7 20
>1a09c8		3e 21 c2 20 a5 00 85 1a e2 20 a5 02 85 1c 20 ea
>1a09d8		09 e2 20 20 5b 0a c9 00 f0 05 20 06 0c 80 f4 2b
>1a09e8		28 60 08 c2 20 a5 1a 85 00 a5 1c 85 02 a2 00 00
>1a09f8		e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0 53 c9 3a
>1a0a08		f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0 10 c9
>1a0a18		72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72 d0 1a c8
>1a0a28		b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7 00 f0
>1a0a38		20 c9 4d f0 0a c9 6d f0 06 e8 20 1d 21 80 b3 a7
>1a0a48		00 c9 3a d0 03 20 1d 21 a9 03 85 1e a9 91 20 06
>1a0a58		0c 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a0a68		20 a9 7f 85 1e c2 10 20 bb 0b a5 1e d0 03 4c fb
>1a0a78		0a c2 20 a5 1a 85 00 e2 20 a5 1c 85 02 c2 20 64
>1a0a88		04 64 06 e2 30 a0 00 b7 00 f0 da c9 91 f0 d6 c8
>1a0a98		c4 1e 90 f3 c2 10 a7 00 c9 22 d0 05 20 1d 0b 80
>1a0aa8		28 a5 1e c9 03 90 19 c2 20 a5 00 c5 1a d0 08 e2
>1a0ab8		20 a5 02 c5 1c f0 09 e2 20 a7 04 20 4d 51 b0 09
>1a0ac8		e2 20 20 2d 0b c9 00 d0 11 c2 20 a5 00 85 04 e2
>1a0ad8		20 a5 02 85 06 20 1d 21 80 a9 c9 81 d0 15 20 76
>1a0ae8		09 c9 00 f0 11 89 80 f0 08 c9 90 f0 04 a9 af 80
>1a0af8		02 a9 81 2b 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a0b08		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a0b18		e2 20 dc d4 08 08 e2 20 20 1d 21 a7 00 f0 04 c9
>1a0b28		22 d0 f5 28 60 da 5a 08 0b 08 c2 20 48 a9 00 08
>1a0b38		5b 68 28 c2 20 a5 04 d0 0a e2 20 a5 04 d0 04 a9
>1a0b48		00 80 0a e2 20 a7 04 20 4d 51 a9 00 2a 85 28 c2
>1a0b58		30 a9 fb 0c 85 08 e2 20 a9 1a 85 0a a2 80 00 e2
>1a0b68		20 a0 01 00 b7 08 f0 31 c5 1e d0 32 c2 30 a0 02
>1a0b78		00 b7 08 85 0c e2 20 a9 1a 85 0e a5 28 f0 07 a7
>1a0b88		0c 20 4d 51 b0 18 e2 10 a0 00 b7 00 20 56 05 d7
>1a0b98		0c d0 0b c8 c4 1e 90 f2 8a 2b 28 7a fa 60 c2 30
>1a0ba8		18 a5 08 69 08 00 85 08 e2 20 a5 0a 69 00 85 0a
>1a0bb8		e8 80 ac 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>1a0bc8		c2 30 a9 fb 0c 85 08 a9 1a 00 85 0a 64 0c e2 20
>1a0bd8		a0 01 00 b7 08 f0 1d c5 1e b0 06 c5 0c 90 02 85
>1a0be8		0c c2 20 18 a5 08 69 08 00 85 08 a5 0a 69 00 00
>1a0bf8		85 0a 80 da e2 20 a5 0c 85 1e ab 2b 28 60 08 0b
>1a0c08		08 c2 20 48 a9 00 08 5b 68 28 e2 20 87 00 c2 20
>1a0c18		18 a5 00 69 01 00 85 08 a5 02 69 00 00 85 0a e2
>1a0c28		10 a4 1e 88 e2 20 b7 08 87 08 f0 13 c2 20 18 a5
>1a0c38		08 69 01 00 85 08 a5 0a 69 00 00 85 0a 80 e5 2b
>1a0c48		28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69 fb 0c aa
>1a0c58		28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>1a0c68		e2 20 48 a9 1a 48 ab 68 28 e2 20 c2 10 20 4a 0c
>1a0c78		bd 00 00 c2 20 29 0f 00 2b ab 28 60 08 8b 0b 08
>1a0c88		c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 1a 48
>1a0c98		ab 68 28 c2 30 20 4a 0c bd 04 00 2b ab 28 60 08
>1a0ca8		8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>1a0cb8		a9 1a 48 ab 68 28 e2 20 c2 10 20 4a 0c bd 00 00
>1a0cc8		c2 20 29 f0 00 2b ab 28 60 08 8b 0b 08 c2 20 48
>1a0cd8		a9 00 08 5b 68 28 08 e2 20 48 a9 1a 48 ab 68 28
>1a0ce8		e2 20 c2 10 20 4a 0c bd 06 00 c2 20 29 ff 00 2b
>1a0cf8		ab 28 60 03 01 10 d0 e3 27 02 00 03 01 12 d0 23
>1a0d08		28 02 00 02 01 14 d0 5a 28 02 00 02 01 16 d0 91
>1a0d18		28 02 00 02 03 18 d0 9b 28 02 00 00 01 1c d0 ae
>1a0d28		28 02 00 04 02 1e d0 6c 2a 02 00 04 02 21 d0 2c
>1a0d38		2a 02 00 04 02 24 d0 ec 29 02 00 04 01 27 d0 2c
>1a0d48		29 02 00 04 01 29 d0 ac 29 02 00 04 01 2b d0 6c
>1a0d58		29 02 00 05 03 2d d0 16 29 01 00 06 03 31 d0 e8
>1a0d68		28 02 00 07 02 35 d0 ff 28 02 00 ff 01 38 d0 00
>1a0d78		00 00 00 40 01 3a d0 00 00 00 00 20 03 3c d0 7f
>1a0d88		41 00 00 20 05 40 d0 84 45 00 00 20 03 46 d0 cf
>1a0d98		44 00 00 20 04 4a d0 6f 44 00 00 20 03 4f d0 66
>1a0da8		44 00 00 20 02 53 d0 fe 43 00 00 50 04 56 d0 00
>1a0db8		00 00 00 50 04 5b d0 00 00 00 00 20 05 60 d0 41
>1a0dc8		43 00 00 20 06 66 d0 ba 43 00 00 20 03 6d d0 96
>1a0dd8		41 00 00 50 02 71 d0 00 00 00 00 50 04 74 d0 00
>1a0de8		00 00 00 20 04 79 d0 8a 42 00 00 20 02 7e d0 90
>1a0df8		41 00 00 20 04 81 d0 93 41 00 00 50 05 86 d0 00
>1a0e08		00 00 00 50 05 8c d0 00 00 00 00 20 04 92 d0 8d
>1a0e18		41 00 00 20 03 97 d0 c5 44 00 00 20 04 9b d0 60
>1a0e28		41 00 00 20 04 a0 d0 f0 40 00 00 20 05 a5 d0 86
>1a0e38		40 00 00 20 05 ab d0 13 40 00 00 20 03 b1 d0 0f
>1a0e48		40 00 00 20 04 b5 d0 f0 3e 00 00 20 04 ba d0 02
>1a0e58		40 00 00 20 07 bf d0 06 40 00 00 20 03 c7 d0 43
>1a0e68		3e 00 00 20 04 cb d0 ac 3d 00 00 00 01 d0 d0 ac
>1a0e78		2a 01 00 30 03 d2 d0 9c 4b 00 00 30 04 d6 d0 ec
>1a0e88		4b 00 00 30 05 db d0 b5 4c 00 00 30 05 e1 d0 42
>1a0e98		4c 00 00 30 04 e7 d0 14 4d 00 00 30 03 ec d0 69
>1a0ea8		4d 00 00 30 03 f0 d0 ae 4d 00 00 30 03 f4 d0 37
>1a0eb8		4e 00 00 30 03 f8 d0 c0 4e 00 00 30 03 fc d0 22
>1a0ec8		4f 00 00 30 04 00 d1 0e 4b 00 00 30 03 05 d1 ad
>1a0ed8		4a 00 00 30 04 09 d1 5f 4a 00 00 30 03 0e d1 09
>1a0ee8		4a 00 00 30 05 12 d1 40 49 00 00 30 06 18 d1 5f
>1a0ef8		48 00 00 30 04 1f d1 aa 47 00 00 10 03 24 d1 89
>1a0f08		50 00 00 10 03 28 d1 54 50 00 00 10 04 2c d1 5d
>1a0f18		6c 00 00 10 04 31 d1 a0 50 00 00 10 03 36 d1 84
>1a0f28		69 00 00 20 05 3a d1 2f 6b 00 00 10 04 40 d1 0a
>1a0f38		6c 00 00 20 05 45 d1 16 6d 00 00 20 03 4b d1 35
>1a0f48		6e 00 00 10 04 4f d1 a2 6d 00 00 20 06 54 d1 ab
>1a0f58		6e 00 00 20 04 5b d1 cf 6f 00 00 10 07 60 d1 51
>1a0f68		50 00 00 20 03 68 d1 3a 3d 00 00 20 05 6c d1 4a
>1a0f78		3c 00 00 20 09 72 d1 6b 2c 00 00 20 09 7c d1 f8
>1a0f88		2b 00 00 20 0a 86 d1 28 2c 00 00 20 07 91 d1 65
>1a0f98		2b 00 00 30 08 99 d1 61 46 00 00 20 07 a2 d1 fa
>1a0fa8		2a 00 00 30 08 aa d1 cb 46 00 00 20 08 b3 d1 b0
>1a0fb8		2d 00 00 20 08 bc d1 e4 2c 00 00 20 06 c5 d1 ea
>1a0fc8		2e 00 00 20 09 cc d1 f2 2f 00 00 20 04 d6 d1 4f
>1a0fd8		31 00 00 20 04 db d1 c0 31 00 00 20 04 e0 d1 59
>1a0fe8		32 00 00 20 06 e5 d1 95 33 00 00 20 08 ec d1 33
>1a0ff8		34 00 00 20 0a f5 d1 81 34 00 00 20 07 00 d2 b8
>1a1008		35 00 00 20 07 08 d2 36 36 00 00 20 08 10 d2 a8
>1a1018		36 00 00 20 06 19 d2 e5 36 00 00 20 07 20 d2 15
>1a1028		3a 00 00 50 06 28 d2 00 00 00 00 50 04 2f d2 00
>1a1038		00 00 00 20 06 34 d2 2a 3c 00 00 30 03 3b d2 78
>1a1048		4f 00 00 30 03 3f d2 30 47 00 00 30 03 43 d2 8b
>1a1058		4f 00 00 30 03 47 d2 a1 4f 00 00 30 03 4b d2 b7
>1a1068		4f 00 00 30 02 4f d2 cd 4f 00 00 30 04 52 d2 e3
>1a1078		4f 00 00 30 04 57 d2 f9 4f 00 00 30 04 5c d2 0f
>1a1088		50 00 00 30 03 61 d2 25 50 00 00 30 03 65 d2 3b
>1a1098		50 00 00 30 05 69 d2 86 47 00 00 00 00 00 00 00
>1a10a8		00 00 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a10b8		30 a9 ff ff 85 ba e2 20 a9 17 85 bc c2 20 64 b7
>1a10c8		64 bd e2 20 64 b9 64 bf 2b 28 60 5a 08 e2 20 85
>1a10d8		ea c2 10 86 8f c2 20 a5 0e 48 a5 0c 48 a5 12 48
>1a10e8		a5 10 48 20 83 11 b0 03 20 07 11 20 0f 13 c2 20
>1a10f8		68 85 10 68 85 12 68 85 0c 68 85 0e 28 7a 60 08
>1a1108		0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a6 8f ca
>1a1118		86 0c e8 c2 30 38 a5 ba e5 0c 85 c0 e2 20 a5 bc
>1a1128		e9 00 85 c2 20 0f 13 e2 20 a5 ea a0 00 00 97 c3
>1a1138		a9 00 a0 01 00 97 c3 a0 02 00 97 c3 c2 20 a9 00
>1a1148		00 97 c3 c2 20 18 a5 ba 69 01 00 a0 05 00 97 c3
>1a1158		e2 20 c8 c8 a5 bc 69 00 97 c3 c2 20 a5 c0 85 b7
>1a1168		e2 20 a5 c2 85 b9 c2 20 38 a5 c3 e9 01 00 85 ba
>1a1178		e2 20 a5 c5 e9 00 85 bc 2b 28 60 08 0b 08 c2 20
>1a1188		48 a9 00 08 5b 68 28 c2 30 c2 20 a5 bd 85 c9 e2
>1a1198		20 a5 bf 85 cb a5 c9 d0 17 e2 20 a5 cb d0 11 c2
>1a11a8		20 a9 00 00 85 cf e2 20 a9 00 85 d1 2b 28 18 60
>1a11b8		c2 20 a0 05 00 b7 c9 85 cc e2 20 c8 c8 b7 c9 85
>1a11c8		ce c2 20 18 a5 c9 65 8f 85 0c e2 20 a5 cb 69 00
>1a11d8		85 0e c2 20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e
>1a11e8		69 00 85 0e c2 20 a5 0c c5 cc d0 28 e2 20 a5 0e
>1a11f8		c5 ce d0 20 c2 20 a5 cf d0 5d e2 20 a5 d1 d0 57
>1a1208		c2 20 a0 02 00 b7 c9 85 bd e2 20 c8 c8 b7 c9 85
>1a1218		bf 4c c0 12 c2 20 a5 0c 69 08 00 85 10 e2 20 a5
>1a1228		0e 69 00 85 12 e2 20 a5 c6 c5 10 b0 3e 90 08 c2
>1a1238		20 a5 c6 c5 10 b0 34 c2 20 a5 c9 85 cf e2 20 a5
>1a1248		cb 85 d1 c2 20 a0 02 00 b7 cf 85 c9 e2 20 c8 c8
>1a1258		b7 cf 85 cb 4c 9d 11 c2 20 a0 02 00 b7 c9 97 cf
>1a1268		e2 20 c8 c8 b7 c9 97 cf 4c c0 12 c2 20 a0 05 00
>1a1278		b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a0 02
>1a1288		00 b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a5
>1a1298		cf d0 14 e2 20 a5 cf d0 0e c2 20 a5 0c 85 bd e2
>1a12a8		20 a5 0e 85 bf 80 11 c2 20 a0 02 00 a5 0c 97 cf
>1a12b8		e2 20 c8 c8 a5 0e 97 cf c2 20 a5 c9 85 c3 e2 20
>1a12c8		a5 cb 85 c5 c2 20 a5 c3 85 b7 e2 20 a5 c5 85 b9
>1a12d8		c2 20 a0 05 00 a5 0c 97 c3 e2 20 c8 c8 a5 0e 97
>1a12e8		c3 c2 20 a0 02 00 a9 00 00 97 c3 e2 20 c8 c8 97
>1a12f8		c3 e2 20 a5 ea e2 20 a0 00 00 97 c3 a0 01 00 a9
>1a1308		00 97 c3 2b 28 38 60 08 c2 20 38 a5 c0 e9 08 00
>1a1318		85 c3 e2 20 a5 c2 e9 00 85 c5 28 60 08 e2 20 a5
>1a1328		c5 f0 04 c9 18 b0 12 c2 20 a5 c3 f0 0c e2 20 a0
>1a1338		01 00 b7 c3 1a 97 c3 28 60 00 ea 08 e2 20 a5 c5
>1a1348		f0 04 c9 18 b0 17 c2 20 a5 c3 f0 11 e2 20 a0 01
>1a1358		00 b7 c3 3a 97 c3 d0 03 20 67 13 28 60 00 ea 08
>1a1368		c2 20 a5 bd d0 21 e2 20 a5 bf d0 1b a5 c5 85 bf
>1a1378		c2 20 a5 c3 85 bd a9 00 00 a0 02 00 97 c3 c8 c8
>1a1388		e2 20 97 c3 4c 4e 14 e2 20 a5 bf c5 c5 90 28 c2
>1a1398		20 a5 bd c5 c3 90 20 c2 20 a5 bd a0 02 00 97 c3
>1a13a8		e2 20 c8 c8 a5 bf 97 c3 c2 20 a5 c3 85 bd e2 20
>1a13b8		a5 c5 85 bf 4c 4e 14 c2 20 a5 bd 85 08 e2 20 a5
>1a13c8		bf 85 0a e2 20 a0 04 00 b7 08 c5 c8 90 32 d0 0b
>1a13d8		c2 20 a0 02 00 b7 08 c5 c6 90 25 c2 20 a0 02 00
>1a13e8		b7 08 97 c3 e2 20 c8 c8 b7 08 97 c3 c2 20 a5 c3
>1a13f8		a0 02 00 97 08 e2 20 a5 c5 c8 c8 97 08 4c 4e 14
>1a1408		c2 20 a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0
>1a1418		19 c2 20 a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08
>1a1428		85 0a c2 20 a5 0c 85 08 80 99 c2 20 a5 c3 a0 02
>1a1438		00 97 08 e2 20 c8 c8 a5 c5 97 08 a9 00 97 c3 c2
>1a1448		20 a0 02 00 97 c3 20 53 14 28 60 08 c2 20 a5 bd
>1a1458		85 c3 e2 20 a5 bf 85 c5 c2 20 a5 c3 d0 09 e2 20
>1a1468		a5 c5 d0 03 4c f6 14 c2 20 a0 02 00 b7 c3 85 0c
>1a1478		e2 20 c8 c8 b7 c3 85 0e c2 20 a0 05 00 b7 c3 85
>1a1488		10 e2 20 c8 c8 b7 c3 85 12 c2 20 a5 0c c5 10 d0
>1a1498		08 e2 20 a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c3
>1a14a8		85 0c e2 20 c8 c8 b7 c3 85 0e c2 20 a5 0c 85 c3
>1a14b8		e2 20 a5 0e 85 c5 80 a0 c2 20 a0 02 00 b7 c3 85
>1a14c8		0c e2 20 c8 c8 b7 c3 85 0e c2 20 a0 02 00 b7 0c
>1a14d8		97 c3 e2 20 c8 c8 b7 0c 97 c3 c2 20 a0 05 00 b7
>1a14e8		0c 97 c3 e2 20 c8 c8 b7 0c 97 c3 4c 6f 14 28 60
>1a14f8		08 c2 20 64 16 64 18 28 60 08 c2 30 a5 16 d0 16
>1a1508		a5 18 d0 12 e2 20 64 16 a5 e2 1a 1a 85 17 a5 e3
>1a1518		85 18 64 19 80 07 c2 20 a5 17 1a 85 17 c2 20 a5
>1a1528		bb 3a c5 17 f0 02 b0 1f 08 c2 20 48 a9 00 08 5b
>1a1538		68 28 e2 20 a9 03 8f d3 08 00 c2 20 29 ff 00 20
>1a1548		5e 1e e2 20 dc d4 08 28 60 c9 00 d0 05 c0 01 00
>1a1558		f0 05 09 30 97 16 c8 60 08 c2 30 64 0c a5 25 10
>1a1568		1a 18 a5 23 49 ff ff 69 01 00 85 23 a5 25 49 ff
>1a1578		ff 69 00 00 85 25 a9 ff ff 85 0c 64 10 64 12 64
>1a1588		14 a2 1f 00 f8 06 23 26 25 a5 10 65 10 85 10 a5
>1a1598		12 65 12 85 12 a5 14 65 14 85 14 ca 10 e7 d8 e2
>1a15a8		20 20 01 15 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9
>1a15b8		20 97 16 c8 a2 05 00 b5 10 29 f0 4a 4a 4a 4a 20
>1a15c8		51 15 b5 10 29 0f 20 51 15 ca 10 eb c0 01 00 d0
>1a15d8		0c a9 20 87 16 a0 01 00 a9 30 97 16 c8 a9 00 97
>1a15e8		16 28 60 00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00
>1a15f8		f0 04 e8 c8 80 f7 28 60 08 0b 08 c2 20 48 a9 00
>1a1608		08 5b 68 28 e2 20 c2 10 a0 00 00 b7 23 d0 04 b7
>1a1618		29 f0 25 b7 23 d7 29 90 12 d0 03 c8 80 ed c2 20
>1a1628		a9 01 00 85 23 e2 20 64 25 80 15 c2 20 a9 ff ff
>1a1638		85 23 e2 20 85 25 80 08 c2 20 64 23 e2 20 64 25
>1a1648		e2 20 a9 00 85 27 2b 28 60 08 0b 8b 08 c2 20 48
>1a1658		a9 00 08 5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20
>1a1668		a5 25 48 ab c2 20 68 28 a6 23 20 ed 15 84 0c 08
>1a1678		c2 20 48 e2 20 a5 2b 48 ab c2 20 68 28 a6 29 20
>1a1688		ed 15 c2 20 98 38 65 0c aa e2 20 a9 02 20 d3 10
>1a1698		c2 20 a5 b7 85 08 e2 20 a5 b9 85 0a a0 00 00 08
>1a16a8		c2 20 48 e2 20 a5 25 48 ab c2 20 68 28 a6 23 bd
>1a16b8		00 00 f0 06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48
>1a16c8		e2 20 a5 2b 48 ab c2 20 68 28 a6 29 bd 00 00 97
>1a16d8		08 f0 04 e8 c8 80 f5 c2 20 a5 08 85 23 e2 20 a5
>1a16e8		0a 85 25 a9 02 85 27 ab 2b 28 60 da 5a 08 0b 8b
>1a16f8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 0a 48 a5
>1a1708		08 48 c2 30 08 c2 20 48 e2 20 a5 25 48 ab c2 20
>1a1718		68 28 a6 23 20 ed 15 98 aa e8 e2 20 a9 02 20 d3
>1a1728		10 c2 20 a5 c0 85 08 a5 c2 85 0a a0 00 00 e2 20
>1a1738		b7 23 97 08 f0 03 c8 80 f7 c2 20 a5 08 85 23 a5
>1a1748		0a 85 25 c2 20 68 85 08 68 85 0a ab 2b 28 7a fa
>1a1758		60 08 e2 20 c2 10 a0 00 00 b7 23 f0 05 c8 80 f9
>1a1768		84 92 c2 30 c4 29 90 13 f0 11 a5 8f 30 0d f0 0b
>1a1778		c4 8f b0 12 a5 29 d0 0e 4c d7 17 20 01 15 e2 20
>1a1788		a9 00 87 16 80 39 20 01 15 c2 30 18 a5 23 65 29
>1a1798		85 23 a5 25 69 00 00 85 25 a0 00 00 e2 20 a7 23
>1a17a8		97 16 f0 1b c2 20 18 a5 23 69 01 00 85 23 a5 25
>1a17b8		69 00 00 85 25 c8 c4 8f d0 e2 a9 00 00 97 16 c2
>1a17c8		20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28
>1a17d8		60 08 c2 30 20 00 16 a5 23 c9 ff ff d0 05 20 2d
>1a17e8		06 80 03 20 3f 06 28 60 08 c2 30 20 00 16 a5 23
>1a17f8		c9 01 00 d0 05 20 2d 06 80 03 20 3f 06 28 60 08
>1a1808		c2 30 20 00 16 a5 23 c9 00 00 d0 05 20 2d 06 80
>1a1818		03 20 3f 06 28 60 08 c2 30 20 00 16 a5 23 c9 00
>1a1828		00 f0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2 30
>1a1838		20 00 16 a5 23 c9 ff ff f0 05 20 2d 06 80 03 20
>1a1848		3f 06 28 60 08 c2 30 20 00 16 a5 23 c9 01 00 f0
>1a1858		05 20 2d 06 80 03 20 3f 06 28 60 08 e2 20 a5 27
>1a1868		c9 02 d0 1d a5 23 d0 19 a5 24 d0 15 a5 25 d0 11
>1a1878		20 01 15 a9 00 87 16 c2 20 a5 16 85 23 a5 18 85
>1a1888		25 28 60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>1a1898		28 c2 30 a9 00 00 85 00 85 1a a9 16 00 85 02 85
>1a18a8		1c 22 3c 11 00 b0 20 a0 02 00 b7 1a f0 0f c5 55
>1a18b8		90 10 c5 59 f0 02 b0 05 20 ee 18 80 e4 28 2b 7a
>1a18c8		68 60 20 fa 21 80 da 08 c2 20 48 a9 00 08 5b 68
>1a18d8		28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a18e8		1e e2 20 dc d4 08 08 c2 30 85 23 64 25 20 60 15
>1a18f8		a5 16 1a 85 23 a5 18 85 25 20 00 46 18 a5 1a 69
>1a1908		04 00 85 00 a5 1c 69 00 00 85 02 e2 20 a9 20 20
>1a1918		18 00 c2 20 20 2d 19 90 fb e2 20 a9 0d 20 18 00
>1a1928		20 fa 21 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>1a1938		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>1a1948		a7 00 f0 3a 30 05 20 18 00 80 29 c2 20 29 7f 00
>1a1958		0a 0a 0a 18 69 fb 0c 85 08 a9 1a 00 69 00 00 85
>1a1968		0a 08 e2 20 48 a9 1a 48 ab 68 28 a0 02 00 b7 08
>1a1978		aa 20 64 04 c2 20 20 1d 21 ab 2b 28 18 60 ab 2b
>1a1988		28 38 60 08 c2 20 a9 ff 6f 85 1f a9 ff 7f 85 21
>1a1998		a9 ff ff 85 23 85 25 85 29 85 2b e2 20 85 27 85
>1a19a8		2d 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>1a19b8		08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a a4 1f bd
>1a19c8		00 00 99 00 00 bd 02 00 99 02 00 e2 20 bd 04 00
>1a19d8		99 04 00 c2 20 38 98 e9 05 00 85 1f 7a ab 2b 28
>1a19e8		60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>1a19f8		20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5 1f 69 05
>1a1a08		00 85 1f a8 b9 00 00 9d 00 00 b9 02 00 9d 02 00
>1a1a18		e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab 2b 28 60
>1a1a28		08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>1a1a38		48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 21 99 00
>1a1a48		00 88 84 21 7a ab 2b 28 60 08 0b 8b 08 c2 20 48
>1a1a58		a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>1a1a68		e2 20 c2 10 5a a4 21 c8 84 21 b9 00 00 c2 20 29
>1a1a78		ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20 28 1a 28
>1a1a88		60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68 28 e2 20
>1a1a98		a4 21 b9 01 00 c9 01 d0 08 c2 20 e6 21 ab 28 7a
>1a1aa8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a1ab8		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a1ac8		48 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>1a1ad8		20 48 a9 00 48 ab 68 28 e2 20 a4 21 c0 ff 7f f0
>1a1ae8		11 20 5a 0c 85 0c b9 01 00 20 5a 0c c5 0c f0 02
>1a1af8		90 08 c2 20 ab 2b 28 68 18 60 c2 20 ab 2b 28 68
>1a1b08		38 60 4c d8 08 08 e2 20 a9 00 8f 00 4d 00 a2 01
>1a1b18		00 20 0c 1d 20 51 06 c2 20 a5 23 9f 00 4d 00 e2
>1a1b28		20 af 00 4d 00 1a 30 3e 8f 00 4d 00 e8 e8 20 3e
>1a1b38		21 e2 20 a7 00 c9 90 f0 09 c9 2c d0 0a 20 1d 21
>1a1b48		80 cf 20 1d 21 28 60 08 c2 20 48 a9 00 08 5b 68
>1a1b58		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a1b68		1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>1a1b78		e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a1b88		e2 20 dc d4 08 08 20 20 54 90 47 e2 20 a5 ea 29
>1a1b98		80 d0 06 20 21 52 4c d8 1b 20 93 51 90 53 c2 20
>1a1ba8		a5 c2 48 a5 c0 48 a0 09 00 b7 08 85 c0 e2 20 c8
>1a1bb8		c8 b7 08 85 c2 e2 20 a9 8f 20 2a 22 20 7f 1a 20
>1a1bc8		0d 1b 20 f7 68 20 89 1a c2 20 68 85 c2 68 85 c0
>1a1bd8		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a1be8		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>1a1bf8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f
>1a1c08		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a1c18		08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10
>1a1c28		20 1d 21 a0 00 00 b7 00 f0 24 c9 22 f0 03 c8 80
>1a1c38		f5 84 0c e2 20 a9 02 a6 0c e8 20 01 15 a0 00 00
>1a1c48		c4 0c f0 29 a7 00 97 16 c8 20 1d 21 80 f2 08 c2
>1a1c58		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a1c68		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 a9 00 97
>1a1c78		16 c2 20 a5 16 85 23 a5 18 85 25 a9 02 00 85 27
>1a1c88		20 1d 21 2b 28 60 08 e2 20 a7 00 c2 20 29 ff 00
>1a1c98		20 84 0c 85 2f 20 7f 1a 08 e2 20 48 a9 00 48 ab
>1a1ca8		68 28 20 b2 1c 20 89 1a 28 60 20 1d 21 6c 2f 08
>1a1cb8		48 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>1a1cc8		20 51 1a 89 80 00 f0 37 48 20 84 0c 85 2f 68 20
>1a1cd8		d1 0c c9 01 00 f0 08 c2 30 a2 29 08 20 e9 19 c2
>1a1ce8		30 a2 23 08 20 e9 19 08 e2 20 48 a9 00 48 ab 68
>1a1cf8		28 20 09 1d a2 23 08 20 ab 19 ab 2b 28 68 60 00
>1a1d08		ea 6c 2f 08 08 08 c2 20 48 a9 00 08 5b 68 28 08
>1a1d18		e2 20 48 a9 00 48 ab 68 28 c2 10 da e2 20 a7 00
>1a1d28		d0 03 4c cf 1d 30 33 c9 20 d0 03 4c c9 1d c9 3a
>1a1d38		b0 04 c9 30 b0 56 c9 26 f0 52 c9 22 d0 03 4c e2
>1a1d48		1d c9 5b b0 07 c9 41 90 03 4c ee 1d c9 7b b0 07
>1a1d58		c9 61 90 03 4c ee 1d 4c cf 1d c9 8f f0 40 c9 90
>1a1d68		f0 41 20 a7 0c c9 30 d0 0c 20 8e 1c a2 23 08 20
>1a1d78		ab 19 4c 24 1d c9 00 d0 4e a7 00 a6 21 e0 ff 7f
>1a1d88		f0 05 20 c8 1a b0 12 20 28 1a 80 35 c2 20 20 42
>1a1d98		5a a2 23 08 20 ab 19 80 83 20 b8 1c 80 dd 20 28
>1a1da8		1a 80 1e e2 20 a4 21 c0 ff 7f f0 46 a4 21 b9 01
>1a1db8		00 c9 01 f0 3d c9 8f f0 05 20 b8 1c 80 ee 20 51
>1a1dc8		1a 20 1d 21 4c 24 1d a6 21 e0 ff 7f b0 24 bd 01
>1a1dd8		00 c9 01 f0 1d 20 b8 1c 80 ed 20 18 1c a2 23 08
>1a1de8		20 ab 19 4c 24 1d 20 8d 1b a2 23 08 20 ab 19 4c
>1a1df8		24 1d a2 23 08 20 e9 19 fa 28 60 08 0b 8b 08 e2
>1a1e08		20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08 5b
>1a1e18		68 28 c2 30 a9 fd 5f 85 33 ab 2b 28 60 08 0b 08
>1a1e28		c2 20 48 a9 00 08 5b 68 28 c2 30 92 33 c6 33 c6
>1a1e38		33 2b 28 60 08 c2 30 29 ff 00 20 25 1e 28 60 08
>1a1e48		0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 e6 33 e6
>1a1e58		33 b2 33 2b 28 60 8b 0b 08 08 c2 20 48 a9 00 08
>1a1e68		5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 20 85
>1a1e78		23 a9 00 00 85 25 e2 20 a9 00 85 27 85 ea a9 1a
>1a1e88		85 e9 c2 20 a9 b8 1e 85 e7 20 83 53 c2 20 a5 d7
>1a1e98		85 23 a5 d9 85 25 e2 20 a9 00 85 27 85 ea a9 1a
>1a1ea8		85 e9 c2 20 a9 bc 1e 85 e7 20 83 53 28 2b ab 60
>1a1eb8		45 52 52 00 45 52 4c 00 e2 20 c2 10 20 d7 03 af
>1a1ec8		d3 08 00 0a c2 20 29 ff 00 a8 08 e2 20 48 a9 1a
>1a1ed8		48 ab 68 28 be 12 1f 20 64 04 c2 20 a5 d7 f0 27
>1a1ee8		a2 42 1f 20 64 04 08 e2 20 48 a9 00 48 ab 68 28
>1a1ef8		c2 20 af d7 08 00 8f 23 08 00 a9 00 00 8f 25 08
>1a1f08		00 20 1e 46 20 d7 03 4c c0 27 46 1f 49 1f 4f 1f
>1a1f18		5c 1f 6a 1f 78 1f 8b 1f a1 1f b1 1f c0 1f cd 1f
>1a1f28		de 1f ed 1f fa 1f 08 20 17 20 28 20 41 20 55 20
>1a1f38		69 20 7f 20 93 20 ae 20 c6 20 20 61 74 00 4f 4b
>1a1f48		00 42 72 65 61 6b 00 53 79 6e 74 61 78 20 65 72
>1a1f58		72 6f 72 00 4f 75 74 20 6f 66 20 6d 65 6d 6f 72
>1a1f68		79 00 54 79 70 65 20 6d 69 73 6d 61 74 63 68 00
>1a1f78		56 61 72 69 61 62 6c 65 20 6e 6f 74 20 66 6f 75
>1a1f88		6e 64 00 4c 69 6e 65 20 6e 75 6d 62 65 72 20 6e
>1a1f98		6f 74 20 66 6f 75 6e 64 00 53 74 61 63 6b 20 75
>1a1fa8		6e 64 65 72 66 6c 6f 77 00 53 74 61 63 6b 20 6f
>1a1fb8		76 65 72 66 6c 6f 77 00 4f 75 74 20 6f 66 20 72
>1a1fc8		61 6e 67 65 00 49 6c 6c 65 67 61 6c 20 61 72 67
>1a1fd8		75 6d 65 6e 74 00 46 69 6c 65 20 6e 6f 74 20 66
>1a1fe8		6f 75 6e 64 00 4e 6f 74 20 61 20 6e 75 6d 62 65
>1a1ff8		72 00 4d 61 74 68 20 6f 76 65 72 66 6c 6f 77 00
>1a2008		4d 61 74 68 20 75 6e 64 65 72 66 6c 6f 77 00 44
>1a2018		69 76 69 73 69 6f 6e 20 62 79 20 7a 65 72 6f 00
>1a2028		55 6e 61 62 6c 65 20 74 6f 20 72 65 61 64 20 64
>1a2038		69 72 65 63 74 6f 72 79 00 55 6e 61 62 6c 65 20
>1a2048		74 6f 20 6c 6f 61 64 20 66 69 6c 65 00 55 6e 61
>1a2058		62 6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c 65
>1a2068		00 55 6e 61 62 6c 65 20 74 6f 20 64 65 6c 65 74
>1a2078		65 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74
>1a2088		20 66 69 6e 64 20 66 69 6c 65 00 43 6f 75 6c 64
>1a2098		20 6e 6f 74 20 75 70 64 61 74 65 20 64 69 72 65
>1a20a8		63 74 6f 72 79 00 43 6f 75 6c 64 20 6e 6f 74 20
>1a20b8		63 6f 70 79 20 74 68 65 20 66 69 6c 65 00 41 72
>1a20c8		67 75 6d 65 6e 74 20 6f 75 74 73 69 64 65 20 64
>1a20d8		6f 6d 61 69 6e 00 08 0b 08 c2 20 48 a9 00 08 5b
>1a20e8		68 28 e2 20 a9 00 85 d2 2b 28 60 0b 08 08 c2 20
>1a20f8		48 a9 00 08 5b 68 28 08 c2 20 a9 c0 1e 8f d4 08
>1a2108		00 e2 20 a9 1a 8f d6 08 00 28 20 c5 44 20 06 40
>1a2118		64 31 28 2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>1a2128		28 c2 20 18 a5 00 69 01 00 85 00 e2 20 a5 02 69
>1a2138		00 85 02 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>1a2148		68 28 e2 20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02
>1a2158		80 05 20 1d 21 80 ed 2b 28 60 08 e2 20 a7 00 f0
>1a2168		09 c9 3a f0 05 20 1d 21 80 f3 28 60 08 e2 20 64
>1a2178		36 a7 00 f0 19 c5 37 f0 2c c9 9b f0 1e c9 9f f0
>1a2188		1a c9 9e f0 1a c9 a0 f0 16 20 1d 21 80 e3 20 fa
>1a2198		21 c2 20 a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea c6
>1a21a8		36 30 30 80 e4 a5 35 30 06 a5 36 f0 02 80 da 20
>1a21b8		1d 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a21c8		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>1a21d8		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a21e8		02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a21f8		d4 08 08 c2 30 a0 00 00 b7 1a 85 0c 18 a5 1a 65
>1a2208		0c 85 1a a5 1c 69 00 00 85 1c a0 02 00 b7 1a 85
>1a2218		d7 18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02
>1a2228		28 60 08 e2 20 48 20 3e 21 68 e2 20 c7 00 d0 08
>1a2238		20 1d 21 20 3e 21 28 60 08 c2 20 48 a9 00 08 5b
>1a2248		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>1a2258		5e 1e e2 20 dc d4 08 08 e2 20 20 3e 21 e2 20 a7
>1a2268		00 f0 10 c9 3a f0 0c c5 37 f0 05 20 1d 21 80 ef
>1a2278		28 38 60 28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0
>1a2288		0d c9 3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a
>1a2298		60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20 f8
>1a22a8		14 20 8b 19 e2 20 a9 00 85 dc 22 3c 11 00 b0 4b
>1a22b8		a7 00 c9 3a d0 03 20 1d 21 20 3e 21 a7 00 d0 03
>1a22c8		4c 4d 23 20 e2 04 b0 52 a7 00 10 10 20 a7 0c 85
>1a22d8		0c c9 20 d0 03 4c 3b 23 a5 d2 f0 51 08 c2 20 48
>1a22e8		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>1a22f8		29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9
>1a2308		00 08 5b 68 28 e2 20 a9 01 8f d3 08 00 c2 20 29
>1a2318		ff 00 20 5e 1e e2 20 dc d4 08 20 cf 44 4c 4d 23
>1a2328		08 e2 20 48 a9 00 48 ab 68 28 6c 2f 08 a5 0c c9
>1a2338		10 d0 a9 a7 00 20 84 0c c2 20 85 2f 20 8b 19 20
>1a2348		1d 21 20 28 23 ab 2b 28 60 08 58 20 de 20 20 03
>1a2358		1e e2 20 9c 8a 0f c2 20 a5 1a 85 00 a5 1c 85 02
>1a2368		4c 8f 23 08 c2 20 a0 02 00 b7 1a 85 d7 e2 20 a5
>1a2378		dc c9 03 f0 12 c2 20 18 a5 1a 69 04 00 85 00 e2
>1a2388		20 a5 1c 69 00 85 02 c2 20 20 99 22 e2 20 a5 dc
>1a2398		c9 03 f0 f3 c9 00 d0 31 e2 20 20 3e 21 a7 00 f0
>1a23a8		28 c9 3a f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a23b8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>1a23c8		20 dc d4 08 20 1d 21 80 be 28 60 08 58 e2 20 a9
>1a23d8		80 85 d2 9c 8a 0f 20 03 1e c2 30 64 31 a0 02 00
>1a23e8		b7 1a f0 29 20 6b 23 e2 20 a5 dc c9 01 f0 1e c9
>1a23f8		02 f0 ea c9 03 f0 e6 c2 20 a0 00 00 18 a5 1a 77
>1a2408		1a 85 1a e2 20 a5 1c 69 00 85 1c 80 d0 e2 20 a9
>1a2418		00 85 d2 28 60 08 c2 30 c2 20 a9 00 00 85 08 a9
>1a2428		16 00 85 0a c2 20 a0 02 00 b7 08 f0 31 c5 23 f0
>1a2438		1e b0 2b c2 20 a0 00 00 18 a5 08 77 08 85 0c e2
>1a2448		20 a5 0a 69 00 85 0a c2 20 a5 0c 85 08 80 d7 c2
>1a2458		20 a5 08 85 1a e2 20 a5 0a 85 1c 28 38 60 28 18
>1a2468		60 08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 08
>1a2478		e2 20 a5 0e c5 02 f0 26 c2 20 18 a5 0c 69 01 00
>1a2488		85 0c e2 20 a5 0e 69 00 85 0e c2 20 18 a5 08 69
>1a2498		01 00 85 08 e2 20 a5 0a 69 00 85 0a 80 c4 28 60
>1a24a8		08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 06 a5
>1a24b8		0e c5 02 f0 26 c2 20 38 a5 0c e9 01 00 85 0c e2
>1a24c8		20 a5 0e e9 00 85 0e c2 20 38 a5 08 e9 01 00 85
>1a24d8		08 e2 20 a5 0a e9 00 85 0a 80 c6 28 60 08 a0 00
>1a24e8		00 c2 20 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00
>1a24f8		85 0e c2 20 18 a5 d9 69 04 00 85 00 e2 20 a5 db
>1a2508		69 00 85 02 a0 00 00 c2 20 38 a5 d9 f7 08 85 d9
>1a2518		e2 20 a5 db e9 00 85 db 20 69 24 20 c5 44 28 60
>1a2528		08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a0 02 00
>1a2538		97 d9 18 a5 d9 69 04 00 85 08 e2 20 a5 db 69 00
>1a2548		85 0a e2 20 a0 00 00 b7 1a 97 08 f0 03 c8 80 f7
>1a2558		c2 20 98 18 69 05 00 85 0c c2 20 a0 00 00 a5 0c
>1a2568		97 d9 c2 20 18 a5 d9 65 0c 85 0c e2 20 a5 db 69
>1a2578		00 85 db c2 20 a5 0c 85 d9 c2 20 a0 00 00 a9 00
>1a2588		00 97 d9 c8 c0 05 00 d0 f8 20 c5 44 28 60 0b 08
>1a2598		08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 00 00 85
>1a25a8		08 a9 16 00 85 0a a0 02 00 b7 08 f0 1d c5 d7 f0
>1a25b8		25 b0 1d a0 00 00 18 a5 08 77 08 85 0c a5 0a 69
>1a25c8		00 00 85 0a a5 0c 85 08 80 dc a9 00 00 28 2b 60
>1a25d8		a9 01 00 28 2b 60 a9 02 00 28 2b 60 08 c2 30 a9
>1a25e8		05 00 85 10 a0 00 00 e2 20 b7 1a f0 07 c2 20 e6
>1a25f8		10 c8 80 f3 c2 20 a5 08 85 00 a5 0a 85 02 18 a5
>1a2608		d9 69 04 00 85 0c a5 db 69 00 00 85 0e 18 a5 d9
>1a2618		65 10 85 d9 a5 db 69 00 00 85 db 18 a5 d9 69 04
>1a2628		00 85 08 a5 db 69 00 00 85 0a 20 a8 24 c2 20 a5
>1a2638		10 a0 00 00 97 00 a5 d7 a0 02 00 97 00 18 a5 00
>1a2648		69 04 00 85 00 a5 02 69 00 00 85 02 a0 00 00 e2
>1a2658		20 b7 1a 97 00 f0 03 c8 80 f7 20 c5 44 28 60 08
>1a2668		c2 30 85 d7 20 96 25 c9 00 00 f0 2c c9 01 00 f0
>1a2678		22 c2 20 a5 08 48 a5 0a 48 20 e5 24 68 85 0a 68
>1a2688		85 08 a5 1a 85 00 a5 1c 85 02 20 3e 21 e2 20 a7
>1a2698		00 f0 0a 20 e4 25 80 05 a5 d7 20 28 25 28 60 0b
>1a26a8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a2
>1a26b8		00 00 bd 00 4f f0 03 e8 80 f8 86 0c c2 30 8a c9
>1a26c8		02 00 90 12 3a 18 69 00 4f aa 18 65 8f a8 a5 0c
>1a26d8		3a 8b 44 00 00 ab c2 20 a6 55 a0 00 4f a5 8f 8b
>1a26e8		54 00 1a ab e2 20 a5 0c c9 02 90 18 a6 8f a9 22
>1a26f8		9d 00 4f e8 bd 00 4f d0 fa a9 22 9d 00 4f a9 00
>1a2708		e8 9d 00 4f 28 2b 60 da 5a 8b 0b 08 08 c2 20 48
>1a2718		a9 00 08 5b 68 28 e2 20 c2 10 ad 00 4f c9 23 f0
>1a2728		0a c9 7c f0 17 28 2b ab 7a fa 60 c2 20 a9 03 00
>1a2738		85 8f a9 55 27 85 55 20 a7 26 80 e9 c2 20 a9 04
>1a2748		00 85 8f a9 59 27 85 55 20 a7 26 80 d8 44 49 52
>1a2758		00 42 52 55 4e 00 8b 08 20 3d 02 08 e2 20 48 a9
>1a2768		1a 48 ab 68 28 a2 6f d2 20 64 04 28 ab 60 08 e2
>1a2778		30 a9 01 20 1c 00 20 db 00 c9 00 f0 f9 c9 0d f0
>1a2788		02 80 f3 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68
>1a2798		28 c2 30 64 d7 a9 00 4f 85 1a a9 00 00 85 1c 20
>1a27a8		9c 09 c2 20 a5 d7 d0 05 20 51 23 80 07 20 67 26
>1a27b8		28 2b 38 60 28 2b 18 60 c2 30 a2 ff fe 9a 20 5e
>1a27c8		27 20 08 00 20 0c 00 22 3c 11 00 a9 00 00 20 1c
>1a27d8		00 20 0f 27 20 8d 27 b0 e8 80 e3 08 e2 20 20 a3
>1a27e8		08 c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20
>1a27f8		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a2808		20 29 ff 00 20 5e 1e e2 20 dc d4 08 20 51 16 80
>1a2818		08 20 72 54 80 03 20 e1 56 28 60 08 e2 20 20 55
>1a2828		08 c9 00 f0 23 c9 01 f0 24 08 c2 20 48 a9 00 08
>1a2838		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a2848		20 5e 1e e2 20 dc d4 08 20 84 54 80 03 20 d6 56
>1a2858		28 60 08 e2 20 20 55 08 c9 00 f0 23 c9 01 f0 24
>1a2868		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a2878		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 20
>1a2888		96 54 80 03 20 77 57 28 60 20 bf 07 20 f0 07 20
>1a2898		2c 57 60 a5 23 8f 1a 01 00 a5 29 8f 18 01 00 af
>1a28a8		1e 01 00 85 23 60 08 c2 30 48 20 bf 07 a5 2d c9
>1a28b8		00 00 d0 0d a5 2b d0 09 da a6 29 20 4a 64 fa 80
>1a28c8		1c 20 f0 07 c2 20 a5 2b 48 a5 29 48 20 d5 62 c2
>1a28d8		20 68 85 29 68 85 2b 20 77 57 20 b4 64 68 28 60
>1a28e8		08 20 51 06 20 82 06 c2 20 a5 23 25 29 85 23 a5
>1a28f8		25 25 2b 85 25 28 60 08 20 51 06 20 82 06 c2 20
>1a2908		a5 23 05 29 85 23 a5 25 05 2b 85 25 28 60 08 20
>1a2918		51 06 c2 20 a5 23 49 ff ff 85 23 a5 25 49 ff ff
>1a2928		85 25 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>1a2938		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a2948		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a2958		e2 20 dc d4 08 20 d9 17 80 08 20 97 55 80 03 20
>1a2968		0c 5d 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>1a2978		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a2988		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a2998		e2 20 dc d4 08 20 f0 17 80 08 20 b8 55 80 03 20
>1a29a8		21 5d 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>1a29b8		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a29c8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a29d8		e2 20 dc d4 08 20 07 18 80 08 20 e5 55 80 03 20
>1a29e8		36 5d 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>1a29f8		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a2a08		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a2a18		e2 20 dc d4 08 20 1e 18 80 08 20 03 56 80 03 20
>1a2a28		75 5d 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>1a2a38		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a2a48		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a2a58		e2 20 dc d4 08 20 35 18 80 08 20 21 56 80 03 20
>1a2a68		60 5d 28 60 08 e2 20 20 a3 08 c9 00 f0 2c c9 01
>1a2a78		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a2a88		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a2a98		e2 20 dc d4 08 20 4c 18 80 08 20 4e 56 80 03 20
>1a2aa8		4b 5d 28 60 08 e2 20 a5 27 c9 00 f0 2d c9 01 f0
>1a2ab8		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>1a2ac8		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a2ad8		e2 20 a5 26 49 80 85 26 80 16 c2 20 a5 23 49 ff
>1a2ae8		ff 85 23 a5 25 49 ff ff 85 25 e6 23 d0 02 e6 25
>1a2af8		28 60 08 e2 20 20 0c 1d 20 63 07 20 ae 05 a5 23
>1a2b08		0a 0a 0a 0a 05 29 48 a9 2c 20 2a 22 20 0c 1d 20
>1a2b18		63 07 20 ae 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c
>1a2b28		20 2a 22 20 0c 1d 20 63 07 20 ae 05 a5 23 0a 0a
>1a2b38		0a 0a 05 29 48 af 0e 08 af 09 0c 8f 0e 08 af 68
>1a2b48		8f 00 08 af 68 8f 02 08 af 68 8f 04 08 af af 0e
>1a2b58		08 af 29 f7 8f 0e 08 af 20 62 21 28 60 08 e2 20
>1a2b68		20 0c 1d 20 63 07 20 ae 05 a5 23 0a 0a 0a 0a 05
>1a2b78		29 48 a9 2c 20 2a 22 20 0c 1d 20 63 07 20 ae 05
>1a2b88		a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 2a 22 20 0c
>1a2b98		1d 20 51 06 20 e4 05 c2 20 a5 23 85 92 a5 29 85
>1a2ba8		23 20 ae 05 e2 20 a5 23 0a 0a 0a 0a 05 29 48 c2
>1a2bb8		20 a5 92 85 23 20 ae 05 e2 20 a5 23 0a 0a 0a 0a
>1a2bc8		05 29 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 0f
>1a2bd8		08 af 68 8f 0a 08 af 68 8f 09 08 af 68 8f 06 08
>1a2be8		af af 0e 08 af 29 f7 8f 0e 08 af 20 62 21 28 60
>1a2bf8		08 e2 20 48 20 0c 1d 20 63 07 e2 20 a5 23 29 0f
>1a2c08		0a 0a 0a 0a 83 01 a9 2c 20 2a 22 20 0c 1d 20 63
>1a2c18		07 a5 23 29 0f 03 01 8f 1e 00 00 e2 20 68 28 60
>1a2c28		08 c2 20 f4 00 00 e2 20 20 0c 1d 20 63 07 a5 23
>1a2c38		83 01 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5 23 83
>1a2c48		02 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5 23 8f 0d
>1a2c58		00 af a3 02 8f 0e 00 af a3 01 8f 0f 00 af c2 20
>1a2c68		68 28 60 08 c2 20 f4 00 00 e2 20 20 0c 1d 20 51
>1a2c78		06 a5 23 f0 16 a9 01 8f 04 00 af a9 20 8f 08 00
>1a2c88		af 8f 09 00 af 22 2c 11 00 80 0a a9 00 8f 04 00
>1a2c98		af 22 2c 11 00 a9 2c 85 37 20 5f 22 90 39 20 1d
>1a2ca8		21 20 0c 1d 20 63 07 a5 23 83 01 a9 2c 20 2a 22
>1a2cb8		20 0c 1d 20 63 07 a5 23 83 02 a9 2c 20 2a 22 20
>1a2cc8		0c 1d 20 63 07 a5 23 8f 05 00 af a3 02 8f 06 00
>1a2cd8		af a3 01 8f 07 00 af c2 20 68 28 60 08 c2 20 3b
>1a2ce8		38 e9 05 00 1b e2 20 20 0c 1d 20 63 07 a5 23 c9
>1a2cf8		0a 90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2d08		0a 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a2d18		d4 08 83 01 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5
>1a2d28		23 83 02 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5 23
>1a2d38		83 03 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5 23 83
>1a2d48		04 a9 2c 20 2a 22 20 0c 1d 20 63 07 a5 23 83 05
>1a2d58		a9 af 85 a0 a3 01 0a c2 20 29 ff 00 aa bf 9c 2d
>1a2d68		1a 85 9e e2 20 a3 02 c2 20 29 ff 00 0a 0a 18 65
>1a2d78		9e 85 9e e2 20 a0 02 00 a3 03 97 9e a0 01 00 a3
>1a2d88		04 97 9e a0 00 00 a3 05 97 9e c2 20 3b 18 69 05
>1a2d98		00 1b 28 60 00 20 00 24 00 28 00 2c 00 30 00 34
>1a2da8		00 38 00 3c 40 1f 80 1f da 5a 08 20 0c 1d 20 51
>1a2db8		06 c2 20 a5 23 89 00 01 d0 17 af 00 00 af 89 00
>1a2dc8		01 f0 0e e2 20 a9 00 8f 01 00 af a9 01 8f 01 00
>1a2dd8		af c2 20 a5 23 8f 00 00 af e2 20 a5 24 c2 20 29
>1a2de8		03 00 0a aa c2 20 bf 37 2e 1a 8f 10 f0 1a bf 3f
>1a2df8		2e 1a 8f 12 f0 1a af 10 f0 1a 8f 08 01 00 af 12
>1a2e08		f0 1a 8f 0a 01 00 af 0c 01 00 8f 14 f0 1a e2 20
>1a2e18		af 0e 01 00 8f 16 f0 1a 22 2c 11 00 c2 20 af 1a
>1a2e28		00 00 aa af 1c 00 00 a8 20 20 00 28 7a fa 60 80
>1a2e38		02 20 03 40 01 90 01 e0 01 58 02 f0 00 2c 01 50
>1a2e48		00 64 00 28 00 32 00 3c 00 4b 00 1e 00 32 00 48
>1a2e58		00 5c 00 20 00 2a 00 34 00 43 00 16 00 34 00 da
>1a2e68		08 c2 30 c9 02 00 b0 1c 0a 0a aa bf 00 f0 1a 85
>1a2e78		9e bf 02 f0 1a 85 a0 c9 f0 00 b0 08 c9 b0 00 90
>1a2e88		03 28 fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a2e98		a9 09 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>1a2ea8		dc d4 08 da 08 c2 30 c9 02 00 b0 17 0a 0a aa bf
>1a2eb8		08 f0 1a 85 9e bf 0a f0 1a 85 a0 c9 40 00 b0 03
>1a2ec8		28 fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2ed8		09 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a2ee8		d4 08 08 c2 30 3b 38 e9 07 00 1b 20 0c 1d 20 63
>1a2ef8		07 c2 20 a5 23 c9 02 00 b0 59 83 01 e2 20 a9 2c
>1a2f08		20 2a 22 20 0c 1d 20 63 07 a5 23 83 03 a9 2c 20
>1a2f18		2a 22 20 0c 1d 20 63 07 a3 01 0a 0a 0a aa a3 03
>1a2f28		d0 05 a5 23 0a 80 04 a5 23 38 2a 9f 00 01 af c2
>1a2f38		20 a9 2c 00 85 37 20 5f 22 b0 37 c2 20 08 c2 20
>1a2f48		a9 00 00 85 23 a9 b0 00 85 25 e2 20 a9 00 85 27
>1a2f58		28 80 27 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2f68		09 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a2f78		d4 08 c2 20 20 1d 21 20 0c 1d c2 20 a3 01 0a 0a
>1a2f88		aa a5 23 9f 00 f0 1a 9f 08 f0 1a 83 04 a5 25 9f
>1a2f98		02 f0 1a 38 e9 b0 00 9f 0a f0 1a 83 06 a3 01 0a
>1a2fa8		0a 0a aa e2 20 a3 04 9f 01 01 af a3 05 9f 02 01
>1a2fb8		af a3 06 9f 03 01 af a9 00 9f 04 01 af 9f 05 01
>1a2fc8		af c2 30 3b 18 69 07 00 1b 28 60 08 c2 20 48 a9
>1a2fd8		00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29
>1a2fe8		ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20 20 0c 1d
>1a2ff8		20 63 07 a5 23 20 ab 2e c2 20 a5 9e 8f 05 04 af
>1a3008		af 14 f0 1a 8f 08 04 af e2 20 a5 a0 8f 07 04 af
>1a3018		af 16 f0 1a 8f 0a 04 af a9 00 8f 01 04 af a9 85
>1a3028		8f 00 04 af af 01 04 af 30 fa a9 00 8f 00 04 af
>1a3038		28 60 08 c2 20 a5 59 cf 10 f0 1a 90 1f 08 c2 20
>1a3048		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>1a3058		20 29 ff 00 20 5e 1e e2 20 dc d4 08 c2 30 a5 5d
>1a3068		cf 12 f0 1a b0 d7 8f 08 01 00 af 10 f0 1a 8f 0a
>1a3078		01 00 18 af 0c 01 00 65 59 85 0c af 0e 01 00 69
>1a3088		00 00 85 0e 18 a5 0c 65 9e 85 0c a5 0e 65 a0 85
>1a3098		0e e2 20 a5 55 87 0c 28 60 c2 20 a9 01 00 85 dd
>1a30a8		38 a5 61 e5 59 85 69 10 0b 49 ff ff 1a 85 69 a9
>1a30b8		ff ff 85 dd a9 01 00 85 df 38 a5 65 e5 5d 85 6d
>1a30c8		10 0b 49 ff ff 1a 85 6d a9 ff ff 85 df a5 6d c9
>1a30d8		01 00 d0 19 a5 69 c9 01 00 d0 10 20 3a 30 a5 61
>1a30e8		85 59 a5 65 85 5d 20 3a 30 80 5b a5 6d c5 69 b0
>1a30f8		04 a5 69 80 06 a5 6d 49 ff ff 1a 48 0a 68 6a 85
>1a3108		71 20 3a 30 a5 59 c5 61 d0 06 a5 5d c5 65 f0 36
>1a3118		a5 71 85 75 a5 69 49 ff ff 1a c5 75 10 10 f0 0e
>1a3128		38 a5 71 e5 6d 85 71 18 a5 59 65 dd 85 59 a5 75
>1a3138		c5 6d 10 cd f0 cb 18 a5 71 65 69 85 71 18 a5 5d
>1a3148		65 df 85 5d 80 bb 60 08 c2 20 3b 38 e9 06 00 1b
>1a3158		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>1a3168		48 ab 68 28 c2 30 20 0c 1d 20 63 07 83 01 a9 2c
>1a3178		00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 03 a9 2c
>1a3188		00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 05 a9 2c
>1a3198		00 20 2a 22 20 0c 1d 20 63 07 a5 23 85 55 a3 03
>1a31a8		85 59 a3 05 85 5d a3 01 20 67 2e 20 3a 30 c2 20
>1a31b8		3b 18 69 06 00 1b 28 60 08 c2 20 3b 38 e9 0a 00
>1a31c8		1b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>1a31d8		00 48 ab 68 28 c2 30 20 0c 1d 20 63 07 83 01 a9
>1a31e8		2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 03 a9
>1a31f8		2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 05 a9
>1a3208		2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 07 a9
>1a3218		2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 09 a9
>1a3228		2c 00 20 2a 22 20 0c 1d 20 63 07 a5 23 85 55 a3
>1a3238		03 85 59 a3 05 85 5d a3 07 85 61 a3 09 85 65 a3
>1a3248		01 20 67 2e 20 a1 30 c2 20 3b 18 69 0a 00 1b 28
>1a3258		60 08 c2 20 3b 38 e9 0c 00 1b 08 c2 20 48 a9 00
>1a3268		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>1a3278		20 0c 1d 20 63 07 83 01 a9 2c 00 20 2a 22 20 0c
>1a3288		1d 20 51 06 a5 23 83 03 a9 2c 00 20 2a 22 20 0c
>1a3298		1d 20 51 06 a5 23 83 05 a9 2c 00 20 2a 22 20 0c
>1a32a8		1d 20 51 06 a5 23 83 07 a9 2c 00 20 2a 22 20 0c
>1a32b8		1d 20 51 06 a5 23 83 09 a9 2c 00 20 2a 22 20 0c
>1a32c8		1d 20 63 07 a5 23 83 0b a3 01 20 ab 2e a9 07 00
>1a32d8		8f 00 04 af c2 20 a3 05 8f 00 01 00 af 10 f0 1a
>1a32e8		8f 02 01 00 18 af 04 01 00 63 03 85 0c e2 20 af
>1a32f8		06 01 00 69 00 85 0e c2 20 18 a5 9e 65 0c 8f 05
>1a3308		04 af e2 20 a5 a0 65 0e 8f 07 04 af c2 20 38 a3
>1a3318		07 e3 03 85 0c 8f 08 04 af 38 af 10 f0 1a 8f 0e
>1a3328		04 af 38 a3 09 e3 05 8f 0a 04 af e2 20 a3 0b 8f
>1a3338		01 04 af af 00 04 af 09 80 8f 00 04 af af 01 04
>1a3348		af 30 fa a9 00 8f 00 04 af c2 20 3b 18 69 0c 00
>1a3358		1b 28 60 08 c2 20 c9 40 00 b0 13 0a 0a 0a 18 69
>1a3368		00 0c 85 9e a9 af 00 69 00 00 85 a0 28 60 08 c2
>1a3378		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a3388		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20
>1a3398		3b 38 e9 03 00 1b c2 30 20 0c 1d 20 63 07 a5 23
>1a33a8		83 01 a9 2c 00 20 2a 22 e2 20 20 0c 1d 20 63 07
>1a33b8		a5 23 c9 08 b0 56 83 03 a9 2c 20 2a 22 20 0c 1d
>1a33c8		20 51 06 c2 20 38 a5 23 e9 00 00 85 23 a5 25 e9
>1a33d8		b0 00 85 25 30 36 c2 20 a3 01 aa 20 5b 33 a5 23
>1a33e8		a0 01 00 97 9e e2 20 a5 25 c8 c8 97 9e bf 18 f0
>1a33f8		1a 29 f1 85 0c a3 03 0a 29 0e 05 0c 87 9e 9f 18
>1a3408		f0 1a c2 20 3b 18 69 03 00 1b 28 60 08 c2 20 48
>1a3418		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>1a3428		29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20 3b 38
>1a3438		e9 04 00 1b c2 30 20 0c 1d 20 63 07 a5 23 83 01
>1a3448		a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23 83 03
>1a3458		a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a3 01 20 5b
>1a3468		33 a3 03 a0 04 00 97 9e a5 23 a0 06 00 97 9e c2
>1a3478		20 3b 18 69 04 00 1b 28 60 08 c2 20 3b 38 e9 03
>1a3488		00 1b c2 30 20 0c 1d 20 63 07 a5 23 83 01 a9 2c
>1a3498		00 20 2a 22 e2 20 20 0c 1d 20 51 06 a5 23 d0 04
>1a34a8		83 03 80 04 a9 01 83 03 a9 2c 85 37 20 5f 22 b0
>1a34b8		20 c2 30 a3 01 aa 20 5b 33 e2 20 bf 18 f0 1a 29
>1a34c8		fe 85 0c a3 03 29 01 05 0c 9f 18 f0 1a 87 9e 80
>1a34d8		36 c2 30 20 1d 21 20 0c 1d 20 63 07 a5 23 c9 08
>1a34e8		00 b0 2e 0a 0a 0a 0a 85 0c a3 01 aa 20 5b 33 e2
>1a34f8		20 a3 03 29 01 05 0c 85 0c bf 18 f0 1a 29 8e 05
>1a3508		0c 87 9e 9f 18 f0 1a c2 20 3b 18 69 03 00 1b 28
>1a3518		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a3528		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a3538		08 c2 20 c9 04 00 b0 19 8d 00 01 a9 04 00 8d 02
>1a3548		01 18 ad 04 01 69 80 02 85 9e a9 af 00 85 a0 28
>1a3558		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a3568		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a3578		08 c2 20 c9 04 00 b0 19 8d 00 01 a9 0c 00 8d 02
>1a3588		01 18 ad 04 01 69 00 02 85 9e a9 af 00 85 a0 28
>1a3598		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a35a8		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a35b8		08 c2 20 3b 38 e9 06 00 1b c2 20 20 0c 1d 20 63
>1a35c8		07 a5 23 83 01 a9 2c 00 20 2a 22 20 0c 1d 20 63
>1a35d8		07 a5 23 83 03 a9 2c 00 20 2a 22 20 0c 1d 20 63
>1a35e8		07 a5 23 83 05 a9 2c 00 20 2a 22 20 0c 1d 20 51
>1a35f8		06 a3 01 20 38 35 a5 23 87 9e e2 20 38 a5 25 e9
>1a3608		b0 a0 02 00 97 9e a3 05 d0 0d e2 20 a3 03 29 07
>1a3618		a0 03 00 97 9e 80 0d e2 20 a3 03 29 07 09 08 a0
>1a3628		03 00 97 9e c2 20 3b 18 69 06 00 1b 28 60 08 c2
>1a3638		20 3b 38 e9 06 00 1b c2 20 20 0c 1d 20 63 07 a5
>1a3648		23 83 01 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a5
>1a3658		23 83 03 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a5
>1a3668		23 83 05 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a3
>1a3678		01 20 78 35 a5 23 a0 01 00 97 9e e2 20 38 a5 25
>1a3688		e9 b0 c8 c8 97 9e c2 20 a3 03 a0 04 00 97 9e a3
>1a3698		05 a0 06 00 97 9e c2 20 3b 18 69 06 00 1b 28 60
>1a36a8		08 c2 20 f4 00 00 c2 20 20 0c 1d 20 63 07 a5 23
>1a36b8		83 01 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a3 01
>1a36c8		20 78 35 a5 23 d0 06 e2 20 a9 00 80 04 e2 20 a9
>1a36d8		01 e2 20 a0 00 00 97 9e c2 20 68 28 60 08 c2 20
>1a36e8		3b 38 e9 04 00 1b c2 20 20 0c 1d 20 63 07 a5 23
>1a36f8		83 01 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a5 23
>1a3708		83 03 a9 2c 00 20 2a 22 20 0c 1d 20 51 06 a3 01
>1a3718		20 78 35 a5 23 a0 0a 00 97 9e a3 03 a0 08 00 97
>1a3728		9e c2 20 3b 18 69 04 00 1b 28 60 0b 08 08 c2 20
>1a3738		48 a9 00 08 5b 68 28 e2 20 a9 00 8f 58 f0 1a af
>1a3748		5c f0 1a c9 b0 b0 1c 8f 24 04 af af 5b f0 1a 8f
>1a3758		23 04 af af 5a f0 1a 8f 22 04 af a9 10 8f 58 f0
>1a3768		1a 80 17 38 e9 b0 8f 04 04 af af 5b f0 1a 8f 03
>1a3778		04 af af 5a f0 1a 8f 02 04 af af 59 f0 1a d0 3c
>1a3788		af 58 f0 1a f0 1b af 5d f0 1a 8f 28 04 af af 5e
>1a3798		f0 1a 8f 29 04 af af 5f f0 1a 8f 2a 04 af 82 8b
>1a37a8		00 af 5d f0 1a 8f 08 04 af af 5e f0 1a 8f 09 04
>1a37b8		af af 5f f0 1a 8f 0a 04 af 82 70 00 af 58 f0 1a
>1a37c8		09 01 8f 58 f0 1a 89 10 f0 32 af 60 f0 1a 8f 28
>1a37d8		04 af af 61 f0 1a 8f 29 04 af af 62 f0 1a 8f 2a
>1a37e8		04 af af 63 f0 1a 8f 2b 04 af af 64 f0 1a 8f 2c
>1a37f8		04 af af 65 f0 1a 8f 2d 04 af 80 30 af 60 f0 1a
>1a3808		8f 08 04 af af 61 f0 1a 8f 09 04 af af 62 f0 1a
>1a3818		8f 0a 04 af af 63 f0 1a 8f 0b 04 af af 64 f0 1a
>1a3828		8f 0c 04 af af 65 f0 1a 8f 0d 04 af e2 20 af 69
>1a3838		f0 1a c9 b0 b0 20 8f 27 04 af af 68 f0 1a 8f 26
>1a3848		04 af af 67 f0 1a 8f 25 04 af af 58 f0 1a 09 20
>1a3858		8f 58 f0 1a 80 17 38 e9 b0 8f 07 04 af af 68 f0
>1a3868		1a 8f 06 04 af af 67 f0 1a 8f 05 04 af af 66 f0
>1a3878		1a d0 3e af 58 f0 1a 89 20 f0 1b af 6a f0 1a 8f
>1a3888		28 04 af af 6b f0 1a 8f 29 04 af af 6c f0 1a 8f
>1a3898		2a 04 af 82 8b 00 af 6a f0 1a 8f 08 04 af af 6b
>1a38a8		f0 1a 8f 09 04 af af 6c f0 1a 8f 0a 04 af 82 70
>1a38b8		00 af 58 f0 1a 09 02 8f 58 f0 1a 89 20 f0 32 af
>1a38c8		6d f0 1a 8f 28 04 af af 6e f0 1a 8f 29 04 af af
>1a38d8		6f f0 1a 8f 2a 04 af af 70 f0 1a 8f 2b 04 af af
>1a38e8		71 f0 1a 8f 2e 04 af af 72 f0 1a 8f 2f 04 af 80
>1a38f8		30 af 6d f0 1a 8f 08 04 af af 6e f0 1a 8f 09 04
>1a3908		af af 6f f0 1a 8f 0a 04 af af 70 f0 1a 8f 0b 04
>1a3918		af af 71 f0 1a 8f 0e 04 af af 72 f0 1a 8f 0f 04
>1a3928		af af 58 f0 1a 29 30 f0 43 c9 10 f0 76 c9 20 d0
>1a3938		03 82 8a 00 af 58 f0 1a 29 03 f0 23 c9 03 f0 23
>1a3948		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>1a3958		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 a9
>1a3968		01 80 02 a9 03 8f 20 04 af 82 7d 00 af 58 f0 1a
>1a3978		29 03 f0 23 c9 03 f0 23 08 c2 20 48 a9 00 08 5b
>1a3988		68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20
>1a3998		5e 1e e2 20 dc d4 08 a9 01 80 02 a9 03 8f 00 04
>1a39a8		af 80 34 af 58 f0 1a 29 01 0a 09 11 8f 20 04 af
>1a39b8		af 58 f0 1a 29 02 09 11 8f 00 04 af 80 19 af 58
>1a39c8		f0 1a 29 02 09 21 8f 20 04 af af 58 f0 1a 29 01
>1a39d8		0a 09 21 8f 00 04 af af 00 04 af 09 80 8f 00 04
>1a39e8		af af 58 f0 1a 29 30 f0 0f af 20 04 af 09 80 8f
>1a39f8		20 04 af ea ea ea ea ea af 01 04 af 89 80 d0 f8
>1a3a08		a9 00 8f 20 04 af 8f 00 04 af 28 2b 60 0b 08 e2
>1a3a18		20 c2 10 a9 00 a2 00 00 8f 59 f0 1a e8 e0 1a 00
>1a3a28		d0 f6 20 7e 22 c9 e6 f0 23 c9 e7 f0 5e 08 c2 20
>1a3a38		48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2
>1a3a48		20 29 ff 00 20 5e 1e e2 20 dc d4 08 20 2a 22 20
>1a3a58		0c 1d 20 51 06 c2 20 a5 23 8f 5a f0 1a e2 20 a5
>1a3a68		25 8f 5c f0 1a a9 2c 20 2a 22 20 0c 1d 20 51 06
>1a3a78		c2 20 a5 23 8f 5d f0 1a e2 20 a5 25 8f 5f f0 1a
>1a3a88		e2 20 a9 00 8f 59 f0 1a 82 74 00 20 2a 22 20 0c
>1a3a98		1d 20 51 06 c2 20 a5 23 8f 5a f0 1a e2 20 a5 25
>1a3aa8		8f 5c f0 1a a9 2c 20 2a 22 20 0c 1d 20 0d 07 c2
>1a3ab8		20 a5 23 8f 60 f0 1a 8d 00 01 a9 2c 00 20 2a 22
>1a3ac8		20 0c 1d 20 0d 07 c2 20 a5 23 8f 62 f0 1a 8d 02
>1a3ad8		01 a9 2c 00 20 2a 22 20 0c 1d 20 0d 07 c2 20 a5
>1a3ae8		23 8f 64 f0 1a c2 20 ad 04 01 8f 5d f0 1a e2 20
>1a3af8		ad 06 01 8f 5f f0 1a e2 20 a9 01 8f 59 f0 1a e2
>1a3b08		20 a9 9c 20 2a 22 20 7e 22 c9 e6 f0 23 c9 e7 f0
>1a3b18		5e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a3b28		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a3b38		20 2a 22 20 0c 1d 20 51 06 c2 20 a5 23 8f 67 f0
>1a3b48		1a e2 20 a5 25 8f 69 f0 1a a9 2c 20 2a 22 20 0c
>1a3b58		1d 20 51 06 c2 20 a5 23 8f 6a f0 1a e2 20 a5 25
>1a3b68		8f 6c f0 1a e2 20 a9 00 8f 66 f0 1a 82 74 00 20
>1a3b78		2a 22 20 0c 1d 20 51 06 c2 20 a5 23 8f 67 f0 1a
>1a3b88		e2 20 a5 25 8f 69 f0 1a a9 2c 20 2a 22 20 0c 1d
>1a3b98		20 0d 07 c2 20 a5 23 8f 6d f0 1a 8d 00 01 a9 2c
>1a3ba8		00 20 2a 22 20 0c 1d 20 0d 07 c2 20 a5 23 8f 6f
>1a3bb8		f0 1a 8d 02 01 a9 2c 00 20 2a 22 20 0c 1d 20 0d
>1a3bc8		07 c2 20 a5 23 8f 71 f0 1a c2 20 ad 04 01 8f 6a
>1a3bd8		f0 1a e2 20 ad 06 01 8f 6c f0 1a e2 20 a9 01 8f
>1a3be8		66 f0 1a c2 20 af 5d f0 1a cf 6a f0 1a d0 14 e2
>1a3bf8		20 af 5f f0 1a cf 6c f0 1a d0 08 c2 20 20 33 37
>1a3c08		28 2b 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a3c18		0a 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a3c28		d4 08 08 c2 30 20 0c 1d 20 63 07 a5 23 48 a9 2c
>1a3c38		00 20 2a 22 20 0c 1d 20 63 07 a4 23 fa 20 20 00
>1a3c48		28 60 08 20 3e 21 e2 20 a7 00 d0 03 4c f2 3c c9
>1a3c58		3a d0 03 4c f2 3c c9 22 d0 0b 20 18 1c 20 00 46
>1a3c68		a9 3b 20 2a 22 20 e2 04 90 44 20 20 54 90 3f a9
>1a3c78		3f 20 18 00 a9 20 20 18 00 20 10 00 e2 20 a5 ea
>1a3c88		c9 02 f0 49 c9 00 d0 03 82 84 00 c9 01 f0 5d 08
>1a3c98		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a3ca8		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2
>1a3cb8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a3cc8		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 c2 20 a9
>1a3cd8		00 4c 85 23 a9 00 00 85 25 e2 20 a9 02 85 27 c2
>1a3ce8		20 20 83 53 a9 0d 00 20 18 00 28 60 c2 20 a5 00
>1a3cf8		85 40 a5 02 85 42 a9 00 4c 85 00 a9 00 00 85 02
>1a3d08		20 42 5a c2 20 a5 40 85 00 a5 42 85 02 80 d0 c2
>1a3d18		20 a5 00 85 40 a5 02 85 42 a9 00 4c 85 00 a9 00
>1a3d28		00 85 02 20 d8 08 c2 20 a5 40 85 00 a5 42 85 02
>1a3d38		80 ad 08 20 3e 21 e2 20 a7 00 f0 47 c9 3a f0 43
>1a3d48		20 e2 04 90 40 20 20 54 90 3b 20 01 15 20 14 00
>1a3d58		e2 20 a0 00 00 97 16 a9 00 c8 97 16 c2 20 a5 16
>1a3d68		85 23 a5 18 85 25 e2 20 a9 02 85 27 20 83 53 20
>1a3d78		3e 21 a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20 1d
>1a3d88		21 80 b0 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a3d98		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>1a3da8		20 dc d4 08 08 20 0c 1d 20 51 06 e2 20 a9 5c 85
>1a3db8		a2 c2 20 a5 23 85 a3 e2 20 a5 25 85 a5 e2 20 a9
>1a3dc8		2c 85 37 20 5f 22 90 41 20 1d 21 20 0c 1d 20 0d
>1a3dd8		07 c2 20 a5 23 85 55 e2 20 a9 2c 85 37 20 5f 22
>1a3de8		90 27 20 1d 21 20 0c 1d 20 0d 07 c2 20 a5 23 85
>1a3df8		59 e2 20 a9 2c 85 37 20 5f 22 90 0d 20 1d 21 20
>1a3e08		0c 1d 20 0d 07 c2 20 a4 23 a6 59 a5 55 0b 8b 08
>1a3e18		22 a2 08 00 28 ab 2b 20 62 21 28 60 08 c2 20 48
>1a3e28		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>1a3e38		29 ff 00 20 5e 1e e2 20 dc d4 08 08 e2 20 20 3e
>1a3e48		21 20 20 54 90 64 a9 8f 20 2a 22 a9 01 20 28 1a
>1a3e58		a2 01 00 a9 00 8f 00 4d 00 20 0c 1d 20 51 06 c2
>1a3e68		20 a5 23 9f 00 4d 00 e2 20 af 00 4d 00 1a 8f 00
>1a3e78		4d 00 30 55 e8 e8 20 3e 21 a7 00 c9 2c f0 25 c9
>1a3e88		90 d0 27 20 1d 21 20 9e 66 c2 20 a5 c0 85 23 e2
>1a3e98		20 a5 c2 85 25 64 26 a5 ea 09 80 85 ea 85 27 20
>1a3ea8		83 53 28 60 20 1d 21 4c 61 3e 08 c2 20 48 a9 00
>1a3eb8		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>1a3ec8		00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08
>1a3ed8		5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00
>1a3ee8		20 5e 1e e2 20 dc d4 08 08 20 3e 21 e2 20 a7 00
>1a3ef8		f0 28 c9 3a f0 24 20 e2 04 90 21 20 20 54 90 1c
>1a3f08		20 43 3f 20 83 53 20 3e 21 a7 00 f0 0d c9 3a f0
>1a3f18		09 c9 2c d0 07 20 1d 21 80 cf 28 60 08 c2 20 48
>1a3f28		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>1a3f38		29 ff 00 20 5e 1e e2 20 dc d4 08 08 a5 02 85 42
>1a3f48		a5 00 85 40 a5 1c 85 46 a5 1a 85 44 c2 20 a5 3a
>1a3f58		d0 04 a5 38 f0 4e a5 38 85 00 a5 3a 85 02 a5 3c
>1a3f68		85 1a a5 3e 85 1c e2 20 a7 00 f0 53 c9 3a f0 4f
>1a3f78		c9 2c d0 03 20 1d 21 20 3e 21 a7 00 c9 22 f0 4e
>1a3f88		20 fb 04 b0 4e 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a3f98		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>1a3fa8		20 dc d4 08 c2 20 a9 00 00 85 1a a9 16 00 85 1c
>1a3fb8		18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02 e2
>1a3fc8		20 a9 80 85 35 a9 ab 85 37 20 74 21 80 a9 20 18
>1a3fd8		1c 80 03 20 0a 1b c2 20 a5 00 85 38 a5 02 85 3a
>1a3fe8		a5 1a 85 3c a5 1c 85 3e a5 44 85 1a a5 46 85 1c
>1a3ff8		a5 40 85 00 a5 42 85 02 28 60 20 62 21 60 64 38
>1a4008		64 3a 64 3c 64 3e 60 20 24 00 60 20 0c 1d c2 20
>1a4018		a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0 22 20 1d
>1a4028		21 20 0c 1d c2 20 a5 26 d0 35 68 85 08 68 85 0a
>1a4038		c2 20 a5 23 87 08 e2 20 a0 02 00 a5 25 97 08 60
>1a4048		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>1a4058		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08
>1a4068		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08
>1a4078		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 20 0c
>1a4088		1d c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0
>1a4098		19 20 1d 21 20 0c 1d c2 20 a5 25 d0 2c 68 85 08
>1a40a8		68 85 0a c2 20 a5 23 87 08 60 08 c2 20 48 a9 00
>1a40b8		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>1a40c8		00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08
>1a40d8		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>1a40e8		20 5e 1e e2 20 dc d4 08 20 0c 1d c2 20 a5 25 48
>1a40f8		a5 23 48 e2 20 a7 00 c9 2c d0 1f 20 1d 21 20 0c
>1a4108		1d e2 20 a5 24 d0 32 c2 20 a5 25 d0 2c 68 85 08
>1a4118		68 85 0a e2 20 a5 23 87 08 60 08 c2 20 48 a9 00
>1a4128		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>1a4138		00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08
>1a4148		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>1a4158		20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a4168		68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20
>1a4178		5e 1e e2 20 dc d4 08 08 e2 20 a7 00 f0 05 20 1d
>1a4188		21 80 f7 28 60 08 28 60 08 28 60 08 28 60 08 c2
>1a4198		20 a5 1c 20 25 1e a5 1a 20 25 1e a5 02 48 a5 00
>1a41a8		48 20 62 21 a5 02 20 25 1e a5 00 20 25 1e 68 85
>1a41b8		00 68 85 02 20 3e 21 20 20 54 b0 1f 08 c2 20 48
>1a41c8		a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00 c2 20
>1a41d8		29 ff 00 20 5e 1e e2 20 dc d4 08 e2 20 a5 ea 20
>1a41e8		3c 1e a5 e9 20 3c 1e c2 20 a5 e7 20 25 1e 20 3e
>1a41f8		21 e2 20 a7 00 c9 8a d0 6a a5 ea c9 00 f0 04 c9
>1a4208		01 f0 00 20 1d 21 20 0c 1d 20 83 53 e2 20 a9 9c
>1a4218		20 2a 22 20 0c 1d c2 20 a5 27 20 25 1e a5 25 20
>1a4228		25 1e a5 23 20 25 1e e2 20 a9 9d 85 37 20 5f 22
>1a4238		90 1b 20 1d 21 20 0c 1d e2 20 a5 27 20 25 1e c2
>1a4248		20 a5 25 20 25 1e a5 23 20 25 1e 80 14 c2 20 a9
>1a4258		00 00 20 25 1e a9 00 00 20 25 1e a9 01 00 20 25
>1a4268		1e 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a4278		02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a4288		d4 08 08 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2
>1a4298		20 48 a9 00 08 5b 68 28 c2 30 a4 33 c8 c8 c2 20
>1a42a8		b9 0c 00 85 e7 b9 0e 00 e2 20 85 e9 b9 10 00 85
>1a42b8		ea c2 20 5a 20 21 52 7a c2 20 b9 00 00 85 29 b9
>1a42c8		02 00 85 2b e2 20 b9 04 00 85 2d c2 20 5a 20 e3
>1a42d8		27 20 83 53 7a c2 20 b9 06 00 85 29 b9 08 00 85
>1a42e8		2b e2 20 b9 0a 00 85 2d c2 20 b9 02 00 30 0a 20
>1a42f8		6c 2a 20 1a 06 f0 28 80 08 20 2c 2a 20 1a 06 f0
>1a4308		1e c2 20 b9 12 00 85 00 b9 14 00 85 02 b9 16 00
>1a4318		85 1a b9 18 00 85 1c e2 20 a9 03 85 dc 80 17 a2
>1a4328		23 08 20 e9 19 c2 20 18 a5 33 69 1a 00 85 33 a5
>1a4338		35 69 00 00 85 35 ab 28 60 08 a5 1a 48 a5 1c 48
>1a4348		20 3e 21 20 d8 08 a5 23 f0 26 20 1d 24 90 42 e2
>1a4358		20 a9 02 85 dc 20 62 21 c2 20 68 20 25 1e 68 20
>1a4368		25 1e a5 02 20 25 1e a5 00 20 25 1e e6 31 28 60
>1a4378		68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a4388		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>1a4398		08 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a43a8		06 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a43b8		d4 08 08 c2 30 a5 31 f0 1e 20 47 1e 85 00 20 47
>1a43c8		1e 85 02 20 47 1e 85 1a 20 47 1e 85 1c c6 31 e2
>1a43d8		20 a9 03 85 dc 28 60 08 c2 20 48 a9 00 08 5b 68
>1a43e8		28 e2 20 a9 07 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a43f8		1e e2 20 dc d4 08 08 20 0c 1d 20 1a 06 f0 1c e2
>1a4408		20 a9 97 20 2a 22 20 d8 08 20 1a 06 f0 12 20 1d
>1a4418		24 90 2c e2 20 a9 02 85 dc 80 03 20 62 21 28 60
>1a4428		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>1a4438		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08
>1a4448		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d3 08
>1a4458		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 e2
>1a4468		20 a9 01 85 dc 28 60 08 20 3e 21 20 d8 08 a5 23
>1a4478		f0 0d 20 1d 24 90 27 e2 20 a9 02 85 dc 28 60 08
>1a4488		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a4498		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2
>1a44a8		20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d3 08 00
>1a44b8		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 20 8b 19
>1a44c8		20 ab 10 20 20 51 60 08 a7 00 10 03 20 1d 21 20
>1a44d8		20 54 b0 03 4c 46 45 e2 20 a5 ea 48 a5 e9 48 a5
>1a44e8		e8 48 a5 e7 48 20 7e 22 c9 8f d0 0e a9 8f 20 2a
>1a44f8		22 a9 00 8f 00 4d 00 20 0d 1b 20 3e 21 e2 20 a7
>1a4508		00 c9 8a f0 03 4c 46 45 20 1d 21 20 0c 1d 68 85
>1a4518		e7 68 85 e8 68 85 e9 68 85 ea 29 80 f0 1b 20 93
>1a4528		51 90 3a c2 20 a0 09 00 b7 08 85 c0 e2 20 c8 c8
>1a4538		b7 08 85 c2 20 8a 68 80 03 20 83 53 28 60 08 c2
>1a4548		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a4558		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20
>1a4568		48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00 c2
>1a4578		20 29 ff 00 20 5e 1e e2 20 dc d4 08 08 e2 20 20
>1a4588		7e 22 c9 00 f0 6d 20 0c 1d e2 20 a5 27 c9 ff f0
>1a4598		1b c9 02 d0 05 20 00 46 80 12 c9 00 d0 05 20 1e
>1a45a8		46 80 09 c9 01 d0 4f 20 31 46 80 00 20 3e 21 a7
>1a45b8		00 f0 40 c9 3a f0 3c c9 2c f0 23 c9 3b f0 24 08
>1a45c8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a45d8		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 a9 09
>1a45e8		20 18 00 20 1d 21 20 3e 21 a7 00 f0 09 c9 3a f0
>1a45f8		05 80 93 20 d7 03 28 60 08 8b 08 c2 20 48 a9 00
>1a4608		08 5b 68 28 e2 20 a0 00 00 b7 23 f0 06 20 18 00
>1a4618		c8 80 f6 ab 28 60 08 c2 20 20 60 15 a5 16 85 23
>1a4628		a5 18 85 25 20 00 46 28 60 08 20 e9 5d c2 20 a5
>1a4638		16 85 23 a5 18 85 25 20 00 46 28 60 08 e2 20 85
>1a4648		b5 4a 4a 4a 4a 29 0f 18 69 30 97 16 c8 a5 b5 29
>1a4658		0f 18 69 30 97 16 c8 28 60 e2 20 a9 8f 20 2a 22
>1a4668		08 20 0c 1d e2 20 c2 10 af 0e 08 af 09 08 8f 0e
>1a4678		08 af 20 01 15 a0 00 00 af 06 08 af 20 44 46 a9
>1a4688		2f 97 16 c8 af 09 08 af 20 44 46 a9 2f 97 16 c8
>1a4698		af 0f 08 af 20 44 46 af 0a 08 af 20 44 46 a9 00
>1a46a8		97 16 af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5 16
>1a46b8		85 23 a5 18 85 25 e2 20 a9 02 85 27 28 e2 20 20
>1a46c8		1d 21 60 e2 20 a9 8f 20 2a 22 08 20 0c 1d e2 20
>1a46d8		c2 10 af 0e 08 af 09 08 8f 0e 08 af 20 01 15 a0
>1a46e8		00 00 af 04 08 af 29 7f 20 44 46 a9 3a 97 16 c8
>1a46f8		af 02 08 af 20 44 46 a9 3a 97 16 c8 af 00 08 af
>1a4708		20 44 46 a9 00 97 16 af 0e 08 af 29 f7 8f 0e 08
>1a4718		af c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>1a4728		27 28 e2 20 20 1d 21 60 e2 20 a9 8f 20 2a 22 08
>1a4738		20 0c 1d e2 20 a9 01 85 27 a9 03 8f 00 e2 af a9
>1a4748		01 8f 01 e2 af c2 30 af 84 e8 af 8f 08 e2 af af
>1a4758		84 e8 af 29 ff 7f 8f 0a e2 af a9 ff ff 8f 0c e2
>1a4768		af a9 ff 7f 8f 0e e2 af ea ea ea af 08 e2 af 85
>1a4778		23 af 0a e2 af 85 25 28 e2 20 20 1d 21 60 e2 20
>1a4788		a9 8f 20 2a 22 08 20 0c 1d 22 28 10 00 e2 20 85
>1a4798		23 64 24 64 25 64 26 a9 00 85 27 28 e2 20 20 1d
>1a47a8		21 60 e2 20 a9 8f 20 2a 22 08 c2 30 20 0c 1d 20
>1a47b8		e3 06 c2 20 a5 25 48 a5 23 48 20 3e 21 e2 20 a7
>1a47c8		00 c9 2c f0 03 4c 21 48 20 1d 21 20 0c 1d 20 0d
>1a47d8		07 c2 20 a5 23 48 20 3e 21 e2 20 a7 00 c9 2c f0
>1a47e8		03 4c 21 48 20 1d 21 20 0c 1d 20 0d 07 c2 20 a5
>1a47f8		23 85 8f e2 20 a5 25 85 91 c2 20 68 85 29 a9 00
>1a4808		00 85 2b 68 85 23 68 85 25 e2 20 a9 02 85 27 20
>1a4818		59 17 e2 20 20 1d 21 28 60 08 c2 20 48 a9 00 08
>1a4828		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a4838		20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a4848		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a4858		5e 1e e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 08 c2
>1a4868		30 20 0c 1d e2 20 a5 27 c9 02 f0 03 4c e3 48 c2
>1a4878		20 a5 25 48 a5 23 48 20 3e 21 e2 20 a7 00 c9 2c
>1a4888		f0 03 4c 02 49 20 1d 21 20 0c 1d e2 20 a5 27 c9
>1a4898		00 d0 48 c2 20 a5 23 85 8f c2 20 68 85 23 68 85
>1a48a8		25 e2 20 a9 02 85 27 e2 20 a0 00 00 b7 23 f0 03
>1a48b8		c8 80 f9 c2 20 98 38 e5 8f 30 09 85 29 a9 00 00
>1a48c8		85 2b 80 07 a9 00 00 85 29 85 2b e2 20 a9 00 85
>1a48d8		2d 20 59 17 e2 20 20 1d 21 28 60 08 c2 20 48 a9
>1a48e8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a48f8		ff 00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00
>1a4908		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>1a4918		00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08
>1a4928		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>1a4938		20 5e 1e e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 08
>1a4948		c2 30 20 0c 1d e2 20 a5 27 c9 02 f0 03 4c ac 49
>1a4958		c2 20 a5 25 48 a5 23 48 20 3e 21 e2 20 a7 00 c9
>1a4968		2c f0 03 4c cb 49 20 1d 21 20 0c 1d e2 20 a5 27
>1a4978		c9 00 d0 30 c2 20 a5 23 85 8f c2 20 a9 00 00 85
>1a4988		29 a9 00 00 85 2b e2 20 a9 00 85 2d c2 20 68 85
>1a4998		23 68 85 25 e2 20 a9 02 85 27 20 59 17 e2 20 20
>1a49a8		1d 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a49b8		a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>1a49c8		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a49d8		02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a49e8		d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>1a49f8		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>1a4a08		08 e2 20 a9 8f 20 2a 22 20 0c 1d c2 10 e2 20 a5
>1a4a18		27 c9 02 d0 23 c2 20 a5 00 85 40 a5 02 85 42 a5
>1a4a28		23 85 00 a5 25 85 02 20 d8 08 a5 40 85 00 a5 42
>1a4a38		85 02 e2 20 20 1d 21 60 08 c2 20 48 a9 00 08 5b
>1a4a48		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>1a4a58		5e 1e e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 08 20
>1a4a68		0c 1d c2 10 e2 20 a5 27 c9 00 d0 1a 20 60 15 c2
>1a4a78		20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28
>1a4a88		e2 20 20 1d 21 60 08 c2 20 48 a9 00 08 5b 68 28
>1a4a98		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a4aa8		e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 08 20 0c 1d
>1a4ab8		20 e3 06 c2 20 64 0c 64 0e e2 30 a0 00 b7 23 c9
>1a4ac8		20 f0 04 c9 24 d0 03 c8 80 f3 b7 23 20 0c 05 90
>1a4ad8		1e c2 20 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e 06
>1a4ae8		0c 26 0e e2 20 20 2d 05 05 0c 85 0c c8 80 db c2
>1a4af8		20 a5 0c 85 23 a5 0e 85 25 e2 20 a9 00 85 27 28
>1a4b08		e2 20 20 1d 21 60 e2 20 a9 8f 20 2a 22 08 20 0c
>1a4b18		1d 20 51 06 20 01 15 e2 30 a0 ff a9 00 97 16 88
>1a4b28		a5 23 29 0f aa bf 00 d0 1a 97 16 88 a5 23 29 f0
>1a4b38		4a 4a 4a 4a aa bf 00 d0 1a 97 16 88 a5 24 85 23
>1a4b48		a5 25 85 24 a5 26 85 25 a9 00 85 26 a5 23 d0 d0
>1a4b58		a5 24 d0 cc a5 25 d0 c8 98 38 65 16 85 23 a5 17
>1a4b68		85 24 a5 18 85 25 a5 19 85 26 a9 02 85 27 28 e2
>1a4b78		20 20 1d 21 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4b88		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>1a4b98		20 dc d4 08 e2 20 a9 8f 20 2a 22 20 0c 1d e2 20
>1a4ba8		a5 27 c9 02 d0 1f 8b a5 25 48 ab c2 10 a6 23 20
>1a4bb8		ed 15 ab 84 23 c2 20 64 25 e2 20 a9 00 85 27 e2
>1a4bc8		20 20 1d 21 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4bd8		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>1a4be8		20 dc d4 08 e2 20 a9 8f 20 2a 22 20 0c 1d 20 51
>1a4bf8		06 e2 20 a5 25 c9 b0 90 10 c9 f0 b0 0c 8b 48 ab
>1a4c08		a6 23 22 44 11 00 ab 80 04 e2 20 a7 23 85 23 64
>1a4c18		24 64 25 64 26 e2 20 20 1d 21 60 08 c2 20 48 a9
>1a4c28		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a4c38		ff 00 20 5e 1e e2 20 dc d4 08 e2 20 a9 8f 20 2a
>1a4c48		22 20 0c 1d 20 51 06 e2 20 a5 25 c9 b0 90 22 c9
>1a4c58		f0 b0 1e 8b 48 ab a6 23 da 22 44 11 00 85 0c fa
>1a4c68		e8 da 22 44 11 00 85 0d fa e8 22 44 11 00 ab 80
>1a4c78		0d c2 20 a7 23 85 0c e2 20 a0 02 00 b7 23 85 25
>1a4c88		64 26 c2 20 a5 0c 85 23 e2 20 20 1d 21 60 08 c2
>1a4c98		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a4ca8		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 e2 20 a9
>1a4cb8		8f 20 2a 22 20 0c 1d 20 51 06 e2 20 a5 25 c9 b0
>1a4cc8		90 1d c9 f0 b0 19 8b 48 ab a6 23 da 22 44 11 00
>1a4cd8		85 23 fa e8 22 44 11 00 85 24 ab c2 20 80 06 c2
>1a4ce8		20 a7 23 85 23 64 25 e2 20 20 1d 21 60 08 c2 20
>1a4cf8		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a4d08		20 29 ff 00 20 5e 1e e2 20 dc d4 08 e2 20 a9 8f
>1a4d18		20 2a 22 20 0c 1d e2 20 a5 27 c9 00 d0 24 20 01
>1a4d28		15 a5 23 87 16 a9 00 a0 01 00 97 16 c2 20 a5 16
>1a4d38		85 23 a5 18 85 25 e2 20 a9 02 85 27 e2 20 20 1d
>1a4d48		21 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>1a4d58		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>1a4d68		08 e2 20 a9 8f 20 2a 22 20 0c 1d e2 20 a5 27 c9
>1a4d78		02 d0 14 a7 23 85 23 64 24 64 25 64 26 a9 00 85
>1a4d88		27 e2 20 20 1d 21 60 08 c2 20 48 a9 00 08 5b 68
>1a4d98		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a4da8		1e e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 20 0c 1d
>1a4db8		e2 20 a5 27 c9 00 d0 39 e2 20 a5 26 d0 52 a5 25
>1a4dc8		d0 4e a5 24 d0 4a c2 10 20 01 15 a4 23 e2 20 a9
>1a4dd8		00 97 16 88 30 07 a9 20 97 16 88 10 fb a9 02 85
>1a4de8		27 c2 20 a5 16 85 23 a5 18 85 25 e2 20 20 1d 21
>1a4df8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>1a4e08		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a4e18		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>1a4e28		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 e2
>1a4e38		20 a9 8f 20 2a 22 20 0c 1d e2 20 a5 27 c9 00 d0
>1a4e48		39 e2 20 a5 26 d0 52 a5 25 d0 4e a5 24 d0 4a c2
>1a4e58		10 20 01 15 a4 23 e2 20 a9 00 97 16 88 30 07 a9
>1a4e68		09 97 16 88 10 fb a9 02 85 27 c2 20 a5 16 85 23
>1a4e78		a5 18 85 25 e2 20 20 1d 21 60 08 c2 20 48 a9 00
>1a4e88		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a4e98		00 20 5e 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08
>1a4ea8		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>1a4eb8		20 5e 1e e2 20 dc d4 08 e2 20 a9 8f 20 2a 22 20
>1a4ec8		0c 1d e2 20 a5 27 c9 00 f0 23 c9 01 f0 3e 08 c2
>1a4ed8		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a4ee8		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 c2 20 a5
>1a4ef8		25 10 21 49 ff ff 85 25 a5 23 49 ff ff 18 69 01
>1a4f08		00 85 23 a5 25 69 00 00 85 25 80 08 e2 20 a5 26
>1a4f18		29 7f 85 26 e2 20 20 1d 21 60 e2 20 a9 8f 20 2a
>1a4f28		22 20 0c 1d e2 20 a5 27 c9 00 d0 25 c2 20 a5 25
>1a4f38		30 12 d0 04 a5 23 f0 13 a9 00 00 85 25 a9 01 00
>1a4f48		85 23 80 07 a9 ff ff 85 25 85 23 e2 20 20 1d 21
>1a4f58		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>1a4f68		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a4f78		e2 20 a9 8f 20 2a 22 20 0c 1d 20 51 06 e2 20 20
>1a4f88		1d 21 60 e2 20 a9 8f 20 2a 22 20 0c 1d 20 bf 07
>1a4f98		20 49 62 e2 20 20 1d 21 60 e2 20 a9 8f 20 2a 22
>1a4fa8		20 0c 1d 20 bf 07 20 78 62 e2 20 20 1d 21 60 e2
>1a4fb8		20 a9 8f 20 2a 22 20 0c 1d 20 bf 07 20 a7 62 e2
>1a4fc8		20 20 1d 21 60 e2 20 a9 8f 20 2a 22 20 0c 1d 20
>1a4fd8		bf 07 20 d5 62 e2 20 20 1d 21 60 e2 20 a9 8f 20
>1a4fe8		2a 22 20 0c 1d 20 bf 07 20 fe 63 e2 20 20 1d 21
>1a4ff8		60 e2 20 a9 8f 20 2a 22 20 0c 1d 20 bf 07 20 d4
>1a5008		63 e2 20 20 1d 21 60 e2 20 a9 8f 20 2a 22 20 0c
>1a5018		1d 20 bf 07 20 20 64 e2 20 20 1d 21 60 e2 20 a9
>1a5028		8f 20 2a 22 20 0c 1d 20 bf 07 20 b4 64 e2 20 20
>1a5038		1d 21 60 e2 20 a9 8f 20 2a 22 20 0c 1d 20 bf 07
>1a5048		20 36 65 e2 20 20 1d 21 60 00 ea 60 08 0b 08 c2
>1a5058		20 48 a9 00 08 5b 68 28 c2 30 c2 20 a9 00 00 85
>1a5068		d9 e2 20 a9 16 85 db c2 30 a9 00 00 a0 00 00 97
>1a5078		d9 a0 02 00 97 d9 a0 04 00 97 d9 20 f3 20 2b 28
>1a5088		60 8b 08 c2 20 a9 00 00 85 1a a9 16 00 85 1c 20
>1a5098		f3 20 20 d3 23 28 ab 60 08 c2 20 64 55 a9 ff 7f
>1a50a8		85 59 20 d7 03 20 7e 22 29 ff 00 c9 00 00 f0 2c
>1a50b8		c9 81 00 f0 1a 20 3e 21 20 d8 08 a5 23 85 55 20
>1a50c8		7e 22 29 ff 00 c9 00 00 f0 12 c9 81 00 d0 2a 20
>1a50d8		2a 22 20 3e 21 20 d8 08 a5 23 85 59 a5 1c 48 a5
>1a50e8		1a 48 a5 02 48 a5 00 48 20 8b 18 68 85 00 68 85
>1a50f8		02 68 85 1a 68 85 1c 28 60 08 c2 20 48 a9 00 08
>1a5108		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a5118		20 5e 1e e2 20 dc d4 08 08 08 c2 20 48 a9 00 08
>1a5128		5b 68 28 c2 20 64 e4 64 e7 e2 20 64 e6 64 e9 64
>1a5138		ea c2 20 38 a5 d9 69 04 00 85 e1 e2 20 a5 db 69
>1a5148		00 85 e3 28 60 c9 5f f0 1a c9 3a b0 04 c9 30 b0
>1a5158		12 c9 5b b0 04 c9 41 b0 0a c9 7b b0 04 c9 61 b0
>1a5168		02 18 60 38 60 08 e2 20 c2 10 a0 00 00 b7 0c f0
>1a5178		0a d7 e7 d0 13 c8 c0 08 00 d0 f2 b7 e7 20 56 05
>1a5188		20 4d 51 b0 03 28 38 60 28 18 60 08 e2 20 c2 10
>1a5198		a0 00 00 a2 00 00 b7 e7 f0 0b 20 56 05 9f 00 4e
>1a51a8		00 c8 e8 80 f1 a9 00 9f 00 4e 00 c2 20 a9 00 4e
>1a51b8		85 e7 e2 20 a9 00 85 e9 c2 20 a5 e4 85 08 d0 06
>1a51c8		e2 20 a5 e6 f0 4d e2 20 a5 e6 85 0a a5 ea a0 00
>1a51d8		00 d7 08 d0 17 c2 20 18 a5 08 69 01 00 85 0c e2
>1a51e8		20 a5 0a 69 00 85 0e 20 6d 51 b0 2a a0 0d 00 c2
>1a51f8		20 b7 08 85 0c c8 c8 e2 20 b7 08 85 0e d0 06 c2
>1a5208		20 a5 0c f0 0e c2 20 a5 0c 85 08 e2 20 a5 0e 85
>1a5218		0a 80 b9 28 18 60 28 38 60 08 20 93 51 b0 1f 08
>1a5228		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08
>1a5238		00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 c2 30
>1a5248		a0 09 00 b7 08 85 23 c8 c8 b7 08 85 25 e2 20 a0
>1a5258		00 00 b7 08 85 27 28 60 08 c2 20 18 a5 e1 69 10
>1a5268		00 85 08 e2 20 a5 e3 69 00 85 0a c5 bc 90 27 c2
>1a5278		20 a5 08 c5 ba 90 1f 08 c2 20 48 a9 00 08 5b 68
>1a5288		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a5298		1e e2 20 dc d4 08 c2 20 a5 e1 85 c0 e2 20 a5 e3
>1a52a8		85 c2 c2 20 a5 08 85 e1 e2 20 a5 0a 85 e3 28 60
>1a52b8		08 e2 20 a5 27 c5 ea f0 33 a5 ea c9 00 d0 05 20
>1a52c8		51 06 80 2f c9 01 d0 05 20 bf 07 80 26 08 c2 20
>1a52d8		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a52e8		20 29 ff 00 20 5e 1e e2 20 dc d4 08 c9 02 d0 03
>1a52f8		20 f3 16 c2 10 20 60 52 c2 30 18 a5 c0 69 01 00
>1a5308		85 08 e2 20 a5 c2 69 00 85 0a a0 00 00 a9 00 97
>1a5318		08 c8 c0 08 00 d0 f8 a0 00 00 b7 e7 f0 10 20 56
>1a5328		05 20 4d 51 90 08 97 08 c8 c0 08 00 d0 ec c2 20
>1a5338		a0 09 00 a5 23 97 c0 a5 25 c8 c8 97 c0 a5 e4 a0
>1a5348		0d 00 97 c0 c8 c8 e2 20 a5 e6 97 c0 c2 20 a5 c0
>1a5358		85 e4 e2 20 a5 c2 85 e6 e2 20 a0 00 00 a5 27 97
>1a5368		c0 c9 02 f0 02 28 60 c2 20 a5 23 85 c0 e2 20 a5
>1a5378		25 85 c2 20 0f 13 20 24 13 80 ea 08 c2 30 a5 e4
>1a5388		d0 06 e2 20 a5 e6 f0 05 20 93 51 b0 05 20 b8 52
>1a5398		80 4e e2 20 a5 27 c5 ea f0 33 a5 ea c9 00 d0 05
>1a53a8		20 51 06 80 2c c9 01 d0 05 20 bf 07 80 23 08 c2
>1a53b8		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a53c8		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 c9 02 f0
>1a53d8		11 c2 30 a0 09 00 a5 23 97 08 c8 c8 a5 25 97 08
>1a53e8		28 60 20 f3 16 a0 09 00 b7 08 85 c0 c8 c8 e2 20
>1a53f8		b7 08 85 c2 20 0f 13 20 43 13 e2 20 a5 27 c9 02
>1a5408		f0 02 80 cd c2 20 a5 23 85 c0 e2 20 a5 25 85 c2
>1a5418		20 0f 13 20 24 13 80 b9 08 20 3e 21 e2 20 a7 00
>1a5428		20 e2 04 90 42 c2 20 a5 00 85 e7 e2 20 a5 02 85
>1a5438		e9 20 1d 21 a7 00 f0 0d c9 24 f0 14 c9 25 f0 09
>1a5448		20 4d 51 b0 ec a9 01 80 0c 20 1d 21 a9 00 80 05
>1a5458		20 1d 21 a9 02 85 ea 20 7e 22 c9 8f d0 06 a5 ea
>1a5468		09 80 85 ea 28 38 60 28 18 60 08 c2 20 18 a5 23
>1a5478		65 29 85 23 a5 25 65 2b 85 25 28 60 08 c2 20 38
>1a5488		a5 23 e5 29 85 23 a5 25 e5 2b 85 25 28 60 08 c2
>1a5498		20 3b 38 e9 0a 00 1b c2 30 a9 00 00 83 01 83 03
>1a54a8		83 05 83 07 83 09 a5 25 10 18 a9 00 80 83 01 a5
>1a54b8		25 49 ff ff 85 25 a5 23 49 ff ff 1a 85 23 d0 02
>1a54c8		e6 25 a5 2b 10 1a a3 01 49 00 80 83 01 a5 2b 49
>1a54d8		ff ff 85 2b a5 29 49 ff ff 1a 85 29 d0 02 e6 2b
>1a54e8		a5 25 f0 04 a5 2b d0 5a a5 23 8f 00 01 00 a5 29
>1a54f8		8f 02 01 00 af 04 01 00 83 03 af 06 01 00 83 05
>1a5508		a5 25 8f 00 01 00 a5 29 8f 02 01 00 18 af 04 01
>1a5518		00 63 05 83 05 af 06 01 00 63 07 83 07 a5 23 8f
>1a5528		00 01 00 a5 2b 8f 02 01 00 18 af 04 01 00 63 05
>1a5538		83 05 af 06 01 00 63 07 83 07 a3 07 f0 23 a3 09
>1a5548		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0d
>1a5558		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>1a5568		08 c2 30 a3 01 10 16 a3 05 49 ff ff 83 05 a3 03
>1a5578		49 ff ff 1a 83 03 d0 05 a3 05 1a 83 05 a3 03 85
>1a5588		23 a3 05 85 25 c2 20 3b 18 69 0a 00 1b 28 60 08
>1a5598		c2 20 a5 23 c5 29 a5 25 e5 2b 50 03 49 00 80 30
>1a55a8		06 64 23 64 25 80 07 a9 ff ff 85 23 85 25 28 60
>1a55b8		08 c2 20 a5 23 c5 29 d0 0c a5 25 c5 2b d0 06 64
>1a55c8		23 64 25 80 16 a5 29 c5 23 a5 2b e5 25 50 03 49
>1a55d8		00 80 10 eb a9 ff ff 85 23 85 25 28 60 08 c2 20
>1a55e8		a5 2b c5 25 d0 0f a5 29 c5 23 d0 09 a9 ff ff 85
>1a55f8		23 85 25 80 04 64 23 64 25 28 60 08 c2 20 a5 2b
>1a5608		c5 25 d0 0c a5 29 c5 23 d0 06 64 23 64 25 80 07
>1a5618		a9 ff ff 85 23 85 25 28 60 08 c2 20 a5 23 c5 29
>1a5628		d0 0f a5 25 c5 2b d0 09 a9 ff ff 85 23 85 25 80
>1a5638		13 a5 29 c5 23 a5 2b e5 25 50 03 49 00 80 30 e8
>1a5648		64 23 64 25 28 60 08 c2 20 a5 23 c5 29 d0 0f a5
>1a5658		25 c5 2b d0 09 a9 ff ff 85 23 85 25 80 13 a5 23
>1a5668		c5 29 a5 25 e5 2b 50 03 49 00 80 30 e8 64 23 64
>1a5678		25 28 60 08 c2 20 8f 12 01 00 8a 8f 10 01 00 af
>1a5688		16 01 00 aa af 14 01 00 28 60 08 e2 20 a9 03 8f
>1a5698		00 e2 af a9 00 8f 01 e2 af c2 20 a5 23 8f 08 e2
>1a56a8		af a5 25 8f 0a e2 af a9 00 00 8f 0c e2 af a9 00
>1a56b8		01 8f 0e e2 af ea ea ea ea ea ea af 08 e2 af 85
>1a56c8		23 af 0a e2 af 85 25 a9 01 00 85 27 28 60 08 e2
>1a56d8		20 a9 40 8f 00 e2 af 80 09 08 e2 20 a9 48 8f 00
>1a56e8		e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f 08 e2 af
>1a56f8		a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e
>1a5708		e2 af ea ea ea e2 20 af 06 e2 af 29 07 d0 10 c2
>1a5718		20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60 20
>1a5728		c2 57 80 f9 08 e2 20 a9 01 8f 01 e2 af a9 00 8f
>1a5738		00 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2
>1a5748		af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af ea ea ea
>1a5758		e2 20 af 05 e2 af 29 17 d0 10 c2 20 af 08 e2 af
>1a5768		85 23 af 0a e2 af 85 25 28 60 20 c2 57 80 f9 08
>1a5778		e2 20 a9 00 8f 01 e2 af a9 00 8f 00 e2 af c2 20
>1a5788		a5 23 8f 08 e2 af a5 25 8f 0a e2 af a5 29 8f 0c
>1a5798		e2 af a5 2b 8f 0e e2 af ea ea ea e2 20 af 04 e2
>1a57a8		af 29 07 d0 10 c2 20 af 08 e2 af 85 23 af 0a e2
>1a57b8		af 85 25 28 60 20 c2 57 80 f9 e2 20 89 01 f0 20
>1a57c8		00 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0c 8f
>1a57d8		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a57e8		89 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a57f8		a9 0d 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>1a5808		dc d4 08 89 04 f0 1f 08 c2 20 48 a9 00 08 5b 68
>1a5818		28 e2 20 a9 0e 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a5828		1e e2 20 dc d4 08 60 08 e2 20 a9 00 8f 01 e2 af
>1a5838		a9 02 8f 00 e2 af c2 20 a9 00 a0 8f 0c e2 af a9
>1a5848		00 00 8f 0e e2 af a5 23 8f 08 e2 af a5 25 8f 0a
>1a5858		e2 af ea ea ea e2 20 af 04 e2 af 89 07 f0 01 00
>1a5868		c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60
>1a5878		08 e2 20 a9 01 8f 01 e2 af a9 02 8f 00 e2 af c2
>1a5888		20 a9 00 a0 8f 0c e2 af a9 00 00 8f 0e e2 af a5
>1a5898		23 8f 08 e2 af a5 25 8f 0a e2 af ea ea ea af 08
>1a58a8		e2 af 85 23 af 0a e2 af 85 25 28 60 08 c2 20 a5
>1a58b8		23 d0 0a a5 25 29 ff 7f d0 03 28 38 60 28 18 60
>1a58c8		08 e2 20 38 e9 30 20 7a 05 c2 20 29 ff 00 18 65
>1a58d8		23 85 23 a5 25 69 00 00 85 25 28 60 08 e2 20 c9
>1a58e8		30 90 04 c9 3a 90 1c c9 61 90 04 c9 67 90 0a c9
>1a58f8		41 90 04 c9 47 90 07 80 31 38 e9 57 80 08 38 e9
>1a5908		37 80 03 38 e9 30 06 23 26 24 26 25 26 26 06 23
>1a5918		26 24 26 25 26 26 06 23 26 24 26 25 26 26 06 23
>1a5928		26 24 26 25 26 26 05 23 85 23 28 60 08 e2 20 c9
>1a5938		30 f0 06 c9 31 f0 0a 80 0f c2 20 06 23 26 25 80
>1a5948		07 c2 20 38 26 23 26 25 28 60 08 e2 30 a5 61 f0
>1a5958		0d aa a5 69 d0 15 a9 00 8f 01 e2 af 80 15 e2 20
>1a5968		a9 03 8f 01 e2 af ea ea ea 80 62 e2 20 a9 01 8f
>1a5978		01 e2 af e2 20 a9 43 8f 00 e2 af c2 20 a9 00 10
>1a5988		8f 08 e2 af a9 00 00 8f 0a e2 af c2 20 a9 00 a0
>1a5998		8f 0c e2 af a9 00 00 8f 0e e2 af ea ea ea ca f0
>1a59a8		2c af 08 e2 af 8f 0c 08 00 af 0a e2 af 8f 0e 08
>1a59b8		00 e2 20 a9 42 8f 00 e2 af c2 20 af 0c 08 00 8f
>1a59c8		08 e2 af af 0e 08 00 8f 0a e2 af 80 be c2 20 af
>1a59d8		08 e2 af 85 23 af 0a e2 af 85 25 e2 20 a9 01 85
>1a59e8		27 28 60 08 c2 20 a5 5d 85 23 a5 5f 85 25 20 04
>1a59f8		5c c2 20 a5 23 85 29 a5 25 85 2b c2 20 a5 59 85
>1a5a08		23 a5 5b 85 25 20 2c 57 c2 20 a5 55 85 29 a5 57
>1a5a18		85 2b 20 e1 56 c2 20 a5 23 85 29 a5 25 85 2b 20
>1a5a28		52 59 20 77 57 c2 20 a5 65 f0 07 a5 25 09 00 80
>1a5a38		85 25 e2 20 a9 01 85 27 28 60 5a 08 c2 30 64 23
>1a5a48		64 25 64 55 64 57 64 65 64 59 64 5b a9 01 00 85
>1a5a58		5d 64 5f 64 61 64 63 64 69 e2 20 a0 00 00 b7 00
>1a5a68		c9 2b f0 33 c9 2d f0 2b c9 26 f0 3a 20 fb 04 90
>1a5a78		03 82 ac 00 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a5a88		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>1a5a98		dc d4 08 a9 01 85 65 c8 b7 00 c9 26 f0 08 20 fb
>1a5aa8		04 90 d1 82 7a 00 c8 b7 00 c9 68 f0 0e c9 48 f0
>1a5ab8		0a c9 62 f0 4c c9 42 f0 48 80 b9 c8 b7 00 20 0c
>1a5ac8		05 b0 02 80 af 20 e4 58 c8 b7 00 20 0c 05 b0 f5
>1a5ad8		e2 20 a5 65 f0 11 c2 20 38 a9 00 00 e5 23 85 23
>1a5ae8		a9 00 00 e5 25 85 25 e2 20 a9 00 85 27 c2 20 18
>1a5af8		98 65 00 85 00 a5 02 69 00 00 85 02 e2 20 28 7a
>1a5b08		60 c8 b7 00 c9 30 f0 07 c9 31 f0 03 82 65 ff 20
>1a5b18		34 59 c8 b7 00 c9 30 f0 f6 c9 31 f0 f2 82 b0 ff
>1a5b28		20 c8 58 c8 b7 00 c9 2e f0 08 20 fb 04 b0 f1 82
>1a5b38		9e ff c2 20 20 04 5c c2 20 a5 23 85 55 a5 25 85
>1a5b48		57 64 23 64 25 e2 20 80 36 20 c8 58 c2 20 a5 5f
>1a5b58		8f 00 01 00 a9 0a 00 8f 02 01 00 af 04 01 00 85
>1a5b68		5f a5 5d 8f 00 01 00 a9 0a 00 8f 02 01 00 af 04
>1a5b78		01 00 85 5d af 06 01 00 18 65 5f 85 5f e2 20 c8
>1a5b88		b7 00 c9 65 f0 24 c9 45 f0 20 20 fb 04 b0 ba c2
>1a5b98		20 20 04 5c c2 20 a5 23 85 59 a5 25 85 5b 64 23
>1a5ba8		64 25 20 eb 59 e2 20 82 43 ff c2 20 20 04 5c c2
>1a5bb8		20 a5 23 85 59 a5 25 85 5b 64 23 64 25 e2 20 c8
>1a5bc8		b7 00 c9 2b f0 10 c9 2d f0 08 20 fb 04 b0 12 82
>1a5bd8		a2 fe a9 01 85 69 c8 b7 00 20 fb 04 b0 03 82 93
>1a5be8		fe 20 c8 58 c8 b7 00 20 fb 04 b0 f5 c2 20 a5 23
>1a5bf8		85 61 a5 25 85 63 20 eb 59 82 f1 fe 08 20 92 56
>1a5c08		28 60 08 c2 20 a9 01 5f 85 29 a9 1a 00 85 2b e2
>1a5c18		20 a9 01 85 2d c2 20 20 dd 5c c9 ff ff d0 0c a9
>1a5c28		00 00 8d 23 08 8d 25 08 82 a1 00 f4 00 00 f4 00
>1a5c38		00 f4 00 00 e2 20 ad 26 08 29 80 83 01 ad 25 08
>1a5c48		2a ad 26 08 2a 83 02 a9 00 83 06 ad 25 08 09 80
>1a5c58		83 05 ad 24 08 83 04 ad 23 08 83 03 a3 02 c9 96
>1a5c68		f0 3a 90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a5c78		a9 0d 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20
>1a5c88		dc d4 08 c2 20 a3 05 4a 83 05 a3 03 6a 83 03 e2
>1a5c98		20 a3 02 1a 83 02 c9 96 f0 02 80 e7 a3 01 f0 1b
>1a5ca8		c2 20 a3 03 49 ff ff 18 69 01 00 8d 23 08 a3 05
>1a5cb8		49 ff ff 69 00 00 8d 25 08 80 0c c2 20 a3 03 8d
>1a5cc8		23 08 a3 05 8d 25 08 c2 20 68 68 68 e2 20 a9 00
>1a5cd8		8d 27 08 28 60 da 08 c2 20 a5 25 48 a5 23 48 20
>1a5ce8		d6 56 20 b4 58 b0 11 a5 25 89 00 80 d0 05 a9 01
>1a5cf8		00 80 08 a9 ff ff 80 03 a9 00 00 fa 86 23 fa 86
>1a5d08		25 28 fa 60 08 c2 30 20 dd 5c c9 ff ff d0 05 20
>1a5d18		2d 06 80 03 20 3f 06 28 60 08 c2 30 20 dd 5c c9
>1a5d28		01 00 d0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2
>1a5d38		30 20 dd 5c c9 00 00 d0 05 20 2d 06 80 03 20 3f
>1a5d48		06 28 60 08 c2 30 20 dd 5c c9 01 00 f0 05 20 2d
>1a5d58		06 80 03 20 3f 06 28 60 08 c2 30 20 dd 5c c9 ff
>1a5d68		ff f0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2 30
>1a5d78		20 dd 5c c9 00 00 f0 05 20 2d 06 80 03 20 3f 06
>1a5d88		28 60 08 e2 20 97 23 c8 a9 00 97 23 28 60 da 08
>1a5d98		e2 20 c9 80 90 0a 48 a9 2d 20 8a 5d 68 49 ff 1a
>1a5da8		c2 30 29 ff 00 c9 64 00 90 0e a2 64 00 20 7b 56
>1a5db8		18 69 30 00 20 8a 5d 8a a2 0a 00 20 7b 56 18 69
>1a5dc8		30 00 20 8a 5d 8a 18 69 30 00 20 8a 5d 28 fa 60
>1a5dd8		08 e2 20 c2 10 a0 00 00 b7 23 f0 03 c8 80 f9 28
>1a5de8		60 08 e2 20 c2 10 f4 00 00 f4 00 00 f4 00 00 20
>1a5df8		b4 58 90 19 20 01 15 e2 20 a0 00 00 a9 20 97 16
>1a5e08		c8 a9 30 97 16 c8 a9 00 97 16 82 ce 00 e2 20 a5
>1a5e18		26 10 08 29 7f 85 26 a9 01 83 01 c2 20 a9 00 00
>1a5e28		83 03 c2 20 af fd 5e 1a 85 29 af ff 5e 1a 85 2b
>1a5e38		20 dd 5c 89 00 80 d0 12 20 78 58 a3 03 1a 83 03
>1a5e48		20 dd 5c c9 ff ff f0 12 80 ee 20 2f 58 a3 03 3a
>1a5e58		83 03 20 dd 5c c9 ff ff f0 f0 e2 30 a5 25 0a a5
>1a5e68		26 2a 83 05 38 a9 96 e3 05 aa f0 0f a5 25 09 80
>1a5e78		85 25 46 25 66 24 66 23 ca d0 f7 c2 10 e2 20 64
>1a5e88		26 a9 00 85 27 a3 01 f0 11 c2 20 38 a9 00 00 e5
>1a5e98		23 85 23 a9 00 00 e5 25 85 25 20 60 15 c2 20 a5
>1a5ea8		16 85 23 a5 18 85 25 20 d8 5d e2 20 c8 a9 00 97
>1a5eb8		23 88 88 b7 23 c8 97 23 c0 02 00 d0 f4 a9 2e 97
>1a5ec8		23 e2 20 18 a3 03 69 05 83 06 f0 19 20 d8 5d a9
>1a5ed8		45 20 8a 5d a3 06 20 96 5d 80 0a c2 20 a5 16 85
>1a5ee8		23 a5 18 85 25 e2 20 a9 02 85 27 c2 20 3b 18 69
>1a5ef8		06 00 1b 28 60 00 50 c3 47 00 00 80 3f f3 04 b5
>1a5f08		3f f3 04 35 3f e2 20 a9 48 8f 00 e2 af c2 20 bd
>1a5f18		00 00 8f 08 e2 af bd 02 00 8f 0a e2 af 88 e8 e8
>1a5f28		e8 e8 e2 20 a9 00 8f 01 e2 af c2 20 af 23 08 00
>1a5f38		8f 0c e2 af af 25 08 00 8f 0e e2 af ea ea ea af
>1a5f48		08 e2 af 48 af 0a e2 af 8f 0a e2 af 68 8f 08 e2
>1a5f58		af e2 20 a9 02 8f 01 e2 af c2 20 bd 00 00 8f 0c
>1a5f68		e2 af bd 02 00 8f 0e e2 af ea ea ea 88 f0 14 af
>1a5f78		08 e2 af 48 af 0a e2 af 8f 0a e2 af 68 8f 08 e2
>1a5f88		af 80 9b af 08 e2 af 8f 23 08 00 af 0a e2 af 8f
>1a5f98		25 08 00 60 e2 20 a9 00 8f 00 e2 af a9 00 8f 01
>1a5fa8		e2 af c2 20 a5 23 8f 08 e2 af 8f 0c e2 af af 25
>1a5fb8		08 00 8f 0a e2 af 8f 0e e2 af ea ea ea af 08 e2
>1a5fc8		af 85 23 af 0a e2 af 85 25 60 e2 20 a9 00 8f 00
>1a5fd8		e2 af a9 01 8f 01 e2 af c2 20 a5 23 8f 0c e2 af
>1a5fe8		af 25 08 00 8f 0e e2 af af 26 66 1a 8f 08 e2 af
>1a5ff8		af 28 66 1a 8f 0a e2 af ea ea ea af 08 e2 af 85
>1a6008		23 af 0a e2 af 85 25 60 a2 00 00 a5 23 c5 29 a5
>1a6018		25 e5 2b 90 1e a5 23 8f 08 e2 af a5 25 8f 0a e2
>1a6028		af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25
>1a6038		e8 80 d8 60 e2 20 a5 26 10 09 29 7f 85 26 a9 01
>1a6048		48 80 03 a9 00 48 a9 40 8f 00 e2 af a9 02 8f 01
>1a6058		e2 af c2 30 af 8e 66 1a 85 29 8f 0c e2 af af 90
>1a6068		66 1a 85 2b 8f 0e e2 af 20 10 60 e2 20 68 c2 20
>1a6078		f0 1e a5 23 8f 08 e2 af a5 25 8f 0a e2 af ea ea
>1a6088		ea af 08 e2 af 85 23 af 0a e2 af 29 ff 7f 85 25
>1a6098		60 5a a2 00 00 a0 00 00 a5 23 df 92 66 1a a5 25
>1a60a8		ff 94 66 1a 90 2c bf 8e 66 1a 8f 08 e2 af bf 90
>1a60b8		66 1a 8f 0a e2 af a5 23 8f 0c e2 af a5 25 8f 0e
>1a60c8		e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85
>1a60d8		25 38 98 2a a8 e8 e8 e8 e8 e0 0c 00 d0 ba 98 aa
>1a60e8		7a 60 08 c2 30 48 da 20 9c 5f 8b e2 20 a9 1a 48
>1a60f8		ab c2 20 a2 ce 65 5a a0 05 00 20 0d 5f 7a a9 01
>1a6108		00 8f 27 08 00 ab fa 68 28 60 08 c2 30 48 da a5
>1a6118		23 85 29 a5 25 85 2b 20 9c 5f 8b e2 20 a9 1a 48
>1a6128		ab c2 20 a2 e2 65 5a a0 05 00 20 0d 5f 7a ab 20
>1a6138		77 57 fa 68 28 60 08 c2 30 48 da a5 23 85 29 a5
>1a6148		25 85 2b 20 9c 5f 8b e2 20 a9 1a 48 ab c2 20 a2
>1a6158		f6 65 5a a0 05 00 20 0d 5f 7a ab 20 77 57 fa 68
>1a6168		28 60 08 c2 30 48 da e2 20 a9 40 8f 00 e2 af a9
>1a6178		02 8f 01 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f
>1a6188		0a e2 af af 26 66 1a 8f 0c e2 af af 28 66 1a 8f
>1a6198		0e e2 af ea ea ea af 08 e2 af 85 0c af 0a e2 af
>1a61a8		85 0e e2 20 a9 48 8f 00 e2 af c2 20 ea ea ea af
>1a61b8		08 e2 af 85 10 af 0a e2 af 85 12 e2 20 a9 01 8f
>1a61c8		01 e2 af c2 20 a5 0c 8f 08 e2 af a5 0e 8f 0a e2
>1a61d8		af a5 10 8f 0c e2 af a5 12 8f 0e e2 af ea ea ea
>1a61e8		af 08 e2 af 85 23 af 0a e2 af 85 25 e2 20 a9 08
>1a61f8		8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f 08
>1a6208		e2 af a5 25 8f 0a e2 af ea ea ea af 08 e2 af 85
>1a6218		29 af 0a e2 af 85 2b 20 9c 5f 8b e2 20 a9 1a 48
>1a6228		ab c2 20 a2 0a 66 5a a0 08 00 20 0d 5f 7a a9 01
>1a6238		00 8f 27 08 00 8f 2d 08 00 20 77 57 ab fa 68 28
>1a6248		60 08 c2 30 48 da 20 3c 60 20 99 60 da 8a 29 01
>1a6258		00 d0 05 20 12 61 80 03 20 ea 60 fa 8a 29 04 00
>1a6268		f0 0a e2 20 a5 26 09 80 85 26 c2 20 fa 68 28 60
>1a6278		08 c2 30 48 da 20 3c 60 20 99 60 da 8a 29 01 00
>1a6288		d0 05 20 ea 60 80 03 20 12 61 fa 8a 29 02 00 f0
>1a6298		0a e2 20 a5 26 09 80 85 26 c2 20 fa 68 28 60 08
>1a62a8		c2 30 48 da 20 3c 60 20 99 60 20 3e 61 8a 29 01
>1a62b8		00 f0 03 20 d2 5f 8a e2 20 4a 4a 69 00 29 01 f0
>1a62c8		06 a5 26 09 80 85 26 c2 20 fa 68 28 60 08 c2 30
>1a62d8		48 da 5a a5 25 10 1f 08 c2 20 48 a9 00 08 5b 68
>1a62e8		28 e2 20 a9 17 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a62f8		1e e2 20 dc d4 08 c2 30 a5 23 cf 26 66 1a a5 25
>1a6308		cf 28 66 1a b0 04 20 d2 5f 18 a9 00 00 a8 2a 48
>1a6318		e2 20 a9 00 8f 00 e2 af a9 01 8f 01 e2 af c2 20
>1a6328		af 7e 66 1a 85 29 8f 0c e2 af af 80 66 1a 85 2b
>1a6338		8f 0e e2 af 20 10 60 8a f0 07 0a 0a 0a 0a 0a 0a
>1a6348		a8 af 82 66 1a 85 29 8f 0c e2 af af 84 66 1a 85
>1a6358		2b 8f 0e e2 af 20 10 60 8a f0 0b 0a 0a 0a 0a 85
>1a6368		29 18 98 65 29 a8 af 86 66 1a 85 29 8f 0c e2 af
>1a6378		af 88 66 1a 85 2b 8f 0e e2 af 20 10 60 8a f0 09
>1a6388		0a 0a 85 29 18 98 65 29 a8 af 8a 66 1a 85 29 8f
>1a6398		0c e2 af af 8c 66 1a 85 2b 8f 0e e2 af 20 10 60
>1a63a8		86 29 18 98 65 29 a8 20 6a 61 a5 23 85 29 a5 25
>1a63b8		85 2b 98 85 23 64 25 20 04 5c 20 e1 56 68 d0 07
>1a63c8		a5 25 09 00 80 85 25 7a fa 68 28 60 08 c2 30 48
>1a63d8		da a5 23 85 29 a5 25 85 2b 20 9c 5f 8b e2 20 a9
>1a63e8		1a 48 ab c2 20 a2 2e 66 a0 05 00 20 0d 5f ab 20
>1a63f8		77 57 fa 68 28 60 08 c2 30 48 da 20 d4 63 af 96
>1a6408		66 1a 85 29 af 98 66 1a 85 2b 20 d6 56 a5 25 49
>1a6418		00 80 85 25 fa 68 28 60 08 c2 30 48 da a5 23 85
>1a6428		29 a5 25 85 2b 20 9c 5f 8b e2 20 a9 1a 48 ab c2
>1a6438		20 a2 42 66 a0 05 00 20 0d 5f ab 20 77 57 fa 68
>1a6448		28 60 c2 20 a5 23 85 29 a5 25 85 2b c2 20 af 26
>1a6458		66 1a 85 23 af 28 66 1a 85 25 8a f0 30 4a aa 90
>1a6468		03 20 77 57 c2 20 a5 25 48 a5 23 48 c2 20 a5 29
>1a6478		85 23 a5 2b 85 25 20 9c 5f c2 20 a5 23 85 29 a5
>1a6488		25 85 2b c2 20 68 85 23 68 85 25 80 cd 60 08 c2
>1a6498		30 48 da 8b e2 20 a9 1a 48 ab c2 20 a2 56 66 5a
>1a64a8		a0 0a 00 20 0d 5f 7a ab fa 68 28 60 08 c2 30 48
>1a64b8		da 5a a5 23 05 25 d0 10 c2 20 af 26 66 1a 85 23
>1a64c8		af 28 66 1a 85 25 80 61 a5 25 29 00 80 a8 f0 07
>1a64d8		a5 25 29 ff 7f 85 25 c2 20 a5 25 48 a5 23 48 20
>1a64e8		51 06 a6 23 20 bf 07 c2 20 a5 23 85 29 a5 25 85
>1a64f8		2b c2 20 68 85 23 68 85 25 20 d6 56 20 96 64 c2
>1a6508		20 a5 25 48 a5 23 48 c2 20 af 8a 66 1a 85 23 af
>1a6518		8c 66 1a 85 25 20 4a 64 c2 20 68 85 29 68 85 2b
>1a6528		20 77 57 98 f0 03 20 d2 5f 7a fa 68 28 60 08 c2
>1a6538		30 48 a5 25 10 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a6548		e2 20 a9 17 8f d3 08 00 c2 20 29 ff 00 20 5e 1e
>1a6558		e2 20 dc d4 08 c2 30 05 23 f0 68 c2 20 af 2a 66
>1a6568		1a 85 29 af 2c 66 1a 85 2b e2 20 a9 01 85 2d c2
>1a6578		20 c2 20 a5 25 48 a5 23 48 20 2c 57 a5 25 c5 2b
>1a6588		d0 09 a5 23 45 29 29 f8 ff f0 30 20 e1 56 c2 20
>1a6598		af 2a 66 1a 85 29 af 2c 66 1a 85 2b 20 2c 57 c2
>1a65a8		20 a5 23 85 29 a5 25 85 2b c2 20 68 85 23 68 85
>1a65b8		25 c2 20 a5 25 48 a5 23 48 80 be c2 20 68 85 29
>1a65c8		68 85 2b 68 28 60 01 0d d0 37 61 0b b6 ba ab aa
>1a65d8		2a 3d 00 00 00 bf 00 00 80 3f 1d ef 38 36 01 0d
>1a65e8		50 b9 89 88 08 3c ab aa 2a be 00 00 80 3f a4 27
>1a65f8		b3 3c d1 0d 5d 3d 89 88 08 3e ab aa aa 3e 00 00
>1a6608		80 3f 89 88 88 3d d9 89 9d 3d 8c 2e ba 3d 39 8e
>1a6618		e3 3d 25 49 12 3e cd cc 4c 3e ab aa aa 3e 00 00
>1a6628		80 3f 00 00 00 40 8e e3 f8 3c 6e db 36 3d 9a 99
>1a6638		99 3d ab aa 2a 3e 00 00 80 3f 39 8e e3 3d 25 49
>1a6648		12 be cd cc 4c 3e ab aa aa be 00 00 80 3f 1d ef
>1a6658		38 36 01 0d d0 37 01 0d 50 39 61 0b b6 3a 89 88
>1a6668		08 3c ab aa 2a 3d ab aa 2a 3e 00 00 00 3f 00 00
>1a6678		80 3f 00 00 80 3f c1 2c a1 6d 5f 97 07 4b 81 64
>1a6688		5a 42 54 f8 2d 40 db 0f c9 40 db 0f 49 40 db 0f
>1a6698		c9 3f db 0f 49 3f 08 20 0f 13 c2 20 a9 01 00 85
>1a66a8		23 a9 00 00 85 25 e2 20 af 00 4d 00 c2 20 29 ff
>1a66b8		00 85 8f a8 a2 01 00 c2 20 bf 00 4d 00 85 29 a9
>1a66c8		00 00 85 2b e2 20 a9 00 85 2d c2 20 20 5a 28 e8
>1a66d8		e8 88 d0 e3 c2 20 a9 04 00 85 29 a9 00 00 85 2b
>1a66e8		20 5a 28 e2 20 af 00 4d 00 85 0c a9 00 85 0d c2
>1a66f8		20 06 0c 38 a5 23 65 0c 85 23 a5 25 69 00 00 85
>1a6708		25 d0 29 e2 20 a5 ea 09 80 a6 23 20 d3 10 e2 20
>1a6718		af 00 4d 00 87 c0 a0 01 00 a2 00 00 e2 20 bf 01
>1a6728		4d 00 97 c0 e4 8f f0 23 e8 c8 80 f0 08 c2 20 48
>1a6738		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>1a6748		29 ff 00 20 5e 1e e2 20 dc d4 08 e2 20 38 a5 c0
>1a6758		67 c0 85 08 a5 c1 69 00 85 09 a5 c2 69 00 85 0a
>1a6768		64 0b c2 20 a0 05 00 b7 c3 85 0c e2 20 c8 c8 b7
>1a6778		c3 85 0e 64 0f e2 20 a9 00 87 08 c2 20 18 a5 08
>1a6788		69 01 00 85 08 a5 0a 69 00 00 85 0a c5 0e d0 e5
>1a6798		a5 08 c5 0c d0 df 28 60 08 c2 20 64 08 64 0a e2
>1a67a8		20 af 00 4d 00 85 8f 64 90 a2 01 00 e2 20 a7 c0
>1a67b8		c5 8f f0 22 a6 8f 00 08 c2 20 48 a9 00 08 5b 68
>1a67c8		28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a67d8		1e e2 20 dc d4 08 c9 01 f0 3a a0 01 00 e2 20 bf
>1a67e8		00 4d 00 85 23 64 24 64 25 64 26 b7 c0 85 29 64
>1a67f8		2a 64 2b 64 2c a5 23 c5 29 b0 68 20 5a 28 c2 20
>1a6808		18 a5 08 65 23 85 08 a5 0a 65 25 85 0a e8 e8 c8
>1a6818		c4 8f d0 c9 e2 20 18 bf 00 4d 00 85 90 65 08 85
>1a6828		08 a5 09 69 00 85 09 c2 20 a5 0a 69 00 00 85 0a
>1a6838		c2 20 06 08 26 0a 06 08 26 0a e2 20 38 a5 08 65
>1a6848		8f 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69 00 00
>1a6858		85 0a 18 a5 08 65 c0 85 08 e2 20 a5 0a 65 c2 85
>1a6868		0a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a6878		09 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a6888		d4 08 08 20 0f 13 e2 20 a0 00 00 b7 c3 29 7f c9
>1a6898		02 d0 05 20 e3 06 80 10 c9 00 d0 05 20 51 06 80
>1a68a8		07 c9 01 d0 2b 20 bf 07 a5 27 48 c2 20 a5 25 48
>1a68b8		a5 23 48 20 a0 67 68 85 23 68 85 25 e2 20 68 85
>1a68c8		27 c2 20 a5 23 87 08 a0 02 00 a5 25 97 08 28 60
>1a68d8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a68e8		08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 08
>1a68f8		20 0f 13 f4 00 00 f4 00 00 e2 20 48 20 a0 67 e2
>1a6908		20 68 c2 20 68 68 c2 20 a7 08 85 23 a0 02 00 b7
>1a6918		08 85 25 e2 20 a0 00 00 b7 c3 29 7f 85 27 20 63
>1a6928		18 28 60 da 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a6938		c2 30 a5 25 89 f0 ff d0 29 89 0f 00 d0 0c a5 23
>1a6948		89 00 fc d0 05 20 1e 46 80 2e a2 0a 00 46 25 66
>1a6958		23 ca d0 f9 20 1e 46 e2 20 a9 4b 20 18 00 c2 20
>1a6968		80 16 a2 14 00 46 25 66 23 ca d0 f9 20 1e 46 e2
>1a6978		20 a9 4d 20 18 00 c2 20 28 2b fa 60 0b 08 c2 30
>1a6988		a9 00 00 8f b6 08 00 8f b8 08 00 e2 20 20 7e 22
>1a6998		c9 00 f0 08 20 0c 1d 20 e3 06 80 11 c2 20 a9 00
>1a69a8		00 85 23 85 25 e2 20 a9 02 85 27 c2 20 20 e5 6a
>1a69b8		22 08 11 00 b0 22 20 96 6b 08 c2 20 48 a9 00 08
>1a69c8		5b 68 28 e2 20 a9 10 8f d3 08 00 c2 20 29 ff 00
>1a69d8		20 5e 1e e2 20 dc d4 08 20 d7 03 08 c2 20 48 a9
>1a69e8		20 03 5b 68 28 e2 20 a0 00 00 b7 18 d0 03 82 a9
>1a69f8		00 c9 e5 d0 03 82 96 00 a0 0b 00 b7 18 89 08 f0
>1a6a08		03 82 a9 00 89 02 f0 03 82 83 00 29 0f c9 0f d0
>1a6a18		03 82 7a 00 a0 00 00 b7 18 20 18 00 c8 c0 08 00
>1a6a28		d0 f5 a9 20 20 18 00 a0 08 00 b7 18 20 18 00 c8
>1a6a38		c0 0b 00 d0 f5 a9 09 20 18 00 a0 0b 00 b7 18 89
>1a6a48		10 d0 1e c2 20 a0 1c 00 b7 18 8f 23 08 00 c8 c8
>1a6a58		b7 18 8f 25 08 00 e2 20 a9 00 8f 27 08 00 20 2b
>1a6a68		69 a9 09 20 18 00 a0 0b 00 b7 18 89 08 d0 1c 89
>1a6a78		01 f0 05 a9 52 20 18 00 89 04 f0 05 a9 53 20 18
>1a6a88		00 89 10 f0 05 a9 44 20 18 00 ea 20 d7 03 20 ee
>1a6a98		03 22 0c 11 00 90 03 82 41 ff 20 96 6b 08 c2 20
>1a6aa8		48 a9 00 08 5b 68 28 20 62 21 28 2b 60 08 c2 20
>1a6ab8		48 a9 20 03 5b 68 28 e2 20 29 0f c9 0f f0 cf a9
>1a6ac8		5b 20 18 00 a0 00 00 b7 18 c9 20 f0 09 20 18 00
>1a6ad8		c8 c0 08 00 d0 f1 a9 5d 20 18 00 80 ae 0b 08 08
>1a6ae8		c2 20 48 a9 20 03 5b 68 28 c2 30 a9 73 f2 85 20
>1a6af8		a9 1a 00 85 22 a0 00 00 e2 20 a9 00 97 20 c8 c0
>1a6b08		1e 00 d0 f8 c2 20 a9 73 f0 8f 81 f2 1a a9 1a 00
>1a6b18		8f 83 f2 1a af 23 08 00 8f 75 f2 1a af 25 08 00
>1a6b28		8f 77 f2 1a 28 2b 60 08 c2 30 20 3e 21 20 0c 1d
>1a6b38		20 e3 06 20 e5 6a e2 20 a9 2c 85 37 20 5f 22 b0
>1a6b48		0f c2 20 a9 ff ff 8f 54 03 00 8f 56 03 00 80 17
>1a6b58		20 1d 21 20 0c 1d 20 51 06 c2 20 a5 23 8f 54 03
>1a6b68		00 a5 25 8f 56 03 00 22 18 11 00 b0 1f 08 c2 20
>1a6b78		48 a9 00 08 5b 68 28 e2 20 a9 11 8f d3 08 00 c2
>1a6b88		20 29 ff 00 20 5e 1e e2 20 dc d4 08 28 60 8b 0b
>1a6b98		08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>1a6ba8		00 48 ab 68 28 e2 20 af 2e 03 00 85 23 a9 00 85
>1a6bb8		24 85 25 85 26 a9 00 85 27 85 ea a9 1a 85 e9 c2
>1a6bc8		20 a9 f9 6b 85 e7 20 83 53 e2 20 af 20 03 00 85
>1a6bd8		23 a9 00 85 24 85 25 85 26 a9 00 85 27 85 ea a9
>1a6be8		1a 85 e9 c2 20 a9 01 6c 85 e7 20 83 53 28 2b ab
>1a6bf8		60 44 4f 53 53 54 41 54 00 42 49 4f 53 53 54 41
>1a6c08		54 00 08 c2 30 20 3e 21 20 0c 1d 20 e3 06 a5 23
>1a6c18		8f 60 03 00 a5 25 8f 62 03 00 a9 ff ff 8f 54 03
>1a6c28		00 8f 56 03 00 22 24 11 00 b0 25 20 5e 1e 20 96
>1a6c38		6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f
>1a6c48		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a6c58		20 5e 1e 28 60 08 c2 30 20 3e 21 20 0c 1d 20 e3
>1a6c68		06 20 e5 6a a9 00 00 8f 54 03 00 a9 01 00 8f 56
>1a6c78		03 00 20 54 50 22 18 11 00 b0 22 20 96 6b 08 c2
>1a6c88		20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d3 08 00
>1a6c98		c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08 20 96 6b
>1a6ca8		c2 20 a2 12 00 18 bf 73 f2 1a 69 00 00 85 92 bf
>1a6cb8		75 f2 1a 69 01 00 85 94 e2 20 a9 00 87 92 c2 20
>1a6cc8		a9 00 00 85 7a a9 01 00 85 7c a2 00 00 e2 20 a7
>1a6cd8		7a f0 2a c9 0d f0 12 c9 0a f0 04 9d 00 4f e8 c2
>1a6ce8		20 e6 7a d0 e8 e6 7c 80 e4 e2 20 a9 00 9d 00 4f
>1a6cf8		20 8d 27 c2 20 e6 7a d0 d1 e6 7c 80 cd e0 00 00
>1a6d08		f0 0a e2 20 a9 00 9d 00 4f 20 8d 27 28 60 08 c2
>1a6d18		30 20 3e 21 20 0c 1d 20 e3 06 20 e5 6a e2 20 a9
>1a6d28		2c 20 2a 22 c2 20 20 0c 1d 20 51 06 a5 23 8f 50
>1a6d38		03 00 a5 25 8f 52 03 00 e2 20 a9 2c c2 20 20 2a
>1a6d48		22 20 0c 1d 20 51 06 a5 23 8f 58 03 00 a5 25 8f
>1a6d58		5a 03 00 22 1c 11 00 b0 22 20 96 6b 08 c2 20 48
>1a6d68		a9 00 08 5b 68 28 e2 20 a9 12 8f d3 08 00 c2 20
>1a6d78		29 ff 00 20 5e 1e e2 20 dc d4 08 20 96 6b 28 60
>1a6d88		da 5a 08 a2 00 00 a0 00 00 e2 20 b7 23 9d 00 04
>1a6d98		f0 04 e8 c8 80 f5 28 7a fa 60 08 c2 30 20 3e 21
>1a6da8		20 0c 1d 20 e3 06 20 e5 6a a9 00 00 85 a6 e2 20
>1a6db8		a9 01 85 a8 a9 20 85 b4 c2 20 a9 00 00 85 ab a9
>1a6dc8		ff ff 85 a9 c2 20 a9 00 00 85 55 85 57 a9 ff ff
>1a6dd8		85 59 a9 ff 7f 85 5b 20 8b 18 e2 20 a9 80 85 b4
>1a6de8		c2 20 c6 ab 18 a9 00 00 8f 50 03 00 65 ab 8f 58
>1a6df8		03 00 a9 01 00 8f 52 03 00 69 00 00 8f 5a 03 00
>1a6e08		22 1c 11 00 b0 22 20 96 6b 08 c2 20 48 a9 00 08
>1a6e18		5b 68 28 e2 20 a9 12 8f d3 08 00 c2 20 29 ff 00
>1a6e28		20 5e 1e e2 20 dc d4 08 20 96 6b 28 60 08 c2 30
>1a6e38		20 3e 21 20 0c 1d 20 e3 06 20 88 6d 22 04 11 00
>1a6e48		b0 22 20 96 6b 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a6e58		20 a9 13 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2
>1a6e68		20 dc d4 08 20 96 6b 28 60 da 08 e2 20 c9 61 90
>1a6e78		08 c9 7b b0 04 29 df 80 13 c9 20 90 13 a2 00 00
>1a6e88		df 9c 6e 1a f0 0a e8 e0 0f 00 d0 f4 28 38 fa 6b
>1a6e98		28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c 3d 3e 3f 5c 5b
>1a6ea8		5d 7c 22 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>1a6eb8		20 0c 1d 20 e3 06 20 88 6d 22 10 11 00 b0 22 20
>1a6ec8		96 6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 14
>1a6ed8		8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4
>1a6ee8		08 e2 20 a9 2c 20 2a 22 c2 20 20 0c 1d 20 e3 06
>1a6ef8		ad 38 03 85 08 ad 3a 03 85 0a e2 20 a2 00 00 a9
>1a6f08		20 95 7e e8 e0 0b 00 d0 f8 a2 00 00 a0 00 00 b7
>1a6f18		23 f0 76 c9 2e f0 39 22 71 6e 1a b0 1f 08 c2 20
>1a6f28		48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2
>1a6f38		20 29 ff 00 20 5e 1e e2 20 dc d4 08 95 7e c8 e8
>1a6f48		c0 08 00 d0 ca b7 23 f0 40 c9 2e f0 03 c8 80 f5
>1a6f58		c8 a2 08 00 b7 23 f0 31 22 71 6e 1a b0 22 20 96
>1a6f68		6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f
>1a6f78		d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc d4 08
>1a6f88		95 7e c8 e8 c0 0c 00 d0 cb a2 00 00 a0 00 00 b5
>1a6f98		7e 97 08 e8 c8 c0 0b 00 d0 f5 22 14 11 00 b0 22
>1a6fa8		20 96 6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a6fb8		15 8f d3 08 00 c2 20 29 ff 00 20 5e 1e e2 20 dc
>1a6fc8		d4 08 20 96 6b 28 60 08 08 c2 20 48 a9 00 08 5b
>1a6fd8		68 28 c2 30 20 0c 1d 20 e3 06 a5 23 8f 64 03 00
>1a6fe8		a5 25 8f 66 03 00 e2 20 a9 2c 20 2a 22 c2 20 20
>1a6ff8		0c 1d 20 e3 06 a5 23 8f 68 03 00 a5 25 8f 6a 03
>1a7008		00 22 30 11 00 b0 1f 08 c2 20 48 a9 00 08 5b 68
>1a7018		28 e2 20 a9 16 8f d3 08 00 c2 20 29 ff 00 20 5e
>1a7028		1e e2 20 dc d4 08 28 60 5c ed 89 1a 5c 3e 88 1a
>1a7038		5c ee 89 1a 5c 6a 79 1a 5c c7 79 1a 5c fa 78 1a
>1a7048		5c 80 78 1a 5c fd 7d 1a 5c eb 74 1a 5c 18 78 1a
>1a7058		5c d3 77 1a 5c 5d 77 1a 5c fc 88 1a 5c f9 75 1a
>1a7068		5c 49 74 1a 5c 77 89 1a 5c 27 75 1a 5c f0 89 1a
>1a7078		5c e9 89 1a 5c 16 77 1a 5c f1 89 1a 18 fb 58 5c
>1a7088		8b 70 1a c2 30 22 49 74 1a 20 08 00 20 0c 00 8b
>1a7098		e2 20 a9 00 48 ab a2 00 4f 20 65 05 ab 22 34 70
>1a70a8		1a 22 3c 70 1a 80 e2 08 8b e2 20 a9 1a 48 ab c2
>1a70b8		10 a2 c2 70 20 64 04 ab 28 6b 41 20 3c 73 74 61
>1a70c8		72 74 3e 20 3c 61 73 73 65 6d 62 6c 79 3e 0d 20
>1a70d8		20 41 73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67
>1a70e8		72 61 6d 0d 0d 43 20 3c 73 74 61 72 74 31 3e 20
>1a70f8		3c 73 74 61 72 74 32 3e 20 5b 6c 65 6e 20 28 31
>1a7108		20 69 66 20 62 6c 61 6e 6b 29 5d 0d 20 20 43 6f
>1a7118		6d 70 61 72 65 20 74 6f 20 73 65 63 74 69 6f 6e
>1a7128		73 20 6f 66 20 6d 65 6d 6f 72 79 0d 0d 44 20 3c
>1a7138		73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44
>1a7148		69 73 61 73 73 65 6d 62 6c 65 20 61 20 70 72 6f
>1a7158		67 72 61 6d 0d 0d 46 20 3c 73 74 61 72 74 3e 20
>1a7168		3c 65 6e 64 3e 20 3c 62 79 74 65 3e 0d 20 20 46
>1a7178		69 6c 6c 20 61 20 62 6c 6f 63 6b 20 6f 66 20 6d
>1a7188		65 6d 6f 72 79 20 77 69 74 68 20 61 20 62 79 74
>1a7198		65 0d 0d 47 20 5b 61 64 64 72 65 73 73 5d 0d 20
>1a71a8		20 53 74 61 72 74 20 65 78 65 63 75 74 69 6f 6e
>1a71b8		20 61 74 20 61 20 6c 6f 63 61 74 69 6f 6e 0d 0d
>1a71c8		4a 20 5b 61 64 64 72 65 73 73 5d 20 2d 20 4a 75
>1a71d8		6d 70 20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e
>1a71e8		20 69 6e 20 6d 65 6d 6f 72 79 0d 20 20 4a 75 6d
>1a71f8		70 20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20
>1a7208		69 6e 20 6d 65 6d 6f 72 79 0d 0d 48 20 3c 73 74
>1a7218		61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65
>1a7228		3e 20 5b 62 79 74 65 5d 2e 2e 0d 20 20 48 75 6e
>1a7238		74 20 66 6f 72 20 76 61 6c 75 65 73 20 69 6e 20
>1a7248		6d 65 6d 6f 72 79 0d 0d 4c 20 20 20 20 20 4c 4f
>1a7258		41 44 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>1a7268		22 20 5b 64 65 73 74 69 6e 61 74 69 6f 6e 5d 0d
>1a7278		4d 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d
>1a7288		20 20 44 75 6d 70 20 74 68 65 20 76 61 6c 75 65
>1a7298		20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 52 20 2d 20
>1a72a8		44 69 73 70 6c 61 79 20 74 68 65 20 76 61 6c 75
>1a72b8		65 73 20 6f 66 20 74 68 65 20 72 65 67 69 73 74
>1a72c8		65 72 73 0d 0d 3b 20 3c 50 43 3e 20 3c 41 3e 20
>1a72d8		3c 58 3e 20 3c 59 3e 20 3c 53 50 3e 20 3c 44 42
>1a72e8		52 3e 20 3c 44 50 3e 20 3c 4e 56 4d 58 44 49 5a
>1a72f8		43 3e 0d 20 20 43 68 61 6e 67 65 20 74 68 65 20
>1a7308		63 6f 6e 74 65 6e 74 73 20 6f 66 20 74 68 65 20
>1a7318		72 65 67 69 73 74 65 72 73 0d 0d 53 20 20 20 20
>1a7328		20 53 41 56 45 20 20 20 20 20 20 20 20 20 22 46
>1a7338		69 6c 65 22 20 3c 73 74 61 72 74 3e 20 3c 65 6e
>1a7348		64 3e 0d 54 20 3c 73 74 61 72 74 3e 20 3c 65 6e
>1a7358		64 3e 20 3c 64 65 73 74 69 6e 61 74 69 6f 6e 3e
>1a7368		0d 20 20 54 72 61 6e 73 66 65 72 20 28 63 6f 70
>1a7378		79 29 20 64 61 74 61 20 77 69 74 68 69 6e 20 6d
>1a7388		65 6d 6f 72 79 0d 0d 57 20 3c 62 79 74 65 3e 0d
>1a7398		20 20 53 65 74 20 74 68 65 20 72 65 67 69 73 74
>1a73a8		65 72 20 77 69 64 74 68 20 66 6c 61 67 73 20 66
>1a73b8		6f 72 20 74 68 65 20 64 69 73 61 73 73 65 6d 62
>1a73c8		6c 65 72 0d 0d 58 20 2d 20 52 65 74 75 72 6e 20
>1a73d8		74 6f 20 42 41 53 49 43 0d 0d 3e 20 3c 73 74 61
>1a73e8		72 74 3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65
>1a73f8		5d 2e 2e 2e 0d 20 20 45 64 69 74 20 64 61 74 61
>1a7408		20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 3f 20 2d 20
>1a7418		44 69 73 70 6c 61 79 20 61 20 73 68 6f 72 74 20
>1a7428		68 65 6c 70 20 73 63 72 65 65 6e 0d 0d 00 08 08
>1a7438		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 0d 85 4e 28
>1a7448		6b 20 3d 02 08 e2 20 48 a9 1a 48 ab 68 28 a2 2e
>1a7458		8a 20 64 04 e2 20 a9 3b 20 18 00 a9 20 20 18 00
>1a7468		c2 30 08 e2 20 48 a9 00 48 ab 68 28 a0 03 00 a2
>1a7478		42 02 20 e7 03 c2 20 a9 20 00 20 18 00 af 44 02
>1a7488		00 20 74 04 a9 20 00 20 18 00 af 46 02 00 20 74
>1a7498		04 a9 20 00 20 18 00 af 48 02 00 20 74 04 a9 20
>1a74a8		00 20 18 00 af 4a 02 00 20 74 04 a9 20 00 20 18
>1a74b8		00 af 4e 02 00 20 8e 04 a9 20 00 20 18 00 a9 20
>1a74c8		00 20 18 00 af 4c 02 00 20 74 04 a9 20 00 20 18
>1a74d8		00 08 e2 20 ad 4f 02 22 47 87 1a 28 20 d7 03 20
>1a74e8		d7 03 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28 e2
>1a74f8		20 a5 15 87 0d e2 20 a5 0f c5 13 d0 0e c2 20 a5
>1a7508		0d c5 11 d0 06 20 d7 03 2b 28 6b c2 20 18 a5 0d
>1a7518		69 01 00 85 0d e2 20 a5 0e 69 00 85 0e 80 d0 08
>1a7528		0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 0f c5
>1a7538		17 90 45 c2 20 a5 0d c5 15 90 3d e2 20 a7 0d 87
>1a7548		15 a5 0f c5 13 d0 0b c2 20 a5 0d c5 11 d0 03 4c
>1a7558		de 75 c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e
>1a7568		69 00 85 0e c2 20 18 a5 15 69 01 00 85 15 e2 20
>1a7578		a5 16 69 00 85 16 80 c3 c2 20 38 a5 11 e5 0d 85
>1a7588		19 e2 20 a5 13 e5 0f 85 1b c2 20 18 a5 19 65 15
>1a7598		85 15 e2 20 a5 1b 65 17 85 17 e2 20 a7 11 87 15
>1a75a8		a5 13 c5 0f d0 0a c2 20 a5 11 c5 0d d0 02 80 26
>1a75b8		c2 20 38 a5 11 e9 01 00 85 11 e2 20 a5 12 e9 00
>1a75c8		85 12 c2 20 38 a5 15 e9 01 00 85 15 e2 20 a5 16
>1a75d8		e9 00 85 16 80 c4 20 d7 03 2b 28 6b 08 e2 20 c9
>1a75e8		21 90 0b c9 7f 90 04 c9 a0 90 03 28 38 6b 28 18
>1a75f8		6b 08 8b 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>1a7608		a9 00 8f b6 08 00 a5 31 c9 02 b0 16 c9 01 90 20
>1a7618		c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00
>1a7628		85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12
>1a7638		c2 20 18 a5 32 69 00 01 85 11 e2 20 a5 34 69 00
>1a7648		85 13 e2 20 a0 00 00 c2 20 a5 32 85 19 e2 20 a5
>1a7658		34 85 1b e2 20 a7 19 22 e4 75 1a b0 02 a9 3f 99
>1a7668		7e 08 c2 20 18 a5 19 69 01 00 85 19 e2 20 a5 1b
>1a7678		69 00 85 1b c8 c0 08 00 90 db a9 00 99 7e 08 a9
>1a7688		3e 20 18 00 a9 20 20 18 00 e2 20 a5 34 20 8e 04
>1a7698		a9 3a 20 18 00 c2 20 a5 32 20 74 04 c2 20 a9 08
>1a76a8		00 85 47 e2 20 a9 20 20 18 00 a7 32 20 8e 04 22
>1a76b8		26 87 1a e2 20 c6 47 d0 ea a9 20 20 18 00 a9 20
>1a76c8		20 18 00 08 e2 20 48 a9 00 48 ab 68 28 a2 7e 08
>1a76d8		20 64 04 20 d7 03 20 ee 03 a5 34 c5 13 90 0f c2
>1a76e8		20 a5 32 c5 11 90 07 20 d7 03 2b ab 28 6b 4c 4a
>1a76f8		76 08 8d 92 08 e2 20 bd 00 00 99 00 00 ad 92 08
>1a7708		f0 0a c8 e8 e8 e8 e8 ce 92 08 80 eb 28 6b 08 0b
>1a7718		8b 08 c2 20 48 a9 48 08 5b 68 28 08 e2 20 48 a9
>1a7728		00 48 ab 68 28 c2 30 a5 0d 85 32 a5 0f 85 34 e2
>1a7738		20 a5 31 3a 85 47 a2 59 08 a0 7e 08 22 f9 76 1a
>1a7748		a0 00 00 b9 7e 08 87 32 22 26 87 1a c8 c4 47 d0
>1a7758		f2 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b
>1a7768		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>1a7778		a5 31 3a 3a 85 47 a2 5d 08 a0 7e 08 22 f9 76 1a
>1a7788		c2 20 a5 0d 85 32 a5 0f 85 34 c2 20 a5 34 c5 13
>1a7798		d0 06 a5 32 c5 11 f0 2c e2 20 a0 00 00 b7 32 d9
>1a77a8		7e 08 d0 1a c8 c4 47 d0 f4 c2 20 a5 32 85 4a a5
>1a77b8		34 85 4c 22 d0 81 1a e2 20 a9 20 20 18 00 22 26
>1a77c8		87 1a 80 c6 20 d7 03 ab 2b 28 6b 08 c2 20 48 a9
>1a77d8		48 08 5b 68 28 e2 20 a5 31 f0 0e c2 30 a5 0d 8f
>1a77e8		40 02 00 a5 0f 8f 42 02 00 af 46 02 00 aa af 48
>1a77f8		02 00 a8 af 4a 02 00 1b af 4c 02 00 5b e2 20 a9
>1a7808		1a 48 a9 78 48 a9 13 48 4c 4a 78 ea 5c 04 00 1a
>1a7818		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0 c9
>1a7828		c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46
>1a7838		02 00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c 02
>1a7848		00 5b e2 20 af 4e 02 00 48 ab a9 5c 8f a2 08 00
>1a7858		af 42 02 00 8f a5 08 00 af 41 02 00 8f a4 08 00
>1a7868		af 40 02 00 8f a3 08 00 af 4f 02 00 48 c2 20 af
>1a7878		44 02 00 28 5c a2 08 00 08 0b 8b 08 e2 20 48 a9
>1a7888		1a 48 ab 68 28 08 c2 20 48 a9 48 08 5b 68 28 c2
>1a7898		10 e2 20 a5 31 c9 02 f0 0c c9 03 d0 11 c2 20 a5
>1a78a8		15 85 47 80 11 c2 20 a9 01 00 85 47 80 08 a2 f2
>1a78b8		89 20 64 04 80 35 a5 0d 85 4a a5 0f 85 4c a0 00
>1a78c8		00 e2 20 a7 4a d7 11 f0 09 22 d0 81 1a a9 20 20
>1a78d8		18 00 c2 20 18 a5 4a 69 01 00 85 4a a5 4c 69 00
>1a78e8		00 85 4c c8 c4 47 d0 d9 20 d7 03 20 d7 03 ab 2b
>1a78f8		28 6b 08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08
>1a7908		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0 4f a6
>1a7918		0d 8e 40 02 a6 0f 8e 42 02 c9 01 f0 41 a6 11 8e
>1a7928		44 02 c9 02 f0 38 a6 15 8e 46 02 c9 03 f0 2f a6
>1a7938		19 8e 48 02 c9 04 f0 26 a6 1d 8e 4a 02 c9 05 f0
>1a7948		1d e2 10 a6 21 8e 4e 02 c9 06 f0 12 c2 10 a6 25
>1a7958		8e 4c 02 c9 07 f0 07 e2 10 a6 29 8e 4f 02 ab 2b
>1a7968		28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b 68 28 e2
>1a7978		20 c2 10 a2 00 00 bf 5f 8a 1a f0 18 c7 08 f0 03
>1a7988		e8 80 f3 c2 20 8a 0a aa bf a0 79 1a 8f 2f 08 00
>1a7998		22 c4 79 1a ab 2b 28 6b 40 70 48 70 4c 70 50 70
>1a79a8		54 70 58 70 5c 70 60 70 64 70 68 70 44 70 6c 70
>1a79b8		70 70 74 70 36 74 78 70 7c 70 af 70 6c 2f 08 08
>1a79c8		8b 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31
>1a79d8		c9 02 b0 03 4c 6d 7b c2 20 a5 0d 85 32 a5 0f 85
>1a79e8		34 c2 20 22 6f 7d 1a c9 ff ff f0 10 85 54 e2 20
>1a79f8		a5 31 c9 03 f0 36 a9 13 85 4f 80 4c 20 d7 03 08
>1a7a08		e2 20 48 a9 1a 48 ab 68 28 c2 10 a2 a4 7b 20 64
>1a7a18		04 4c 6d 7b 20 d7 03 08 e2 20 48 a9 1a 48 ab 68
>1a7a28		28 c2 10 a2 b3 7b 20 64 04 4c 6d 7b e2 20 22 a5
>1a7a38		7d 1a c9 ff f0 de 85 4f c9 03 f0 62 c9 0b f0 5e
>1a7a48		c9 13 f0 04 c9 08 f0 00 22 9d 7c 1a b0 03 4c 36
>1a7a58		7b 87 32 22 26 87 1a 08 e2 20 48 a9 00 48 ab 68
>1a7a68		28 c2 20 a5 32 85 56 a5 34 85 58 e2 20 a5 4f c9
>1a7a78		12 f0 6c c9 16 f0 68 c9 14 f0 7c 29 3f c9 02 d0
>1a7a88		03 4c 64 7b c2 20 29 ff 00 aa e2 20 bf 6c 86 1a
>1a7a98		c9 03 f0 57 c9 02 f0 5f c9 01 f0 67 80 71 c2 20
>1a7aa8		a5 54 c9 e4 82 f0 26 c9 48 83 f0 2a c9 c8 82 f0
>1a7ab8		1c c9 cc 82 f0 17 c9 d4 82 f0 12 c9 bc 82 f0 0d
>1a7ac8		c9 d0 82 f0 08 c9 b8 82 f0 03 4c 50 7a e2 20 a9
>1a7ad8		12 85 4f 4c 50 7a e2 20 a9 16 85 4f 4c 50 7a 22
>1a7ae8		e0 7b 1a 90 60 c9 02 f0 0e 80 18 a0 02 00 b9 98
>1a7af8		08 97 56 22 26 87 1a a0 01 00 b9 98 08 97 56 22
>1a7b08		26 87 1a a0 00 00 b9 98 08 97 56 22 26 87 1a e2
>1a7b18		20 a9 41 20 18 00 a9 20 20 18 00 a6 32 86 4a a6
>1a7b28		34 86 4c 22 d0 81 1a a9 20 20 18 00 80 37 20 d7
>1a7b38		03 08 e2 20 48 a9 1a 48 ab 68 28 c2 10 a2 71 7b
>1a7b48		20 64 04 80 20 20 d7 03 08 e2 20 48 a9 1a 48 ab
>1a7b58		68 28 c2 10 a2 c1 7b 20 64 04 80 09 a5 4f 29 c0
>1a7b68		d0 95 4c 0b 7b 2b ab 28 6b 41 64 64 72 65 73 73
>1a7b78		69 6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64 65 66
>1a7b88		69 6e 65 64 20 66 6f 72 20 74 68 61 74 20 69 6e
>1a7b98		73 74 72 75 63 74 69 6f 6e 2e 0d 00 42 61 64 20
>1a7ba8		6d 6e 65 6d 6f 6e 69 63 2e 0d 00 42 61 64 20 6f
>1a7bb8		70 65 72 61 6e 64 2e 0d 00 52 65 6c 61 74 69 76
>1a7bc8		65 20 6f 66 66 73 65 74 20 69 73 20 74 6f 6f 20
>1a7bd8		6c 61 72 67 65 2e 0d 00 08 0b 08 c2 20 48 a9 48
>1a7be8		08 5b 68 28 e2 20 a5 4f c9 12 f0 0a c2 20 18 a5
>1a7bf8		32 69 02 00 80 08 c2 20 18 a5 32 69 01 00 85 4a
>1a7c08		a5 34 69 00 00 85 4c 38 a5 50 e5 4a 85 50 a5 52
>1a7c18		e5 4c 85 52 e2 20 a5 4f c9 16 f0 1e a5 50 30 0c
>1a7c28		a5 51 d0 2a a5 52 d0 26 a9 01 80 26 a5 51 c9 ff
>1a7c38		d0 1c a5 52 c9 ff d0 16 80 18 a5 51 30 06 a5 52
>1a7c48		d0 0c 80 0e a5 52 c9 ff d0 04 a9 02 80 04 2b 28
>1a7c58		18 6b 2b 28 38 6b 08 0b c2 10 da 08 c2 20 48 a9
>1a7c68		48 08 5b 68 28 e2 20 a2 00 00 df 00 d0 1a f0 08
>1a7c78		e8 e0 10 00 f0 1b 80 f2 c2 20 06 50 26 52 06 50
>1a7c88		26 52 06 50 26 52 06 50 26 52 e2 20 8a 05 50 85
>1a7c98		50 fa 2b 28 6b 0b 8b 08 c2 20 48 a9 48 08 5b 68
>1a7ca8		28 08 e2 20 48 a9 1a 48 ab 68 28 e2 20 a5 4f 29
>1a7cb8		3f 85 4a c2 30 a2 00 00 a0 00 00 bd 6a 83 f0 1b
>1a7cc8		c5 54 d0 0d e2 20 b9 6c 85 29 3f c5 4a f0 07 c2
>1a7cd8		20 e8 e8 c8 80 e5 98 38 ab 2b 6b 18 ab 2b 6b 08
>1a7ce8		0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 c2 10 a0
>1a7cf8		00 00 64 50 64 52 b7 03 f0 11 c9 64 f0 19 48 b7
>1a7d08		36 85 4a 68 c5 4a d0 0b c8 80 eb b7 36 d0 04 2b
>1a7d18		28 38 6b 2b 28 18 6b e2 20 b7 36 c9 3a b0 04 c9
>1a7d28		30 b0 14 c9 47 b0 04 c9 41 b0 0c c9 67 b0 e4 c9
>1a7d38		61 b0 02 80 de 29 df 22 5e 7c 1a 80 cb 0b 08 c2
>1a7d48		20 48 a9 48 08 5b 68 28 a0 00 00 e2 20 b7 03 f0
>1a7d58		03 c8 80 f9 c2 20 c8 5a 68 18 65 03 85 03 a5 05
>1a7d68		69 00 00 85 05 2b 6b 0b 08 c2 20 48 a9 48 08 5b
>1a7d78		68 28 c2 20 a5 11 85 36 a5 13 85 38 a9 f8 81 85
>1a7d88		03 a9 1a 00 85 05 22 e7 7c 1a b0 0d 22 45 7d 1a
>1a7d98		a7 03 d0 f2 a9 ff ff 80 02 a5 03 2b 6b 08 0b 08
>1a7da8		c2 20 48 a9 48 08 5b 68 28 c2 30 a5 15 85 36 a5
>1a7db8		17 85 38 a9 84 86 85 03 a9 1a 00 85 05 22 e7 7c
>1a7dc8		1a b0 22 22 45 7d 1a c2 20 18 a5 03 69 01 00 85
>1a7dd8		03 a5 05 69 00 00 85 05 e2 20 a7 03 d0 df c2 20
>1a7de8		a9 ff ff 80 0d 22 45 7d 1a e2 20 a7 03 c2 20 29
>1a7df8		ff 00 2b 28 6b 08 8b 0b 08 c2 20 48 a9 48 08 5b
>1a7e08		68 28 e2 20 a9 00 8f b6 08 00 a5 31 c9 02 b0 16
>1a7e18		c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11 e2 20
>1a7e28		a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5 0f
>1a7e38		85 34 80 12 c2 20 18 a5 32 69 00 01 85 11 e2 20
>1a7e48		a5 34 69 00 85 13 22 69 7e 1a e2 20 a5 34 c5 13
>1a7e58		90 f4 c2 20 a5 32 c5 11 90 ec 20 d7 03 2b ab 28
>1a7e68		6b 08 0b e2 20 a9 41 20 18 00 a9 20 20 18 00 08
>1a7e78		c2 20 48 a9 7a 08 5b 68 28 c2 20 a5 00 85 18 e2
>1a7e88		20 a5 02 85 1a 22 d0 81 1a a9 20 20 18 00 c2 20
>1a7e98		18 a5 00 69 01 00 85 18 e2 20 a5 02 69 00 85 1a
>1a7ea8		e2 20 c2 10 a7 00 c9 c2 d0 0b 48 a7 18 49 ff 2f
>1a7eb8		96 08 00 80 0b c9 e2 d0 0c 48 a7 18 0f 96 08 00
>1a7ec8		8f 96 08 00 68 c2 20 29 ff 00 0a aa bf 6a 83 1a
>1a7ed8		aa 22 4a 81 1a e2 20 a7 00 aa bf 6c 85 1a 22 26
>1a7ee8		87 1a 22 f7 7e 1a 20 d7 03 20 ee 03 2b 28 6b 08
>1a7ef8		e2 20 48 29 3f 0a c2 10 aa 68 7c 05 7f 35 7f 50
>1a7f08		7f 57 7f 7c 7f 83 7f 9e 7f c0 7f d1 7f 0e 80 16
>1a7f18		80 27 80 38 80 3f 80 64 80 91 80 fd 7f e2 7f af
>1a7f28		7f 84 80 8e 80 a2 80 d1 80 7f 80 e2 80 a9 28 20
>1a7f38		18 00 22 f9 80 1a a9 2c 20 18 00 a9 58 20 18 00
>1a7f48		a9 29 20 18 00 4c f3 80 22 f9 80 1a 4c f3 80 e2
>1a7f58		20 48 a9 23 20 18 00 68 29 c0 c9 00 f0 0f 4a 4a
>1a7f68		2f 96 08 00 d0 07 22 03 81 1a 4c f3 80 22 f9 80
>1a7f78		1a 4c f3 80 22 03 81 1a 4c f3 80 a9 28 20 18 00
>1a7f88		22 f9 80 1a a9 29 20 18 00 a9 2c 20 18 00 a9 59
>1a7f98		20 18 00 4c f3 80 22 f9 80 1a a9 2c 20 18 00 a9
>1a7fa8		58 20 18 00 4c f3 80 22 f9 80 1a a9 2c 20 18 00
>1a7fb8		a9 59 20 18 00 4c f3 80 22 03 81 1a a9 2c 20 18
>1a7fc8		00 a9 59 20 18 00 4c f3 80 22 03 81 1a a9 2c 20
>1a7fd8		18 00 a9 58 20 18 00 4c f3 80 a9 28 20 18 00 22
>1a7fe8		03 81 1a a9 2c 20 18 00 a9 58 20 18 00 a9 29 20
>1a7ff8		18 00 4c f3 80 a9 28 20 18 00 22 f9 80 1a a9 29
>1a8008		20 18 00 4c f3 80 a9 41 20 18 00 4c f7 80 22 f9
>1a8018		80 1a a9 2c 20 18 00 a9 53 20 18 00 4c f3 80 a9
>1a8028		5b 20 18 00 22 f9 80 1a a9 5d 20 18 00 4c f3 80
>1a8038		22 11 81 1a 4c f7 80 a9 28 20 18 00 22 f9 80 1a
>1a8048		a9 2c 20 18 00 a9 53 20 18 00 a9 29 20 18 00 a9
>1a8058		2c 20 18 00 a9 59 20 18 00 4c f3 80 a9 5b 20 18
>1a8068		00 22 f9 80 1a a9 5d 20 18 00 a9 2c 20 18 00 a9
>1a8078		59 20 18 00 4c f3 80 a0 02 00 80 03 a0 01 00 22
>1a8088		77 81 1a 4c f7 80 4c f7 80 22 11 81 1a a9 2c 20
>1a8098		18 00 a9 58 20 18 00 4c f7 80 a9 23 20 18 00 8b
>1a80a8		a5 02 48 ab a6 00 e8 a0 01 00 22 e7 03 1a a9 2c
>1a80b8		20 18 00 a9 23 20 18 00 a6 00 a0 01 00 22 e7 03
>1a80c8		1a ab 22 26 87 1a 4c f3 80 a9 28 20 18 00 22 03
>1a80d8		81 1a a9 29 20 18 00 4c f3 80 a9 5b 20 18 00 22
>1a80e8		03 81 1a a9 5d 20 18 00 4c f3 80 22 26 87 1a 28
>1a80f8		6b 08 e2 20 a7 00 20 8e 04 28 6b 08 c2 30 a7 00
>1a8108		20 74 04 22 26 87 1a 28 6b 08 8b 0b c2 30 5a 08
>1a8118		c2 20 48 a9 7a 08 5b 68 28 08 e2 20 48 a9 00 48
>1a8128		ab 68 28 e2 20 a0 00 00 a7 00 99 92 08 22 26 87
>1a8138		1a c8 c0 03 00 d0 f1 22 d0 81 1a c2 30 7a 2b ab
>1a8148		28 6b 08 8b e2 20 c2 10 08 e2 20 48 a9 1a 48 ab
>1a8158		68 28 bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8
>1a8168		bd 00 00 20 18 00 e8 a9 20 20 18 00 ab 28 6b 08
>1a8178		0b 08 c2 20 48 a9 7a 08 5b 68 28 e2 20 c0 02 00
>1a8188		f0 14 a7 00 85 18 30 06 64 19 64 1a 80 1e a9 ff
>1a8198		85 19 85 1a 80 16 a7 00 85 18 22 26 87 1a a7 00
>1a81a8		85 19 30 04 64 1a 80 04 a9 ff 85 1a c2 20 38 a5
>1a81b8		00 65 18 85 18 e2 20 a5 02 65 1a 85 1a 22 d0 81
>1a81c8		1a 22 26 87 1a 2b 28 6b 08 0b c2 20 48 08 c2 20
>1a81d8		48 a9 48 08 5b 68 28 e2 20 a5 4c 20 8e 04 e2 20
>1a81e8		a9 3a 20 18 00 c2 20 a5 4a 20 74 04 68 2b 28 6b
>1a81f8		4f 52 41 00 41 4e 44 00 45 4f 52 00 41 44 43 00
>1a8208		53 54 41 00 4c 44 41 00 43 4d 50 00 53 42 43 00
>1a8218		41 53 4c 00 52 4f 4c 00 4c 53 52 00 52 4f 52 00
>1a8228		53 54 58 00 4c 44 58 00 44 45 43 00 49 4e 43 00
>1a8238		42 49 54 00 4a 4d 50 00 53 54 59 00 4c 44 59 00
>1a8248		43 50 59 00 43 50 58 00 42 52 4b 00 4a 53 52 00
>1a8258		52 54 49 00 52 54 53 00 50 48 50 00 50 4c 50 00
>1a8268		50 48 41 00 50 4c 41 00 44 45 59 00 54 41 59 00
>1a8278		49 4e 59 00 49 4e 58 00 43 4c 43 00 53 45 43 00
>1a8288		43 4c 49 00 53 45 49 00 54 59 41 00 43 4c 56 00
>1a8298		43 4c 44 00 53 45 44 00 54 58 41 00 54 58 53 00
>1a82a8		54 41 58 00 54 53 58 00 44 45 58 00 4e 4f 50 00
>1a82b8		42 50 4c 00 42 4d 49 00 42 56 43 00 42 56 53 00
>1a82c8		42 43 43 00 42 43 53 00 42 4e 45 00 42 45 51 00
>1a82d8		54 53 42 00 54 52 42 00 53 54 5a 00 42 52 41 00
>1a82e8		50 48 59 00 50 4c 59 00 50 48 58 00 50 4c 58 00
>1a82f8		50 48 44 00 50 4c 44 00 50 48 4b 00 52 54 4c 00
>1a8308		50 48 42 00 50 4c 42 00 57 41 49 00 58 42 41 00
>1a8318		54 43 53 00 54 53 43 00 54 43 44 00 54 44 43 00
>1a8328		54 58 59 00 54 59 58 00 53 54 50 00 58 43 45 00
>1a8338		43 4f 50 00 4a 53 4c 00 57 44 4d 00 50 45 52 00
>1a8348		42 52 4c 00 52 45 50 00 53 45 50 00 4d 56 50 00
>1a8358		4d 56 4e 00 50 45 49 00 50 45 41 00 4a 4d 4c 00
>1a8368		00 00 50 82 f8 81 38 83 f8 81 d8 82 f8 81 18 82
>1a8378		f8 81 60 82 f8 81 18 82 f8 82 d8 82 f8 81 18 82
>1a8388		f8 81 b8 82 f8 81 f8 81 f8 81 dc 82 f8 81 18 82
>1a8398		f8 81 80 82 f8 81 34 82 18 83 dc 82 f8 81 18 82
>1a83a8		f8 81 54 82 fc 81 3c 83 fc 81 38 82 fc 81 1c 82
>1a83b8		fc 81 64 82 fc 81 1c 82 fc 82 38 82 fc 81 1c 82
>1a83c8		fc 81 bc 82 fc 81 fc 81 fc 81 38 82 fc 81 1c 82
>1a83d8		fc 81 84 82 fc 81 30 82 1c 83 38 82 fc 81 1c 82
>1a83e8		fc 81 58 82 00 82 40 83 00 82 54 83 00 82 20 82
>1a83f8		00 82 68 82 00 82 20 82 00 83 3c 82 00 82 20 82
>1a8408		00 82 c0 82 00 82 00 82 00 82 58 83 00 82 20 82
>1a8418		00 82 88 82 00 82 e8 82 20 83 64 83 00 82 20 82
>1a8428		00 82 5c 82 04 82 44 83 04 82 e0 82 04 82 24 82
>1a8438		04 82 6c 82 04 82 24 82 04 83 3c 82 04 82 24 82
>1a8448		04 82 c4 82 04 82 04 82 04 82 e0 82 04 82 24 82
>1a8458		04 82 8c 82 04 82 ec 82 24 83 3c 82 04 82 24 82
>1a8468		04 82 e4 82 08 82 48 83 08 82 40 82 08 82 28 82
>1a8478		08 82 70 82 38 82 a0 82 08 83 40 82 08 82 28 82
>1a8488		08 82 c8 82 08 82 08 82 08 82 40 82 08 82 28 82
>1a8498		08 82 90 82 08 82 a4 82 28 83 e0 82 08 82 e0 82
>1a84a8		08 82 44 82 0c 82 2c 82 0c 82 44 82 0c 82 2c 82
>1a84b8		0c 82 74 82 0c 82 a8 82 0c 83 44 82 0c 82 2c 82
>1a84c8		0c 82 cc 82 0c 82 0c 82 0c 82 44 82 0c 82 2c 82
>1a84d8		0c 82 94 82 0c 82 ac 82 2c 83 44 82 0c 82 2c 82
>1a84e8		0c 82 48 82 10 82 4c 83 10 82 48 82 10 82 30 82
>1a84f8		10 82 78 82 10 82 b0 82 10 83 48 82 10 82 30 82
>1a8508		10 82 d0 82 10 82 10 82 10 82 5c 83 10 82 30 82
>1a8518		10 82 98 82 10 82 f0 82 30 83 64 83 10 82 30 82
>1a8528		10 82 4c 82 14 82 50 83 14 82 4c 82 14 82 34 82
>1a8538		14 82 7c 82 14 82 b4 82 14 83 4c 82 14 82 34 82
>1a8548		14 82 d4 82 14 82 14 82 14 82 60 83 14 82 34 82
>1a8558		14 82 9c 82 14 82 f4 82 34 83 54 82 14 82 34 82
>1a8568		14 82 00 00 13 00 02 09 01 01 01 0a 13 82 08 13
>1a8578		03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 08 13
>1a8588		03 07 07 0e 03 00 0b 09 01 01 01 0a 13 82 08 13
>1a8598		03 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 08 13
>1a85a8		07 07 07 0e 13 00 13 09 14 01 01 0a 13 82 08 13
>1a85b8		03 03 03 0b 12 04 0f 0c 14 05 05 0d 13 06 13 13
>1a85c8		0b 07 07 0b 13 00 16 09 01 01 01 0a 13 82 08 13
>1a85d8		15 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06 13 13
>1a85e8		10 07 07 0e 12 00 16 09 01 01 01 0a 13 82 13 13
>1a85f8		03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13
>1a8608		03 07 07 0e 82 00 42 09 01 01 01 0a 13 82 13 13
>1a8618		03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06 13 13
>1a8628		07 07 06 0e 42 00 02 09 01 01 01 0a 13 82 13 13
>1a8638		03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06 13 13
>1a8648		17 07 07 0e 42 00 02 09 01 01 01 0f 13 82 13 13
>1a8658		03 03 03 0b 12 04 0f 0c 03 05 05 0d 13 06 13 13
>1a8668		10 07 07 0e 01 01 01 02 01 01 02 02 00 01 01 03
>1a8678		01 01 03 01 02 01 01 00 02 02 02 02 41 00 08 64
>1a8688		64 3a 64 64 64 64 2c 58 00 0e 64 64 3a 64 64 64
>1a8698		64 00 0b 64 64 64 64 2c 58 00 07 64 64 64 64 2c
>1a86a8		59 00 06 64 64 64 64 00 03 64 64 2c 58 00 05 64
>1a86b8		64 2c 59 00 11 64 64 2c 53 00 09 64 64 00 01 23
>1a86c8		64 64 64 64 00 c2 23 64 64 2c 23 64 64 00 14 23
>1a86d8		64 64 00 02 28 64 64 2c 53 29 2c 59 00 0c 28 64
>1a86e8		64 64 64 2c 58 29 00 10 28 64 64 64 64 29 00 10
>1a86f8		28 64 64 2c 58 29 00 00 28 64 64 29 2c 59 00 04
>1a8708		28 64 64 29 00 0f 5b 64 64 64 64 5d 00 17 5b 64
>1a8718		64 5d 2c 59 00 0d 5b 64 64 5d 00 0a 00 00 08 c2
>1a8728		20 48 18 af 7a 08 00 69 01 00 8f 7a 08 00 e2 20
>1a8738		af 7c 08 00 69 00 8f 7c 08 00 c2 20 68 28 6b 08
>1a8748		c2 10 e2 20 da a2 08 00 0a b0 08 48 a9 30 20 18
>1a8758		00 80 06 48 a9 31 20 18 00 68 ca d0 eb fa 28 6b
>1a8768		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a7 32 f0 0a
>1a8778		c9 20 d0 06 22 26 87 1a 80 f2 6b 08 08 c2 20 48
>1a8788		a9 48 08 5b 68 28 22 26 87 1a 22 68 87 1a c2 30
>1a8798		a5 31 c2 20 29 ff 00 0a 0a aa a5 32 95 0d a5 34
>1a87a8		95 0f e2 20 a7 32 f0 14 c9 22 f0 06 22 26 87 1a
>1a87b8		80 f2 a9 00 87 32 22 26 87 1a e6 31 28 6b 08 c2
>1a87c8		20 48 a9 48 08 5b 68 28 e2 20 64 4a c2 20 64 50
>1a87d8		64 52 e2 20 a7 32 c9 3a f0 0d 20 0c 05 90 0e 22
>1a87e8		5e 7c 1a a9 01 85 4a 22 26 87 1a 80 e5 a5 4a f0
>1a87f8		16 a5 31 c2 20 29 ff 00 0a 0a aa a5 50 95 0d a5
>1a8808		52 95 0f e2 20 e6 31 6b e2 20 64 31 22 68 87 1a
>1a8818		a7 32 f0 21 c9 22 d0 06 22 83 87 1a 80 0a 22 c6
>1a8828		87 1a a5 31 c9 09 b0 0d a7 32 f0 09 c9 20 f0 dc
>1a8838		20 0c 05 b0 d7 6b 08 0b 08 c2 20 48 a9 48 08 5b
>1a8848		68 28 c2 10 e2 20 a2 31 00 74 00 ca d0 fb a9 00
>1a8858		85 02 85 34 c2 20 a9 00 4f 85 00 85 32 e2 20 22
>1a8868		68 87 1a c9 00 f0 38 c2 20 a5 32 85 08 e2 20 a5
>1a8878		34 85 0a a2 01 00 22 26 87 1a a7 32 d0 06 86 0b
>1a8888		64 31 80 1b c9 20 f0 03 e8 80 eb 86 0b a9 00 87
>1a8898		32 22 26 87 1a a7 08 c9 41 f0 07 22 10 88 1a 2b
>1a88a8		28 6b 22 68 87 1a a7 32 f0 f5 22 c6 87 1a 22 68
>1a88b8		87 1a a7 32 f0 e9 c2 20 a5 32 85 11 e2 20 a5 34
>1a88c8		85 13 22 26 87 1a a7 32 f0 26 c9 20 d0 f4 a9 00
>1a88d8		87 32 e6 31 22 26 87 1a 22 68 87 1a a7 32 f0 bf
>1a88e8		c2 20 a5 32 85 15 e2 20 a5 34 85 17 e6 31 80 af
>1a88f8		e6 31 80 ab 08 c2 10 e2 20 a5 31 d0 0f a2 f2 89
>1a8908		a9 1a 48 ab 20 64 04 20 d7 03 80 61 c2 20 a5 0d
>1a8918		8f 23 08 00 a5 0f 8f 25 08 00 20 e5 6a e2 20 a5
>1a8928		31 c9 01 d0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56
>1a8938		03 00 80 0e c2 20 a5 11 8f 54 03 00 a5 13 8f 56
>1a8948		03 00 22 18 11 00 b0 25 e2 20 a2 18 8a a9 1a 48
>1a8958		ab 20 64 04 af 2e 03 00 20 8e 04 a9 20 20 18 00
>1a8968		af 20 03 00 20 8e 04 20 d7 03 20 d7 03 28 6b 8b
>1a8978		08 c2 10 e2 20 a5 31 c9 03 f0 0f a2 f2 89 a9 1a
>1a8988		48 ab 20 64 04 20 d7 03 80 54 c2 20 a5 0d 8f 23
>1a8998		08 00 a5 0f 8f 25 08 00 20 e5 6a a5 11 8f 50 03
>1a89a8		00 a5 13 8f 52 03 00 a5 15 8f 58 03 00 a5 17 8f
>1a89b8		5a 03 00 22 1c 11 00 b0 25 e2 20 a2 02 8a a9 1a
>1a89c8		48 ab 20 64 04 af 2e 03 00 20 8e 04 a9 20 20 18
>1a89d8		00 af 20 03 00 20 8e 04 20 d7 03 20 d7 03 28 ab
>1a89e8		6b 5c c0 27 1a 6b 00 00 00 00 42 61 64 20 61 72
>1a89f8		67 75 6d 65 6e 74 73 0d 0d 00 55 6e 61 62 6c 65
>1a8a08		20 74 6f 20 73 61 76 65 20 66 69 6c 65 3a 20 00
>1a8a18		55 6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64 20 66
>1a8a28		69 6c 65 3a 20 00 0d 20 20 50 43 20 20 20 20 20
>1a8a38		41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>1a8a48		50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>1a8a58		58 44 49 5a 43 0d 00 41 43 44 46 47 4a 48 4c 4d
>1a8a68		52 3b 53 54 56 57 58 3e 3f 00 18 fb 08 c2 20 48
>1a8a78		a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>1a8a88		c2 30 20 b1 8a a9 ff fe 1b 08 e2 20 48 a9 1a 48
>1a8a98		ab 68 28 a2 77 d2 20 64 04 08 e2 20 48 a9 00 48
>1a8aa8		ab 68 28 4c c0 27 4c ae 8a 08 20 34 03 20 54 50
>1a8ab8		28 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1a8ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1106 times (17696 bytes)...
>1acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>1ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>1ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>1ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>1ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>1ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>1ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>1ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>1ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>1ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>1ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>1ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>1ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>1ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>1ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>1ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>1ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>1ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>1ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>1ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>1ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>1ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>1ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>1ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>1ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>1ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>1ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>1ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>1ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>1ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>1ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>1ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>1ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>1ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>1ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>1ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>1ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>1ad248		4f 53 00 54 41 4e 00 4c 4e 00 41 43 4f 53 00 41
>1ad258		53 49 4e 00 41 54 41 4e 00 45 58 50 00 53 51 52
>1ad268		00 49 4e 4b 45 59 00 0d 52 45 41 44 59 0d 00 43
>1ad278		32 35 36 20 46 6f 65 6e 69 78 20 42 41 53 49 43
>1ad288		38 31 36 20 76 30 2e 32 2e 30 2d 61 6c 70 68 61
>1ad298		2b 34 30 38 0d 00
>1b0000						.align 256
.1b0000						CREDITS_TEXT
>1b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>1b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>1b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>1b004f		20
>1b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>1b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>1b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>1b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>1b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>1b009f		20
>1b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b00ef		20
>1b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b013f		20
>1b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>1b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>1b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>1b0168		6e 79 20 41 6c 6c 61 69 72 65
>1b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>1b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b018a		20 20 20 20 20 20
>1b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>1b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>1b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>1b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b01da		20 20 20 20 20 20
>1b01e0		20				                .text " "
>1b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0229		20 20 20 20 20 20 20
>1b0230		20				                .text " "
>1b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0279		20 20 20 20 20 20 20
>1b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>1b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>1b0298		53 3a
>1b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>1b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>1b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>1b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>1b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>1b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b031d		20 20 20
>1b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>1b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>1b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>1b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>1b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>1b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>1b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>1b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>1b0398		75 73 68
>1b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>1b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>1b03c8		54 68 61 6e 6b 73 3a
>1b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>1b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0407		20 20 20 20 20 20 20 20 20
>1b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>1b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>1b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>1b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>1b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>1b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b045f		20
>1b0460		20				                .text " "
>1b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04a9		20 20 20 20 20 20 20
>1b04b0		20				                .text " "
>1b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04f9		20 20 20 20 20 20 20
>1b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>1b0508		45 53 20 41 55 54 48 4f 52 53 3a
>1b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>1b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b054b		20 20 20 20 20
>1b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>1b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>1b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>1b0578		63 6f 72 65 73 2e 6f 72 67
>1b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>1b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0599		20 20 20 20 20 20 20
>1b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>1b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>1b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>1b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>1b05d8		6d
>1b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>1b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>1b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>1b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>1b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>1b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>1b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>1b063b		20 20 20 20 20
>1b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>1b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>1b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>1b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>1b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b068b		20 20 20 20 20
>1b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>1b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>1b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>1b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>1b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06da		20 20 20 20 20 20
>1b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>1b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>1b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>1b0708		6a 61 64 61 20 47 6f 6d 65 7a
>1b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b072a		20 20 20 20 20 20
>1b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>1b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>1b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>1b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>1b0768		6f 6d
>1b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>1b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>1b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>1b0798		6e 69 78 20 55 29 3a 20 54 42 44
>1b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>1b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07cb		20 20 20 20 20
>1b07d0		20				                .text " "
>1b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0819		20 20 20 20 20 20 20
>1b0820		20				                .text " "
>1b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0869		20 20 20 20 20 20 20
>1b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>1b0878		54 48 41 4e 4b 53 3a
>1b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>1b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b08b7		20 20 20 20 20 20 20 20 20
>1b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>1b08c8		56 61 6e 68 61 72 65 6e
>1b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>1b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0908		20 20 20 20 20 20 20 20
>1b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>1b0918		65 77
>1b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>1b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>1b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>1b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>1b0988		65 66 65 72 65 6e 63 65 73 29
>1b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>1b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b09aa		20 20 20 20 20 20
>1b09b0		20				                .text " "
>1b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b09f9		20 20 20 20 20 20 20
>1b0a00		20				                .text " "
>1b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0a49		20 20 20 20 20 20 20
>1b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0a9f		20
>1b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>1b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>1b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>1b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>1b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>1b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>1b0aec		20 20 20 20
>1b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>1b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>1b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>1b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>1b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>1b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>1b0b3c		20 20 20 20
>1b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>1b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>1b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>1b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>1b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>1b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>1b0b8d		20 20 20
>1b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>1b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>1b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>1b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>1b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>1b0bdd		20 20 20
>1b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>1b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>1b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>1b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>1b0c2d		20 20 20
>1b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0c7f		20
>1b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>1b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c98		53 74 65 66 61 6e 79
>1b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>1b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cc7		20 20 20 20 20 20 20 20 20
>1b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>1b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>1b1768		20 20 20 20 20 20 20 20
>1b1770						.align 256
>1b1800		f4 f4 f4 f4 f4 f4 f4 f4		CREDITS_COLOR   .fill 80 * 60, $F4
>1b1808		f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4
;		...repeated 298 times (4768 bytes)...
>1b2ab8		f4 f4 f4 f4 f4 f4 f4 f4
.1e0000						BOOT_MENU
.1e0000						SplashScreenMain:
.1e0000		48		pha		                PHA             ; begin setdp macro
.1e0001		08		php		                PHP
.1e0002		c2 20		rep #$20	                REP #$20        ; set A long
.1e0004		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1e0007		5b		tcd		                TCD
.1e0008		28		plp		                PLP
.1e0009		68		pla		                PLA             ; end setdp macro
.1e000a		c2 10		rep #$10	                REP #$10        ; set X long
.1e000c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e000e		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.1e0012		a9 00		lda #$00	                LDA #$00
.1e0014		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0016		85 f1		sta $f1		                STA INTERRUPT_COUNT
.1e0018		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e001a		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.1e001e		29 04		and #$04	                AND #FNX0_INT02_TMR0
.1e0020		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.1e0024		20 ee 00	jsr $1e00ee	                JSR Splash_Get_Machine_ID
.1e0027		20 21 01	jsr $1e0121	                JSR Splash_Clear_Screen
.1e002a		20 0b 01	jsr $1e010b	                JSR Splash_Load_FontSet
.1e002d		22 08 03 1e	jsl $1e0308	                JSL Splashscreen_BitMapSetup
.1e0031		20 b5 05	jsr $1e05b5	                JSR Model_Update_Info_Field
.1e0034		20 96 05	jsr $1e0596	                JSR Set_Text_Color
.1e0037		a9 00		lda #$00	                LDA #$00
.1e0039		85 a6		sta $a6		                STA LINE_INDEX  ; Point to the first line to be displayed
.1e003b		85 a7		sta $a7		                STA LINE_INDEX + 1
.1e003d		20 3d 08	jsr $1e083d	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e0040						HAVE_FUN:
.1e0040		22 09 7a 19	jsl $197a09	                JSL BOOT_SOUND_OFF
.1e0044		22 3b 01 1e	jsl $1e013b	                JSL Splash_Moniker_Color_Rolling  ; Go Move The Colors on the Logo
.1e0048		a6 a6		ldx $a6		                LDX LINE_INDEX
.1e004a		e0 17 00	cpx #$0017	                CPX #NumberOfEntry
.1e004d		f0 08		beq $1e0057	                BEQ ByPassCharDisplay           ; If Equal all Lines have been displayed
.1e004f		20 7a 08	jsr $1e087a	                JSR Line_Display_1_Character    ; Go move the cursor one stop
.1e0052		90 21		bcc $1e0075	                BCC Still_Displaying_Char
.1e0054		20 3d 08	jsr $1e083d	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e0057						ByPassCharDisplay:
.1e0057		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0059		22 28 10 00	jsl $001028	                JSL GETSCANCODE         ; Try to get a scan code
.1e005d		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.1e005f		f0 14		beq $1e0075	                BEQ Still_Displaying_Char            ; No: keep waiting until timeout
.1e0061		c9 3b		cmp #$3b	                CMP #CHAR_F1            ; Did the user press F1?
.1e0063		f0 1f		beq $1e0084	                BEQ return              ; Yes: return it
.1e0065		c9 3c		cmp #$3c	                CMP #CHAR_F2            ; Did the user press F2?
.1e0067		f0 1b		beq $1e0084	                BEQ return              ; Yes: return it
.1e0069		c9 3d		cmp #$3d	                CMP #CHAR_F3            ; Did the user press F3?
.1e006b		f0 17		beq $1e0084	                BEQ return              ; Yes: return it
.1e006d		c9 1c		cmp #$1c	                CMP #SCAN_CR            ; Did the user press CR?
.1e006f		f0 13		beq $1e0084	                BEQ return              ; Yes: return it
.1e0071		c9 39		cmp #$39	                CMP #SCAN_SP            ; Did the user press SPACE?
.1e0073		f0 0d		beq $1e0082	                BEQ exitshere
.1e0075						Still_Displaying_Char:
.1e0075						WaitForNextSOF:
.1e0075		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0
.1e0079		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e007b		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.1e007d		d0 f6		bne $1e0075	                BNE WaitForNextSOF;
.1e007f		4c 40 00	jmp $1e0040	                JMP HAVE_FUN
.1e0082						exitshere:
.1e0082						timeout
.1e0082		a9 00		lda #$00	                LDA #0                  ; Return 0 for a timeout / SPACE
.1e0084						return
.1e0084		8f 08 00 00	sta $000008	                STA @l KRNL_BOOT_MENU_K          ; Store ther Keyboard Value
.1e0088		a9 00		lda #$00	                LDA #$00
.1e008a		8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L         ; Disable Everything
.1e008e		22 3c 05 1e	jsl $1e053c	                JSL SS_VDMA_CLEAR_MEMORY_640_480 ; Clear the Bitmap Screen
.1e0092		20 a7 00	jsr $1e00a7	                JSR VickyII_Registers_Clear      ; Reset All Vicky Registers
.1e0095		22 c0 10 00	jsl $0010c0	                JSL INITFONTSET ; Reload the Official FONT set
.1e0099		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR ; Reset the Cursor to its origin
.1e009d		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.1e00a1		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE  ; Init VICKY TextMode now contains Hi-Res Dipswitch read and Automatic Text Size Parameter adjust
.1e00a5		ea		nop		                NOP
.1e00a6		6b		rtl		                RTL
.1e00a7						VickyII_Registers_Clear:
.1e00a7		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00a9		c2 10		rep #$10	                REP #$10        ; set X long
.1e00ab		a2 00 00	ldx #$0000	                LDX #$0000
.1e00ae		a9 00		lda #$00	                LDA #$00
.1e00b0						ClearSpriteRegisters:
.1e00b0		9f 00 0c af	sta $af0c00,x	                STA @l SP00_CONTROL_REG, X
.1e00b4		e8		inx		                INX
.1e00b5		e0 00 02	cpx #$0200	                CPX #$0200
.1e00b8		d0 f6		bne $1e00b0	                BNE ClearSpriteRegisters
.1e00ba		a2 00 00	ldx #$0000	                LDX #$0000
.1e00bd		a9 00		lda #$00	                LDA #$00
.1e00bf						ClearTiles0Registers:
.1e00bf		9f 00 02 af	sta $af0200,x	                STA @l TL0_CONTROL_REG, X
.1e00c3		e8		inx		                INX
.1e00c4		e0 30 00	cpx #$0030	                CPX #$0030
.1e00c7		d0 f6		bne $1e00bf	                BNE ClearTiles0Registers
.1e00c9		ea		nop		                NOP
.1e00ca		a2 00 00	ldx #$0000	                LDX #$0000
.1e00cd		a9 00		lda #$00	                LDA #$00
.1e00cf						ClearTiles1Registers:
.1e00cf		9f 80 02 af	sta $af0280,x	                STA @l TILESET0_ADDY_L, X
.1e00d3		e8		inx		                INX
.1e00d4		e0 20 00	cpx #$0020	                CPX #$0020
.1e00d7		d0 f6		bne $1e00cf	                BNE ClearTiles1Registers
.1e00d9		ea		nop		                NOP
.1e00da		a2 00 00	ldx #$0000	                LDX #$0000
.1e00dd		a9 00		lda #$00	                LDA #$00
.1e00df						ClearBitmapRegisters:
.1e00df		9f 00 01 af	sta $af0100,x	                STA @l BM0_CONTROL_REG, X
.1e00e3		9f 08 01 af	sta $af0108,x	                STA @l BM1_CONTROL_REG, X
.1e00e7		e8		inx		                INX
.1e00e8		e0 10 00	cpx #$0010	                CPX #$0010
.1e00eb		d0 f2		bne $1e00df	                BNE ClearBitmapRegisters
.1e00ed		60		rts		                RTS
.1e00ee						Splash_Get_Machine_ID
.1e00ee		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00f0		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e00f4		29 03		and #$03	                AND #$03        ; Isolate the first 2 bits to know if it is a U or FMX
.1e00f6		85 b0		sta $b0		                STA MODEL
.1e00f8		c9 00		cmp #$00	                CMP #$00
.1e00fa		f0 0e		beq $1e010a	                BEQ DONE
.1e00fc		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e0100		29 04		and #$04	                AND #GABE_SYS_STAT_MID2 ; High 4Meg, Low - 2Megs
.1e0102		c9 04		cmp #$04	                CMP #GABE_SYS_STAT_MID2
.1e0104		f0 04		beq $1e010a	                BEQ DONE
.1e0106		a9 02		lda #$02	                LDA #$02
.1e0108		85 b0		sta $b0		                STA MODEL       ; In this Scheme 00 - FMX, 01 - U+, 02 - U
.1e010a						DONE:
.1e010a		60		rts		                RTS
.1e010b						Splash_Load_FontSet
.1e010b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e010d		c2 10		rep #$10	                REP #$10        ; set X long
.1e010f		a2 00 00	ldx #$0000	                LDX #$0000
.1e0112						DONE_LOADING_FONT:
.1e0112		bf 00 08 1f	lda $1f0800,x	                LDA @l FONT_4_SPLASH, X
.1e0116		9f 00 80 af	sta $af8000,x	                STA @l FONT_MEMORY_BANK0, X
.1e011a		e8		inx		                INX
.1e011b		e0 00 08	cpx #$0800	                CPX #2048
.1e011e		d0 f2		bne $1e0112	                BNE DONE_LOADING_FONT
.1e0120		60		rts		                RTS
.1e0121						Splash_Clear_Screen
.1e0121		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0123		c2 10		rep #$10	                REP #$10        ; set X long
.1e0125		a2 00 00	ldx #$0000	                LDX #$0000
.1e0128						Branch_Clear:
.1e0128		a9 20		lda #$20	                LDA #$20
.1e012a		9f 00 a0 af	sta $afa000,x	                STA @l CS_TEXT_MEM_PTR,X
.1e012e		a9 f0		lda #$f0	                LDA #$F0
.1e0130		9f 00 c0 af	sta $afc000,x	                STA @l CS_COLOR_MEM_PTR,X
.1e0134		e8		inx		                INX
.1e0135		e0 00 20	cpx #$2000	                CPX #$2000
.1e0138		d0 ee		bne $1e0128	                BNE Branch_Clear
.1e013a		60		rts		                RTS
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
.1e013b						Splash_Moniker_Color_Rolling
.1e013b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e013d		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.1e0141		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e0143		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.1e0147		a5 f0		lda $f0		                LDA INTERRUPT_STATE
.1e0149		c9 00		cmp #$00	                CMP #IRQ_SOF_ST0
.1e014b		f0 0c		beq $1e0159	                BEQ SERVE_STATE0
.1e014d		c9 01		cmp #$01	                CMP #IRQ_SOF_ST1
.1e014f		f0 1a		beq $1e016b	                BEQ SERVE_STATE1
.1e0151		c9 02		cmp #$02	                CMP #IRQ_SOF_ST2
.1e0153		d0 03		bne $1e0158	                BNE NOT_SERVE_STATE2
.1e0155		82 39 01	brl $1e0291	                BRL SERVE_STATE2
.1e0158						NOT_SERVE_STATE2
.1e0158		6b		rtl		                RTL
.1e0159						SERVE_STATE0
.1e0159		a5 f1		lda $f1		                LDA INTERRUPT_COUNT
.1e015b		c9 04		cmp #$04	                CMP #$04
.1e015d		f0 03		beq $1e0162	                BEQ SERVE_NEXT_STATE
.1e015f		e6 f1		inc $f1		                INC INTERRUPT_COUNT
.1e0161		6b		rtl		                RTL
.1e0162						SERVE_NEXT_STATE
.1e0162		a9 00		lda #$00	                LDA #$00
.1e0164		85 f1		sta $f1		                STA INTERRUPT_COUNT
.1e0166		a9 01		lda #$01	                LDA #IRQ_SOF_ST1
.1e0168		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e016a		6b		rtl		                RTL
.1e016b						SERVE_STATE1
.1e016b		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e016d		a9 00 00	lda #$0000	                LDA #$0000
.1e0170		a2 00 00	ldx #$0000	                LDX #$0000
.1e0173		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1e0175		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0177		bf c0 02 1e	lda $1e02c0,x	                LDA @lCOLOR_POINTER+0, X
.1e017b		aa		tax		                TAX
.1e017c		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e0180		8f e0 3f af	sta $af3fe0	                STA @lGRPH_LUT7_PTR+992
.1e0184		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0188		8f e1 3f af	sta $af3fe1	                STA @lGRPH_LUT7_PTR+993
.1e018c		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e0190		8f e2 3f af	sta $af3fe2	                STA @lGRPH_LUT7_PTR+994
.1e0194		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0196		bf c1 02 1e	lda $1e02c1,x	                LDA @lCOLOR_POINTER+1, X
.1e019a		aa		tax		                TAX
.1e019b		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e019f		8f e4 3f af	sta $af3fe4	                STA @lGRPH_LUT7_PTR+996
.1e01a3		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01a7		8f e5 3f af	sta $af3fe5	                STA @lGRPH_LUT7_PTR+997
.1e01ab		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01af		8f e6 3f af	sta $af3fe6	                STA @lGRPH_LUT7_PTR+998
.1e01b3		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01b5		bf c2 02 1e	lda $1e02c2,x	                LDA @lCOLOR_POINTER+2, X
.1e01b9		aa		tax		                TAX
.1e01ba		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01be		8f e8 3f af	sta $af3fe8	                STA @lGRPH_LUT7_PTR+1000
.1e01c2		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01c6		8f e9 3f af	sta $af3fe9	                STA @lGRPH_LUT7_PTR+1001
.1e01ca		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01ce		8f ea 3f af	sta $af3fea	                STA @lGRPH_LUT7_PTR+1002
.1e01d2		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01d4		bf c3 02 1e	lda $1e02c3,x	                LDA @lCOLOR_POINTER+3, X
.1e01d8		aa		tax		                TAX
.1e01d9		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01dd		8f ec 3f af	sta $af3fec	                STA @lGRPH_LUT7_PTR+1004
.1e01e1		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01e5		8f ed 3f af	sta $af3fed	                STA @lGRPH_LUT7_PTR+1005
.1e01e9		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01ed		8f ee 3f af	sta $af3fee	                STA @lGRPH_LUT7_PTR+1006
.1e01f1		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01f3		bf c4 02 1e	lda $1e02c4,x	                LDA @lCOLOR_POINTER+4, X
.1e01f7		aa		tax		                TAX
.1e01f8		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01fc		8f f0 3f af	sta $af3ff0	                STA @lGRPH_LUT7_PTR+1008
.1e0200		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0204		8f f1 3f af	sta $af3ff1	                STA @lGRPH_LUT7_PTR+1009
.1e0208		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e020c		8f f2 3f af	sta $af3ff2	                STA @lGRPH_LUT7_PTR+1010
.1e0210		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0212		bf c5 02 1e	lda $1e02c5,x	                LDA @lCOLOR_POINTER+5, X
.1e0216		aa		tax		                TAX
.1e0217		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e021b		8f f4 3f af	sta $af3ff4	                STA @lGRPH_LUT7_PTR+1012
.1e021f		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0223		8f f5 3f af	sta $af3ff5	                STA @lGRPH_LUT7_PTR+1013
.1e0227		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e022b		8f f6 3f af	sta $af3ff6	                STA @lGRPH_LUT7_PTR+1014
.1e022f		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0231		bf c6 02 1e	lda $1e02c6,x	                LDA @lCOLOR_POINTER+6, X
.1e0235		aa		tax		                TAX
.1e0236		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e023a		8f f8 3f af	sta $af3ff8	                STA @lGRPH_LUT7_PTR+1016
.1e023e		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0242		8f f9 3f af	sta $af3ff9	                STA @lGRPH_LUT7_PTR+1017
.1e0246		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e024a		8f fa 3f af	sta $af3ffa	                STA @lGRPH_LUT7_PTR+1018
.1e024e		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0250		bf c7 02 1e	lda $1e02c7,x	                LDA @lCOLOR_POINTER+7, X
.1e0254		aa		tax		                TAX
.1e0255		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e0259		8f fc 3f af	sta $af3ffc	                STA @lGRPH_LUT7_PTR+1020
.1e025d		8f 50 1f af	sta $af1f50	                STA @lFG_CHAR_LUT_PTR + $10           ;
.1e0261		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0265		8f fd 3f af	sta $af3ffd	                STA @lGRPH_LUT7_PTR+1021
.1e0269		8f 51 1f af	sta $af1f51	                STA @lFG_CHAR_LUT_PTR + $11            ;
.1e026d		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e0271		8f fe 3f af	sta $af3ffe	                STA @lGRPH_LUT7_PTR+1022
.1e0275		8f 52 1f af	sta $af1f52	                STA @lFG_CHAR_LUT_PTR + $12            ;
.1e0279						HERE
.1e0279		18		clc		                CLC
.1e027a		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.1e027c		69 09		adc #$09	                ADC #$09
.1e027e		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e0280		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.1e0282		c9 48		cmp #$48	                CMP #$48
.1e0284		d0 04		bne $1e028a	                BNE EXIT_COLOR_CHANGE
.1e0286		a9 00		lda #$00	                LDA #$00
.1e0288		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e028a						EXIT_COLOR_CHANGE
.1e028a		c2 10		rep #$10	                REP #$10        ; set X long
.1e028c		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e028e		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0290		6b		rtl		                RTL
.1e0291						SERVE_STATE2
.1e0291		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e0293		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0295		6b		rtl		                RTL
>1e0296						.align 16
>1e02a0		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>1e02a4		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>1e02a8		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>1e02ac		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>1e02b0		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>1e02b4		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>1e02b8		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>1e02bc		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>1e02c0		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>1e02c8		00
>1e02c9		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>1e02d1		00
>1e02d2		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>1e02da		00
>1e02db		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>1e02e3		00
>1e02e4		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>1e02ec		00
>1e02ed		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>1e02f5		00
>1e02f6		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>1e02fe		00
>1e02ff		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>1e0307		00

;******  Processing file: src/SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480
.1e0308						Splashscreen_BitMapSetup
.1e0308		e2 20		sep #$20	                SEP #$20        ; set A short
.1e030a		c2 10		rep #$10	                REP #$10        ; set X long
.1e030c		a9 0f		lda #$0f	        LDA #( Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay );
.1e030e		8f 00 00 af	sta $af0000	        STA @l MASTER_CTRL_REG_L
.1e0312		a9 00		lda #$00	        LDA #$00
.1e0314		8f 01 00 af	sta $af0001	        STA @l MASTER_CTRL_REG_H
.1e0318		a9 00		lda #$00	        LDA #$00
.1e031a		8f 00 01 af	sta $af0100	        STA @l BM0_CONTROL_REG
.1e031e		a9 0f		lda #$0f	        LDA #( BM_Enable | BM_LUT7)
.1e0320		8f 08 01 af	sta $af0108	        STA @l BM1_CONTROL_REG
.1e0324		a9 00		lda #$00	        LDA #$00
.1e0326		8f 09 01 af	sta $af0109	        STA @l BM1_START_ADDY_L
.1e032a		a9 00		lda #$00	        LDA #$00
.1e032c		8f 0a 01 af	sta $af010a	        STA @l BM1_START_ADDY_M
.1e0330		8f 0b 01 af	sta $af010b	        STA @l BM1_START_ADDY_H
.1e0334		a9 01		lda #$01	        LDA #$01
.1e0336		8f 04 00 af	sta $af0004	        STA BORDER_CTRL_REG
.1e033a		a9 08		lda #$08	        LDA #$08
.1e033c		8f 08 00 af	sta $af0008	        STA BORDER_X_SIZE
.1e0340		8f 09 00 af	sta $af0009	        STA BORDER_Y_SIZE
.1e0344		a9 80		lda #$80	        LDA #$80
.1e0346		8f 06 00 af	sta $af0006	        STA BORDER_COLOR_G
.1e034a		a9 00		lda #$00	        LDA #$00
.1e034c		8f 05 00 af	sta $af0005	        STA BORDER_COLOR_B
.1e0350		8f 07 00 af	sta $af0007	        STA BORDER_COLOR_R
.1e0354		a9 a0		lda #$a0	        LDA #$A0
.1e0356		8f 12 00 af	sta $af0012	        STA @l VKY_TXT_CURSOR_CHAR_REG
.1e035a		a9 10		lda #$10	        LDA #$10
.1e035c		8f 0e 00 af	sta $af000e	        STA @l BACKGROUND_COLOR_G
.1e0360		a9 10		lda #$10	        LDA #$10
.1e0362		8f 0f 00 af	sta $af000f	        STA @l BACKGROUND_COLOR_R
.1e0366		8f 0d 00 af	sta $af000d	        STA @l BACKGROUND_COLOR_B
.1e036a		e2 20		sep #$20	                SEP #$20        ; set A short
.1e036c		c2 10		rep #$10	                REP #$10        ; set X long
.1e036e		a2 00 00	ldx #$0000	        LDX #$0000
.1e0371						SS_LUT_BRANCH:
.1e0371		bf 00 0e 1e	lda $1e0e00,x	        LDA @l SS_MONIKER_LUT, X
.1e0375		ea		nop		        NOP
.1e0376		9f 00 3c af	sta $af3c00,x	        STA @l GRPH_LUT7_PTR, X
.1e037a		e8		inx		        INX
.1e037b		e0 00 04	cpx #$0400	        CPX #1024
.1e037e		d0 f1		bne $1e0371	        BNE SS_LUT_BRANCH
.1e0380		a9 00		lda #$00	        LDA #$00
.1e0382		8f 04 3c af	sta $af3c04	        STA @l GRPH_LUT7_PTR + 4
.1e0386		8f 05 3c af	sta $af3c05	        STA @l GRPH_LUT7_PTR + 5
.1e038a		8f 06 3c af	sta $af3c06	        STA @l GRPH_LUT7_PTR + 6
.1e038e		22 3c 05 1e	jsl $1e053c	        JSL SS_VDMA_CLEAR_MEMORY_640_480;
.1e0392		c2 20		rep #$20	                REP #$20        ; set A long
.1e0394		a9 00 12	lda #$1200	        LDA #<>SS_MONIKER      ; Set up the Source
.1e0397		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e039b		a9 00 50	lda #$5000	        LDA #<>( C256Moniker_SizeX * C256Moniker_SizeY )
.1e039e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e03a2		a9 00 00	lda #$0000	        LDA #$0000
.1e03a5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e03a9		a9 a0 78	lda #$78a0	        LDA #<>( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)    ; Set up the Source
.1e03ac		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e03b0		a9 40 01	lda #$0140	        LDA #C256Moniker_SizeX
.1e03b3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e03b7		a9 40 00	lda #$0040	        LDA #C256Moniker_SizeY
.1e03ba		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e03be		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e03c1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e03c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03c7		a9 1e		lda #$1e	        LDA #`SS_MONIKER
.1e03c9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e03cd		a9 00		lda #$00	        LDA #`( C256Moniker_SizeX * C256Moniker_SizeY )
.1e03cf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e03d3		a9 00		lda #$00	        LDA #$00
.1e03d5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e03d9		a9 00		lda #$00	        LDA #`( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)
.1e03db		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e03df		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e03e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03e5		af b0 00 00	lda $0000b0	        LDA @lMODEL
.1e03e9		29 03		and #$03	        AND #$03
.1e03eb		c9 00		cmp #$00	        CMP #$00
.1e03ed		f0 0b		beq $1e03fa	        BEQ DMA_FMX_Moniker
.1e03ef		c9 01		cmp #$01	        CMP #$01
.1e03f1		f0 5b		beq $1e044e	        BEQ DMA_UPlus_Moniker
.1e03f3		c9 02		cmp #$02	        CMP #$02
.1e03f5		d0 03		bne $1e03fa	        BNE BAD_MODEL_NUMBER
.1e03f7		82 a8 00	brl $1e04a2	        BRL DMA_U_Moniker
.1e03fa						 BAD_MODEL_NUMBER:
.1e03fa						DMA_FMX_Moniker:
.1e03fa		c2 20		rep #$20	                REP #$20        ; set A long
.1e03fc		a9 00 62	lda #$6200	        LDA #<>SS_FMX_TXT      ; Set up the Source
.1e03ff		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e0403		a9 00 32	lda #$3200	        LDA #<>( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e0406		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e040a		a9 00 00	lda #$0000	        LDA #$0000
.1e040d		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0411		a9 f0 13	lda #$13f0	        LDA #<>( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)    ; Set up the Source
.1e0414		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0418		a9 a0 00	lda #$00a0	        LDA #FMXMoniker_SizeX
.1e041b		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e041f		a9 50 00	lda #$0050	        LDA #FMXMoniker_SizeY
.1e0422		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e0426		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e0429		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e042d		e2 20		sep #$20	                SEP #$20        ; set A short
.1e042f		a9 1e		lda #$1e	        LDA #`SS_FMX_TXT
.1e0431		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0435		a9 00		lda #$00	        LDA #`( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e0437		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e043b		a9 00		lda #$00	        LDA #$00
.1e043d		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0441		a9 01		lda #$01	        LDA #`( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)
.1e0443		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e0447		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e044b		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e044e						DMA_UPlus_Moniker:
.1e044e		c2 20		rep #$20	                REP #$20        ; set A long
.1e0450		a9 00 94	lda #$9400	        LDA #<>SS_UPlus_TXT      ; Set up the Source
.1e0453		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e0457		a9 00 18	lda #$1800	        LDA #<>( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e045a		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e045e		a9 00 00	lda #$0000	        LDA #$0000
.1e0461		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0465		a9 10 14	lda #$1410	        LDA #<>( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)    ; Set up the Source
.1e0468		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e046c		a9 60 00	lda #$0060	        LDA #UPlusMoniker_SizeX
.1e046f		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e0473		a9 40 00	lda #$0040	        LDA #UPlusMoniker_SizeY
.1e0476		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e047a		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e047d		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e0481		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0483		a9 1e		lda #$1e	        LDA #`SS_UPlus_TXT
.1e0485		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0489		a9 00		lda #$00	        LDA #`( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e048b		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e048f		a9 00		lda #$00	        LDA #$00
.1e0491		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0495		a9 01		lda #$01	        LDA #`( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)
.1e0497		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e049b		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e049f		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e04a2						DMA_U_Moniker:
.1e04a2		c2 20		rep #$20	                REP #$20        ; set A long
.1e04a4		a9 00 ac	lda #$ac00	        LDA #<>SS_U_TXT      ; Set up the Source
.1e04a7		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e04ab		a9 00 10	lda #$1000	        LDA #<>( UMoniker_SizeX *UMoniker_SizeY )
.1e04ae		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e04b2		a9 00 00	lda #$0000	        LDA #$0000
.1e04b5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e04b9		a9 20 14	lda #$1420	        LDA #<>( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)    ; Set up the Source
.1e04bc		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e04c0		a9 40 00	lda #$0040	        LDA #UMoniker_SizeX
.1e04c3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e04c7		a9 40 00	lda #$0040	        LDA #UMoniker_SizeY
.1e04ca		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e04ce		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e04d1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e04d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04d7		a9 1e		lda #$1e	        LDA #`SS_U_TXT
.1e04d9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e04dd		a9 00		lda #$00	        LDA #`( UMoniker_SizeX * UMoniker_SizeY )
.1e04df		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e04e3		a9 00		lda #$00	        LDA #$00
.1e04e5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e04e9		a9 01		lda #$01	        LDA #`( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)
.1e04eb		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e04ef		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e04f3		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e04f6						Done_DMA_Model_Moniker
.1e04f6		6b		rtl		        RTL
.1e04f7						SS_VDMA_SETUP_2_TRANSFER_IMAGE
.1e04f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04f9		a9 11		lda #$11	        LDA #( SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src )
.1e04fb		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e04ff		a9 13		lda #$13	        LDA #( VDMA_CTRL_Enable |  VDMA_CTRL_SysRAM_Src | VDMA_CTRL_1D_2D )
.1e0501		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0505		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0507		af 00 04 af	lda $af0400	        LDA @l VDMA_CONTROL_REG
.1e050b		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e050d		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0511		af 20 04 af	lda $af0420	        LDA @l SDMA_CTRL_REG0
.1e0515		09 80		ora #$80	        ORA #SDMA_CTRL0_Start_TRF
.1e0517		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e051b		ea		nop		        NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e051c		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e051d		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e051e		ea		nop		        NOP
.1e051f		ea		nop		        NOP
.1e0520		ea		nop		        NOP
.1e0521		ea		nop		        NOP
.1e0522		ea		nop		        NOP
.1e0523		ea		nop		        NOP
.1e0524		ea		nop		        NOP
.1e0525		a9 00		lda #$00	        LDA #$00
.1e0527		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e052b						NOTFINISHED:
.1e052b		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e052f		29 80		and #$80	        AND #$80
.1e0531		c9 80		cmp #$80	        CMP #$80
.1e0533		f0 f6		beq $1e052b	        BEQ NOTFINISHED
.1e0535		a9 00		lda #$00	        LDA #$00
.1e0537		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e053b		6b		rtl		        RTL
.1e053c						SS_VDMA_CLEAR_MEMORY_640_480
.1e053c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e053e		a9 05		lda #$05	        LDA #( VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill )
.1e0540		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0544		a9 00		lda #$00	        LDA #$00
.1e0546		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e054a		c2 20		rep #$20	                REP #$20        ; set A long
.1e054c		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e054f		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0553		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0555		a9 00		lda #$00	        LDA #$00
.1e0557		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e055b		c2 20		rep #$20	                REP #$20        ; set A long
.1e055d		a9 00 b0	lda #$b000	        LDA #<>(640*480)
.1e0560		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e0564		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0566		a9 04		lda #$04	        LDA #`(640*480)
.1e0568		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e056c		a9 00		lda #$00	        LDA #$00
.1e056e		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0572		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e0576		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e0578		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e057c		ea		nop		         NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e057d		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e057e		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e057f		ea		nop		        NOP
.1e0580		ea		nop		        NOP
.1e0581		ea		nop		        NOP
.1e0582		ea		nop		        NOP
.1e0583		ea		nop		        NOP
.1e0584						SS_VDMA_CLR_LOOPA:
.1e0584		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e0588		29 80		and #$80	        AND #$80
.1e058a		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e058c		f0 f6		beq $1e0584	        BEQ SS_VDMA_CLR_LOOPA
.1e058e		ea		nop		        NOP
.1e058f		a9 00		lda #$00	        LDA #$00
.1e0591		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0595		6b		rtl		        RTL

;******  Return to file: src/kernel.asm


;******  Processing file: src/SplashScreenCode/Splashscreen_Text_Display.asm

=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
.1e0596						Set_Text_Color:
.1e0596		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e0598		a9 00 00	lda #$0000	            LDA #00
.1e059b		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e059d		a9 30 00	lda #$0030	            LDA #48
.1e05a0		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e05a2		20 96 08	jsr $1e0896	            JSR Line_Display_Compute_Pointer
.1e05a5		a0 00 00	ldy #$0000	            LDY #$0000
.1e05a8		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05aa		a9 40		lda #$40	            LDA #$40
.1e05ac						SetColorBranch:
.1e05ac		97 a8		sta [$a8],y	            STA [COLOR_DST_PTR_L],Y
.1e05ae		c8		iny		            INY
.1e05af		c0 50 00	cpy #$0050	            CPY #80
.1e05b2		d0 f8		bne $1e05ac	            BNE SetColorBranch
.1e05b4		60		rts		            RTS
.1e05b5						Model_Update_Info_Field:
.1e05b5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e05b7		a9 00 00	lda #$0000	            LDA #$0000
.1e05ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05bc		a5 b0		lda $b0		            LDA MODEL
.1e05be		0a		asl a		            ASL
.1e05bf		0a		asl a		            ASL
.1e05c0		aa		tax		            TAX
.1e05c1		c2 20		rep #$20	                REP #$20        ; set A long
.1e05c3		bf 49 0c 1e	lda $1e0c49,x	            LDA MODEL_TABLE, X
.1e05c7		85 a0		sta $a0		            STA MOD_SELECT_L
.1e05c9		bf 4b 0c 1e	lda $1e0c4b,x	            LDA MODEL_TABLE + 2, X
.1e05cd		85 a2		sta $a2		            STA MOD_SELECT_H
.1e05cf		a0 00 00	ldy #$0000	            LDY #$0000
.1e05d2		84 a6		sty $a6		            STY LINE_INDEX
.1e05d4						Next_Change_Here:
.1e05d4		c2 20		rep #$20	                REP #$20        ; set A long
.1e05d6		a4 a6		ldy $a6		            LDY LINE_INDEX
.1e05d8		bb		tyx		            TYX
.1e05d9		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e05db		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e05dd		bf 99 0c 1e	lda $1e0c99,x	            LDA LINE_MOD, X
.1e05e1		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e05e3		c8		iny		            INY
.1e05e4		c8		iny		            INY
.1e05e5		bb		tyx		            TYX
.1e05e6		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e05e8		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e05ea		bf 99 0c 1e	lda $1e0c99,x	            LDA LINE_MOD, X
.1e05ee		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e05f0		c8		iny		            INY
.1e05f1		c8		iny		            INY
.1e05f2		84 a6		sty $a6		            STY LINE_INDEX
.1e05f4		c0 10 00	cpy #$0010	            CPY #16
.1e05f7		f0 10		beq $1e0609	            BEQ LetsMoveOn
.1e05f9		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05fb		a0 00 00	ldy #$0000	            LDY #$0000
.1e05fe						nextchar:
.1e05fe		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e0600		c9 00		cmp #$00	            CMP #$00
.1e0602		f0 d0		beq $1e05d4	            BEQ Next_Change_Here
.1e0604		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0606		c8		iny		            INY
.1e0607		80 f5		bra $1e05fe	            BRA nextchar
.1e0609						LetsMoveOn:
.1e0609		af a5 0c 1e	lda $1e0ca5	            LDA LINE_MOD + 12
.1e060d		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e060f		a0 00 00	ldy #$0000	            LDY #$0000
.1e0612		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0614		af 05 e8 af	lda $afe805	            LDA @lREVOFPCB_C
.1e0618		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e061a		c8		iny		            INY
.1e061b		af 06 e8 af	lda $afe806	            LDA @lREVOFPCB_4
.1e061f		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0621		c8		iny		            INY
.1e0622		af 07 e8 af	lda $afe807	            LDA @lREVOFPCB_A
.1e0626		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0628		18		clc		            CLC
.1e0629		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR   ; it is in BCD
.1e062d		20 90 07	jsr $1e0790	            JSR HighNibblerBCD
.1e0630		8f 74 0a 1e	sta $1e0a74	            STA @lLINE8 + 56    ; FAT VICKY in U/U+ Model
.1e0634		8f ad 0a 1e	sta $1e0aad	            STA @lLINE9 + 47    ; GABE in FMX
.1e0638		8f f3 0a 1e	sta $1e0af3	            STA @lLINE10 + 51   ; VICKY II in FMX
.1e063c		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR
.1e0640		29 0f		and #$0f	            AND #$0F
.1e0642		69 30		adc #$30	            ADC #$30
.1e0644		8f 75 0a 1e	sta $1e0a75	            STA @lLINE8 + 57    ; FAT VICKY in U/U+ Model
.1e0648		8f ae 0a 1e	sta $1e0aae	            STA @lLINE9 + 48    ; GABE in FMX
.1e064c		8f f4 0a 1e	sta $1e0af4	            STA @lLINE10 + 52   ; VICKY II in FMX
.1e0650		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR   ; it is in BCD
.1e0654		20 90 07	jsr $1e0790	            JSR HighNibblerBCD
.1e0657		8f 77 0a 1e	sta $1e0a77	            STA @lLINE8 + 59    ; FAT VICKY in U/U+ Model
.1e065b		8f b0 0a 1e	sta $1e0ab0	            STA @lLINE9 + 50    ; GABE in FMX
.1e065f		8f f6 0a 1e	sta $1e0af6	            STA @lLINE10 + 54   ; VICKY II in FMX
.1e0663		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR
.1e0667		29 0f		and #$0f	            AND #$0F
.1e0669		69 30		adc #$30	            ADC #$30
.1e066b		8f 78 0a 1e	sta $1e0a78	            STA @lLINE8 + 60    ; FAT VICKY in U/U+ Model
.1e066f		8f b1 0a 1e	sta $1e0ab1	            STA @lLINE9 + 51    ; GABE in FMX
.1e0673		8f f7 0a 1e	sta $1e0af7	            STA @lLINE10 + 55   ; VICKY II in FMX
.1e0677		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR   ; it is in BCD
.1e067b		20 90 07	jsr $1e0790	            JSR HighNibblerBCD
.1e067e		8f 7a 0a 1e	sta $1e0a7a	            STA @lLINE8 + 62    ; FAT VICKY in U/U+ Model
.1e0682		8f b3 0a 1e	sta $1e0ab3	            STA @lLINE9 + 53    ; GABE in FMX
.1e0686		8f f9 0a 1e	sta $1e0af9	            STA @lLINE10 + 57   ; VICKY II in FMX
.1e068a		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR
.1e068e		29 0f		and #$0f	            AND #$0F
.1e0690		69 30		adc #$30	            ADC #$30
.1e0692		8f 7b 0a 1e	sta $1e0a7b	            STA @lLINE8 + 63    ; FAT VICKY in U/U+ Model
.1e0696		8f b4 0a 1e	sta $1e0ab4	            STA @lLINE9 + 54    ; GABE in FMX
.1e069a		8f fa 0a 1e	sta $1e0afa	            STA @lLINE10 + 58   ; VICKY II in FMX
.1e069e		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e06a2		20 90 07	jsr $1e0790	            JSR HighNibblerBCD
.1e06a5		8f 6a 0a 1e	sta $1e0a6a	            STA @lLINE8 + 46    ; U/U+
.1e06a9		8f a3 0a 1e	sta $1e0aa3	            STA @lLINE9 + 37    ; When FMX, this is the Info for GABE
.1e06ad		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e06b1		29 0f		and #$0f	            AND #$0F
.1e06b3		69 30		adc #$30	            ADC #$30
.1e06b5		8f 6b 0a 1e	sta $1e0a6b	            STA @lLINE8 + 47
.1e06b9		8f a4 0a 1e	sta $1e0aa4	            STA @lLINE9 + 38    ; When FMX, this is the Info for GABE
.1e06bd		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e06c1		20 90 07	jsr $1e0790	            JSR HighNibblerBCD
.1e06c4		8f e9 0a 1e	sta $1e0ae9	            STA @lLINE10 + 41    ; When FMX, this is the Info for GABE
.1e06c8		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e06cc		29 0f		and #$0f	            AND #$0F
.1e06ce		69 30		adc #$30	            ADC #$30
.1e06d0		8f ea 0a 1e	sta $1e0aea	            STA @lLINE10 + 42    ; When FMX, this is the Info for GABE
.1e06d4		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e06d8		20 90 07	jsr $1e0790	            JSR HighNibblerBCD
.1e06db		8f 6c 0a 1e	sta $1e0a6c	            STA @lLINE8 + 48
.1e06df		8f a5 0a 1e	sta $1e0aa5	            STA @lLINE9 + 39    ; When FMX, this is the Info for GABE
.1e06e3		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e06e7		29 0f		and #$0f	            AND #$0F
.1e06e9		69 30		adc #$30	            ADC #$30
.1e06eb		8f 6d 0a 1e	sta $1e0a6d	            STA @lLINE8 + 49
.1e06ef		8f a6 0a 1e	sta $1e0aa6	            STA @lLINE9 + 40    ; When FMX, this is the Info for GABE
.1e06f3		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e06f7		20 90 07	jsr $1e0790	            JSR HighNibblerBCD
.1e06fa		8f eb 0a 1e	sta $1e0aeb	            STA @lLINE10 + 43    ; When FMX, this is the Info for GABE
.1e06fe		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e0702		29 0f		and #$0f	            AND #$0F
.1e0704		69 30		adc #$30	            ADC #$30
.1e0706		8f ec 0a 1e	sta $1e0aec	            STA @lLINE10 + 44    ; When FMX, this is the Info for GABE
.1e070a		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e070e		20 90 07	jsr $1e0790	            JSR HighNibblerBCD
.1e0711		8f 5e 0a 1e	sta $1e0a5e	            STA @lLINE8 + 34
.1e0715		8f 97 0a 1e	sta $1e0a97	            STA @lLINE9 + 25    ; When FMX, this is the Info for GABE
.1e0719		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e071d		29 0f		and #$0f	            AND #$0F
.1e071f		69 30		adc #$30	            ADC #$30
.1e0721		8f 5f 0a 1e	sta $1e0a5f	            STA @lLINE8 + 35
.1e0725		8f 98 0a 1e	sta $1e0a98	            STA @lLINE9 + 26    ; When FMX, this is the Info for GABE
.1e0729		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e072d		20 90 07	jsr $1e0790	            JSR HighNibblerBCD
.1e0730		8f de 0a 1e	sta $1e0ade	            STA @lLINE10 + 30    ; When FMX, this is the Info for GABE
.1e0734		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e0738		29 0f		and #$0f	            AND #$0F
.1e073a		69 30		adc #$30	            ADC #$30
.1e073c		8f df 0a 1e	sta $1e0adf	            STA @lLINE10 + 31    ; When FMX, this is the Info for GABE
.1e0740		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e0744		20 90 07	jsr $1e0790	            JSR HighNibblerBCD
.1e0747		8f 60 0a 1e	sta $1e0a60	            STA @lLINE8 + 36
.1e074b		8f 99 0a 1e	sta $1e0a99	            STA @lLINE9 + 27    ; When FMX, this is the Info for GABE
.1e074f		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e0753		29 0f		and #$0f	            AND #$0F
.1e0755		69 30		adc #$30	            ADC #$30
.1e0757		8f 61 0a 1e	sta $1e0a61	            STA @lLINE8 + 37
.1e075b		8f 9a 0a 1e	sta $1e0a9a	            STA @lLINE9 + 28    ; When FMX, this is the Info for GABE
.1e075f		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e0763		20 90 07	jsr $1e0790	            JSR HighNibblerBCD
.1e0766		8f e0 0a 1e	sta $1e0ae0	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e076a		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e076e		29 0f		and #$0f	            AND #$0F
.1e0770		69 30		adc #$30	            ADC #$30
.1e0772		8f e0 0a 1e	sta $1e0ae0	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e0776		20 e9 07	jsr $1e07e9	            JSR GODETECTHIRES ; Dip-Switch and Change Text
.1e0779		20 0a 08	jsr $1e080a	            JSR GODETECTHDD   ; Dip-Switch and Change Text
.1e077c		20 0b 08	jsr $1e080b	            JSR GODETECTEXP   ; Go Check if there is a Card Change Text
.1e077f		a5 b0		lda $b0		            LDA MODEL
.1e0781		29 03		and #$03	            AND #$03
.1e0783		c9 00		cmp #$00	            CMP #$00
.1e0785		f0 12		beq $1e0799	            BEQ Erase_FATVicky_Line;
.1e0787		c9 01		cmp #$01	            CMP #$01
.1e0789		f0 29		beq $1e07b4	            BEQ Erase_2Lines;
.1e078b		c9 02		cmp #$02	            CMP #$02
.1e078d		f0 25		beq $1e07b4	            BEQ Erase_2Lines;
.1e078f		60		rts		            RTS
.1e0790						HighNibblerBCD:
.1e0790		29 f0		and #$f0	            AND #$F0
.1e0792		4a		lsr a		            LSR A
.1e0793		4a		lsr a		            LSR A
.1e0794		4a		lsr a		            LSR A
.1e0795		4a		lsr a		            LSR A
.1e0796		69 30		adc #$30	            ADC #$30
.1e0798		60		rts		            RTS
.1e0799						Erase_FATVicky_Line:
.1e0799		c2 20		rep #$20	                REP #$20        ; set A long
.1e079b		a9 3c 0a	lda #$0a3c	            LDA #<>LINE8
.1e079e		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e07a0		a9 1e 00	lda #$001e	            LDA #`LINE8
.1e07a3		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e07a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e07a7		a0 00 00	ldy #$0000	            LDY #$0000
.1e07aa		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e07ac		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e07ae		c8		iny		            INY
.1e07af		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e07b1		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e07b3		60		rts		            RTS
.1e07b4						Erase_2Lines
.1e07b4		c2 20		rep #$20	                REP #$20        ; set A long
.1e07b6		a9 7e 0a	lda #$0a7e	            LDA #<>LINE9
.1e07b9		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e07bb		a9 1e 00	lda #$001e	            LDA #`LINE9
.1e07be		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e07c0		e2 20		sep #$20	                SEP #$20        ; set A short
.1e07c2		a0 00 00	ldy #$0000	            LDY #$0000
.1e07c5		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e07c7		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e07c9		c8		iny		            INY
.1e07ca		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e07cc		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e07ce		c2 20		rep #$20	                REP #$20        ; set A long
.1e07d0		a9 c0 0a	lda #$0ac0	            LDA #<>LINE10
.1e07d3		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e07d5		a9 1e 00	lda #$001e	            LDA #`LINE10
.1e07d8		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e07da		e2 20		sep #$20	                SEP #$20        ; set A short
.1e07dc		a0 00 00	ldy #$0000	            LDY #$0000
.1e07df		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e07e1		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e07e3		c8		iny		            INY
.1e07e4		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e07e6		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e07e8		60		rts		            RTS
.1e07e9						GODETECTHIRES
.1e07e9		e2 20		sep #$20	                SEP #$20        ; set A short
.1e07eb		af 02 00 af	lda $af0002	            LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.1e07ef		29 10		and #$10	            AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.1e07f1		c9 10		cmp #$10	            CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.1e07f3		f0 14		beq $1e0809	            BEQ WeAreDone
.1e07f5		c2 10		rep #$10	                REP #$10        ; set X long
.1e07f7		a2 00 00	ldx #$0000	            LDX #$0000
.1e07fa						ChangeNextChar
.1e07fa		bf f9 0c 1e	lda $1e0cf9,x	            LDA @l ON_TEXT, X
.1e07fe		c9 00		cmp #$00	            CMP #$00
.1e0800		f0 07		beq $1e0809	            BEQ WeAreDone
.1e0802		9f ed 0b 1e	sta $1e0bed,x	            STA @l LINE17 +13, X
.1e0806		e8		inx		            INX
.1e0807		d0 f1		bne $1e07fa	            BNE ChangeNextChar
.1e0809						WeAreDone
.1e0809						NoExpansionCardPresent
.1e0809		60		rts		            RTS
.1e080a						GODETECTHDD
.1e080a		60		rts		            RTS
.1e080b						GODETECTEXP
.1e080b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e080d		af 87 e8 af	lda $afe887	            LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.1e0811		29 10		and #$10	            AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.1e0813		c9 10		cmp #$10	            CMP #GABE_SYS_STAT_EXP
.1e0815		d0 25		bne $1e083c	            BNE NoExpansionCardPresent
.1e0817		c2 10		rep #$10	                REP #$10        ; set X long
.1e0819		a2 00 00	ldx #$0000	            LDX #$0000
.1e081c						ChangeNextChar
.1e081c		bf fd 0c 1e	lda $1e0cfd,x	            LDA @l YES_TEXT, X
.1e0820		c9 00		cmp #$00	            CMP #$00
.1e0822		f0 07		beq $1e082b	            BEQ WeAreDone
.1e0824		9f 1f 0c 1e	sta $1e0c1f,x	            STA @l LINE19 +26, X
.1e0828		e8		inx		            INX
.1e0829		d0 f1		bne $1e081c	            BNE ChangeNextChar
.1e082b						WeAreDone
.1e082b		a2 00 00	ldx #$0000	            LDX #$0000
.1e082e						AddCardName
.1e082e		bf 00 00 ae	lda $ae0000,x	            LDA @l EVID_ID_NAME_ASCII, X
.1e0832		9f 23 0c 1e	sta $1e0c23,x	            STA @l LINE20, X
.1e0836		e8		inx		            INX
.1e0837		e0 10 00	cpx #$0010	            CPX #$10
.1e083a		d0 f2		bne $1e082e	            BNE AddCardName
.1e083c						NoExpansionCardPresent
.1e083c		60		rts		            RTS
.1e083d						Line_Setup_Before_Display
.1e083d		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e083f		a5 a6		lda $a6		            LDA LINE_INDEX
.1e0841		c9 17 00	cmp #$0017	            CMP #NumberOfEntry
.1e0844		f0 33		beq $1e0879	            BEQ DONE
.1e0846		a5 a6		lda $a6		            LDA LINE_INDEX
.1e0848		0a		asl a		            ASL A
.1e0849		0a		asl a		            ASL A
.1e084a		aa		tax		            TAX
.1e084b		bf be 08 1e	lda $1e08be,x	            LDA TEXT_TABLE, X
.1e084f		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e0851		bf c0 08 1e	lda $1e08c0,x	            LDA TEXT_TABLE + 2, X
.1e0855		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e0857		a5 a6		lda $a6		            LDA LINE_INDEX
.1e0859		0a		asl a		            ASL A
.1e085a		aa		tax		            TAX
.1e085b		bf 1a 09 1e	lda $1e091a,x	            LDA TEXT_POSX, X
.1e085f		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e0861		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e0865		bf 48 09 1e	lda $1e0948,x	            LDA TEXT_POSY, X
.1e0869		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e086b		8f 16 00 af	sta $af0016	            STA @l VKY_TXT_CURSOR_Y_REG_L
.1e086f		20 96 08	jsr $1e0896	            JSR Line_Display_Compute_Pointer
.1e0872		a9 00 00	lda #$0000	            LDA #$0000
.1e0875		85 a0		sta $a0		            STA TEXT_INDEX
.1e0877		e6 a6		inc $a6		            INC LINE_INDEX
.1e0879						DONE:
.1e0879		60		rts		            RTS
.1e087a						Line_Display_1_Character
.1e087a		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e087c		e6 a2		inc $a2		            INC TEXT_CURSOR_X       ; Always put the Cursor In Front of the "To be displayed Char"
.1e087e		a5 a2		lda $a2		            LDA TEXT_CURSOR_X
.1e0880		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e0884		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0886		38		sec		            SEC
.1e0887		a4 a0		ldy $a0		            LDY TEXT_INDEX
.1e0889		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e088b		c9 00		cmp #$00	            CMP #$00
.1e088d		f0 06		beq $1e0895	            BEQ WE_ARE_DONE;
.1e088f		18		clc		            CLC
.1e0890		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0892		c8		iny		            INY
.1e0893		84 a0		sty $a0		            STY TEXT_INDEX
.1e0895						WE_ARE_DONE:
.1e0895		60		rts		            RTS
.1e0896						Line_Display_Compute_Pointer
.1e0896		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e0898		a5 a4		lda $a4		            LDA TEXT_CURSOR_Y
.1e089a		8f 00 01 00	sta $000100	            STA @lUNSIGNED_MULT_A_LO
.1e089e		a9 50 00	lda #$0050	            LDA #80
.1e08a1		8f 02 01 00	sta $000102	            STA @lUNSIGNED_MULT_B_LO
.1e08a5		18		clc		            CLC
.1e08a6		af 04 01 00	lda $000104	            LDA @lUNSIGNED_MULT_AL_LO
.1e08aa		65 a2		adc $a2		            ADC TEXT_CURSOR_X
.1e08ac		69 00 a0	adc #$a000	            ADC #$A000
.1e08af		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e08b1		69 00 20	adc #$2000	            ADC #$2000
.1e08b4		85 a8		sta $a8		            STA COLOR_DST_PTR_L
.1e08b6		a9 af 00	lda #$00af	            LDA #$00AF
.1e08b9		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e08bb		85 aa		sta $aa		            STA COLOR_DST_PTR_H
.1e08bd		60		rts		            RTS
>1e08be		76 09 1e 00 97 09 1e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>1e08c6		ad 09 1e 00 bb 09 1e 00 d3 09 1e 00 f6 09 1e 00
>1e08d6		1a 0a 1e 00 2f 0a 1e 00
>1e08de		3c 0a 1e 00 7e 0a 1e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>1e08e6		c0 0a 1e 00 02 0b 1e 00 0c 0b 1e 00 35 0b 1e 00
>1e08f6		6c 0b 1e 00 8f 0b 1e 00
>1e08fe		a1 0b 1e 00 e0 0b 1e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>1e0906		f2 0b 1e 00 05 0c 1e 00 23 0c 1e 00 34 0c 1e 00
>1e0916		47 0c 1e 00
>1e091a		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>1e0922		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>1e0932		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>1e0942		2d 00 1e 00 48 00
>1e0948		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>1e0950		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>1e0960		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>1e0970		35 00 39 00 39 00
=6						leftAlign = 6
>1e0976		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>1e097e		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>1e098e		20 20 20 20 20 20 20 20 00
>1e0997		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>1e099f		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>1e09ad		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>1e09b5		4e 46 4f 3a 20 00
>1e09bb		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>1e09c3		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>1e09d3		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>1e09db		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>1e09eb		20 20 20 20 20 20 20 20 20 20 00
>1e09f6		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>1e09fe		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>1e0a0e		20 20 20 20 20 20 20 20 20 20 20 00
>1e0a1a		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>1e0a22		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>1e0a2f		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>1e0a37		53 29 3a 20 00
>1e0a3c		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>1e0a44		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>1e0a54		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>1e0a64		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>1e0a74		30 30 2f 30 30 2f 30 30 20 00
>1e0a7e		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533 - GABE - REV:0000 SUBREV:0000 DATE:00/00/00          ", $00
>1e0a86		35 33 33 20 2d 20 47 41 42 45 20 2d 20 52 45 56
>1e0a96		3a 30 30 30 30 20 53 55 42 52 45 56 3a 30 30 30
>1e0aa6		30 20 44 41 54 45 3a 30 30 2f 30 30 2f 30 30 20
>1e0ab6		20 20 20 20 20 20 20 20 20 00
>1e0ac0		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551 - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00      ", $00
>1e0ac8		35 35 31 20 2d 20 56 49 43 4b 59 20 49 49 20 2d
>1e0ad8		20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45 56
>1e0ae8		3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30 30
>1e0af8		2f 30 30 20 20 20 20 20 20 00
>1e0b02		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>1e0b0a		20 00
>1e0b0c		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>1e0b14		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>1e0b24		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>1e0b34		00
>1e0b35		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>1e0b3d		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>1e0b4d		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>1e0b5d		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>1e0b6c		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>1e0b74		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>1e0b84		4c 20 54 52 45 4d 42 4c 41 59 00
>1e0b8f		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>1e0b97		20 4d 45 4e 55 2d 2d 2d 2d 00
>1e0ba1		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>1e0ba9		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>1e0bb9		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>1e0bc9		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>1e0bd9		46 41 55 4c 54 20 00
>1e0be0		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>1e0be8		4f 44 45 3a 20 4f 46 46 20 00
>1e0bf2		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>1e0bfa		41 4c 4c 45 44 3a 20 2d 2d 20 00
>1e0c05		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>1e0c0d		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>1e0c1d		3a 20 4e 4f 20 00
>1e0c23		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1e0c2b		00 00 00 00 00 00 00 00 00
>1e0c34		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>1e0c3c		46 4f 45 4e 49 58 2e 43 4f 4d 00
>1e0c47		20 00				LINE22 .text " ", $00
>1e0c49		59 0c 1e 00 69 0c 1e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>1e0c51		79 0c 1e 00 89 0c 1e 00
>1e0c59		a9 0c 1e 00 e9 0c 1e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>1e0c61		e9 0c 1e 00 00 00 00 00
>1e0c69		b9 0c 1e 00 e9 0c 1e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>1e0c71		d9 0c 1e 00 00 00 00 00
>1e0c79		c9 0c 1e 00 d9 0c 1e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>1e0c81		d9 0c 1e 00 00 00 00 00
>1e0c89		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>1e0c91		00 00 00 00 00 00 00 00
>1e0c99		86 09 1e 00 e5 09 1e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>1e0ca1		09 0a 1e 00 28 0a 1e 00
>1e0ca9		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>1e0cb1		4e 49 58 20 46 4d 58 00
>1e0cb9		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>1e0cc1		4e 49 58 20 55 2b 20 00
>1e0cc9		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>1e0cd1		4e 49 58 20 55 20 20 00
>1e0cd9		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>1e0ce1		32 20 42 59 54 45 53 00
>1e0ce9		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>1e0cf1		34 20 42 59 54 45 53 00
>1e0cf9		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>1e0cfd		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src/kernel.asm

>1e0d01						.align 256
.1e0e00						SS_MONIKER_LUT
>1e0e00		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>1e0e08		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>1e0e18		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>1e0e28		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>1e0e38		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>1e0e48		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>1e0e58		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>1e0e68		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>1e0e78		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>1e0e88		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>1e0e98		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>1e0ea8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>1e0eb8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>1e0ec8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>1e0ed8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>1e0ee8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>1e0ef8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>1e0f08		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>1e0f18		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>1e0f28		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>1e0f38		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>1e0f48		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>1e0f58		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>1e0f68		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>1e0f78		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>1e0f88		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>1e0f98		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>1e0fa8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>1e0fb8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>1e0fc8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>1e0fd8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>1e0fe8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>1e0ff8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>1e1008		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>1e1018		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>1e1028		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>1e1038		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>1e1048		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>1e1058		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>1e1068		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>1e1078		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>1e1088		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>1e1098		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>1e10a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>1e10b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>1e10c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>1e10d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>1e10e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>1e10f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>1e1108		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>1e1118		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>1e1128		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>1e1138		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>1e1148		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>1e1158		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>1e1168		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>1e1178		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>1e1188		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>1e1198		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>1e11a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>1e11b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>1e11c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>1e11d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>1e11e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>1e11f8		ff ff ff 00 e5 80 80 00
.1e1200						SS_MONIKER
>1e1200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>1e1208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>1e1808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e1818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e1828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e1958		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e1968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1a98		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>1e1aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1bd8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1d08		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1d18		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>1e1d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1e48		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1e58		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1f88		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e1f98		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e20c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e20d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e20e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2128		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>1e2138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2208		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>1e2218		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e2228		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2268		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e2278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2348		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e2358		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e23a8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e23b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2488		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2498		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e24a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e24e8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e24f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e25c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e25d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e25e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2628		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>1e2638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2668		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>1e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e2708		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2718		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2738		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2768		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>1e2778		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e2788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2798		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>1e27a8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e27b8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e27c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e27d8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>1e27e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e2848		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2868		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e28a8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>1e28b8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>1e28c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e28d8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>1e28e8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>1e28f8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2918		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>1e2928		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e2938		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e2948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2958		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>1e2968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2978		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>1e2988		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>1e29b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>1e29e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>1e29f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1e2a08		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>1e2a18		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>1e2a28		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>1e2a38		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e2a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2a58		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>1e2a68		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>1e2a78		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>1e2a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2a98		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>1e2aa8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>1e2ac8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>1e2ad8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>1e2ae8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>1e2af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b18		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2b28		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>1e2b38		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e2b48		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2b58		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e2b68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2b78		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2b98		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ba8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>1e2bb8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>1e2bc8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>1e2bd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2be8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>1e2bf8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2c08		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c18		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>1e2c28		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>1e2c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c58		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2c68		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c78		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2c88		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2c98		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>1e2ca8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e2cb8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2cc8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>1e2cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ce8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>1e2cf8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e2d08		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>1e2d18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2d28		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>1e2d38		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2d48		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2d58		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>1e2d68		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>1e2d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2d98		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2da8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2db8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2dc8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e2dd8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e2de8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e2df8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2e08		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e28		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>1e2e38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e48		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e68		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2e78		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>1e2e88		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2e98		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2ea8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>1e2eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1e2ed8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ee8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2ef8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e2f08		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f18		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>1e2f28		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f38		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2f48		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>1e2f88		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f98		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2fa8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2fb8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>1e2fc8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2fd8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2fe8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>1e2ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3008		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>1e3018		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3028		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e3038		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e3048		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3058		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>1e3068		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>1e3078		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3088		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e3098		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e30a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>1e30b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>1e30c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e30d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>1e30e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>1e30f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e3108		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>1e3118		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>1e3128		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>1e3138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3148		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e3158		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e3168		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3178		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3198		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e31a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e31b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e31c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e31d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>1e31e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>1e31f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>1e3208		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e3218		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>1e3228		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3238		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3248		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3258		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>1e3268		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3288		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3298		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e32a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e32b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>1e32d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e32e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3308		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>1e3318		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>1e3328		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3338		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>1e3348		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3358		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e3368		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3378		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3388		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>1e3398		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>1e33a8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e33b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e33c8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e33d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e33e8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>1e33f8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3408		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>1e3418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3428		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3448		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>1e3458		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>1e3468		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>1e3478		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>1e3488		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3498		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e34a8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e34b8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e34c8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e34d8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>1e34e8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e34f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3508		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3518		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>1e3528		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>1e3538		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3548		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e3558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e3568		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3588		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e3598		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e35a8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e35b8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e35c8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e35d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e35e8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e35f8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>1e3608		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e3618		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>1e3628		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3648		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3658		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>1e3668		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>1e3678		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3688		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>1e3698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e36a8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e36b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e36c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e36d8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e36e8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e36f8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3708		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3728		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3738		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e3748		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3758		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3768		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e3778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3788		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3798		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>1e37a8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>1e37b8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e37c8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e37d8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e37e8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>1e37f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3808		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e3818		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e3828		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3838		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3848		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3858		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e3868		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3878		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3888		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3898		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e38a8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e38b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e38c8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e38d8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>1e38e8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>1e38f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3908		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3918		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3928		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>1e3938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3948		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3958		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>1e3968		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>1e3978		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3988		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3998		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e39a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e39b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>1e39c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e39d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e39e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>1e39f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a08		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3a18		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e3a28		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3a38		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>1e3a48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a58		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>1e3a68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a78		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a88		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3a98		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>1e3aa8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3ab8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3ac8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3ad8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>1e3ae8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3af8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3b08		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e3b18		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3b28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e3b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e3b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b68		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3b78		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>1e3b88		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3b98		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>1e3ba8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3bb8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3bc8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>1e3bd8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>1e3be8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3bf8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3c08		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3c18		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3c28		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e3c38		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>1e3c48		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3c58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3c68		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e3c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3c88		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>1e3c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ca8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e3cb8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3cc8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cd8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3ce8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cf8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3d08		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>1e3d18		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>1e3d28		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d38		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3d48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3d58		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>1e3d68		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3d78		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>1e3d88		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d98		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3da8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3dc8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>1e3dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3de8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3df8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3e08		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>1e3e18		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3e28		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e38		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e3e48		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e58		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>1e3e68		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3e78		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3e88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e98		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e3ea8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3eb8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3ec8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3ed8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3ee8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f08		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f28		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3f38		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e3f48		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>1e3f58		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>1e3f68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f78		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e3f88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f98		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>1e3fa8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3fd8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>1e3fe8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>1e3ff8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e4008		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e4018		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e4028		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4048		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4068		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e4078		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4088		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e4098		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e40a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>1e40b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>1e40c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e40d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e40e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e40f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>1e4108		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>1e4118		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4128		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>1e4138		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4148		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4158		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4188		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>1e41b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>1e41e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4208		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4218		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4228		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4238		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>1e4248		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1e4258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4268		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>1e4278		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>1e4288		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4298		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e42a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e42d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1e42f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4308		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e4318		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4328		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e4338		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4348		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e4358		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4368		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4378		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>1e4388		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e43a8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e43b8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e43c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e43d8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e43e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e43f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4408		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4428		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4448		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e4458		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e4478		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4488		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1e4498		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e44a8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e44b8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e44c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e44d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e44e8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e44f8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e4508		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1e4518		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4528		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4548		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4558		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4568		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1e4578		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>1e4588		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>1e4598		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e45a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e45b8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e45c8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e45d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e45e8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e45f8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e4608		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4618		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4628		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4638		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>1e4648		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4658		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4668		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4688		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4698		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>1e46a8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e46b8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>1e46c8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e46d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e46e8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e46f8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4708		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e4718		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4728		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>1e4738		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>1e4748		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1e4758		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>1e4768		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4778		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4788		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>1e4798		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e47a8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e47b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e47c8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e47d8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>1e47e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e47f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1e4808		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4818		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4828		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4848		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4868		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>1e4878		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>1e4888		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>1e4898		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>1e48a8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e48b8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>1e48c8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e48d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1e48e8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e48f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4908		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4918		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4928		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4938		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4948		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4958		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4968		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>1e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4988		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e49a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>1e49b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>1e49c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>1e49d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>1e49e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e49f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4a08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>1e4a18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>1e4a28		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4a48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4a58		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>1e4a88		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a98		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4aa8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ac8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4ae8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4af8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1e4b08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b28		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4b38		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4b48		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4b58		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>1e4b68		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4b88		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4b98		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ba8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>1e4bd8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4be8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4c08		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4c28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c38		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>1e4c48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c68		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4c88		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e4c98		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4ca8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4cc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>1e4cd8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ce8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4cf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4d18		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d48		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d68		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d78		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>1e4d88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d98		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>1e4da8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4db8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4dc8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4dd8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4de8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>1e4df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4e08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>1e4e18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>1e4e28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e38		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>1e4e58		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>1e4e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4e88		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ea8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4eb8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ec8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ed8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4ee8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ef8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e4f08		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4f18		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4f28		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4f38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f58		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>1e4f68		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f78		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>1e4f98		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>1e4fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fc8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e4fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fe8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4ff8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5018		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>1e5028		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5038		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>1e5048		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e5058		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5068		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e5078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5088		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5098		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>1e50a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>1e50b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e50c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>1e50d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e50e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>1e50f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5108		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5128		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5138		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5148		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>1e5158		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>1e5168		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>1e5178		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>1e5188		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>1e5198		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e51a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e51d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>1e51e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>1e51f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5208		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5218		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>1e5228		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e5238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5248		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5268		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>1e5278		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5288		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>1e5298		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>1e52a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e52b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>1e52c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>1e52d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e52e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e52f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5308		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5318		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>1e5328		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>1e5338		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>1e5348		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5358		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>1e5368		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5388		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>1e5398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53a8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e53b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e53c8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e53d8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>1e53e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53f8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>1e5408		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>1e5418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e5428		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5448		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5458		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5468		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e5478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>1e54a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54c8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>1e54d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e5508		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5518		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>1e5528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5538		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e5548		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>1e5558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e5568		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5588		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>1e5598		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55a8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e5608		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>1e5618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5658		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>1e5668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5678		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e5688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56a8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56c8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>1e56d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>1e5748		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5798		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e57a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e57c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57e8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e5888		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>1e5898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e58d8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>1e58e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5928		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e59c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e59d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5a18		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>1e5a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>1e5b08		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>1e5c48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>1e61f8		00 00 00 00 00 00 00 00
.1e6200						SS_FMX_TXT
>1e6200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>1e6208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>1e64b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e64c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6558		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e65f8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6698		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e66a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e66f8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e6708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6738		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e6748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e6798		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e67a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e67d8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e67e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6838		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6878		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e6888		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e68c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e68d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e68e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6918		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>1e6928		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6968		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>1e6978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e69b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e69c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6a08		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>1e6a18		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a48		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a58		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6a68		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6aa8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>1e6ab8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ae8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6af8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6b08		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b28		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b48		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>1e6b58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b88		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b98		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>1e6ba8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6bc8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6be8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>1e6bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e6c28		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>1e6c38		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>1e6c48		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>1e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>1e6c68		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>1e6c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c88		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>1e6c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6cb8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>1e6cc8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>1e6cd8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>1e6ce8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e6d08		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>1e6d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d28		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>1e6d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d58		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>1e6d68		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6d78		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6d88		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6d98		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>1e6da8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>1e6db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6dc8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>1e6dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6de8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e6df8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e08		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e18		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6e28		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6e38		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>1e6e48		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>1e6e58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e68		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e88		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>1e6e98		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ea8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6eb8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>1e6ec8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6ed8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e6ee8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6ef8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6f08		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6f28		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>1e6f38		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f48		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f58		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>1e6f68		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6f78		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e6f88		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6f98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e6fa8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>1e6fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6fc8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>1e6fd8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6fe8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ff8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>1e7008		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e7018		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7028		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e7038		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e7048		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>1e7058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7068		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>1e7078		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7088		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7098		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>1e70a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e70b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>1e70c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e70d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>1e70e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>1e70f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7108		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>1e7118		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7128		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>1e7138		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>1e7148		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7158		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>1e7168		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e7178		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>1e7188		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>1e7198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e71a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>1e71b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e71c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>1e71d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e71e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e71f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>1e7208		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7218		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e7228		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7248		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7258		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e7268		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>1e7278		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7288		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7298		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e72a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>1e72b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e72c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e72d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7308		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e7318		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7328		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7338		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7348		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7358		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7368		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e7378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7388		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7398		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e73a8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e73b8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73c8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e73d8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e73e8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73f8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e7408		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>1e7418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7438		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7448		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7458		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7468		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>1e7478		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7488		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7498		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e74a8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e74b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e74e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74f8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7508		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>1e7518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7528		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7548		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e7558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7578		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>1e7588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7598		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e75a8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>1e75b8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75c8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e75d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75e8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e75f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7618		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e7628		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7638		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7648		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>1e7658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7668		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7678		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7688		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76b8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e76c8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>1e76d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e76e8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e76f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7708		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e7718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7758		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7768		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7778		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e7788		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7798		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e77a8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e77b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e77c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e77f8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7808		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7818		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7828		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7838		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7848		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7858		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7888		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>1e7898		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e78b8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e78c8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e78e8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e78f8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7928		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>1e7938		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7948		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>1e7958		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7968		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7978		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7988		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7998		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e79a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e79d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e79e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e79f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7a08		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a18		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7a28		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e7a38		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e7a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7a68		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a78		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a88		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>1e7a98		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7aa8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7ab8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7ac8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>1e7ad8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7af8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7b08		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b18		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b28		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7b38		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7b48		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7b58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7b68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e7b78		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ba8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>1e7bb8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>1e7bc8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7bd8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7be8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7bf8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7c08		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e7c18		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c48		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e7c58		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7c78		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c88		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>1e7c98		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7ca8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e7cb8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e7cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ce8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>1e7cf8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7d18		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d28		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>1e7d38		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e7d58		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d88		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>1e7d98		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7db8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7dc8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>1e7dd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7de8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7df8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e28		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>1e7e38		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7e58		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e68		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>1e7e78		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e88		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7e98		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ec8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7ed8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7ef8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7f08		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>1e7f18		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7f28		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7f38		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f68		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7f78		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7f88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7f98		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7fb8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7fd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8008		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8018		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e8038		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e8048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8058		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>1e8068		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e8078		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e8088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e80a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e80b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>1e8108		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>1e8118		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e8128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8148		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8158		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8168		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8178		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8188		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8198		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e81a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>1e81b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e81c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e81f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8208		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8218		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8228		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8238		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e8248		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8258		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8288		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8298		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e82e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e82f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e8308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8328		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8338		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8348		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8358		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8368		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8378		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>1e8388		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e8398		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e83a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83c8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e83d8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e83e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e83f8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>1e8408		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8418		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e8428		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e8438		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e8448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8478		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8488		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8498		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e84a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e84b8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e84c8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e84d8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e84e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e84f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8508		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e8518		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8528		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8538		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8548		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8558		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e8568		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8578		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e8588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85a8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e85b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85c8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e85d8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85e8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e85f8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>1e8608		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8618		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>1e8628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8648		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8658		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8668		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>1e8678		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8688		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e8698		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>1e86a8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e86b8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e86c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86e8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e86f8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8708		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>1e8718		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8728		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8738		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>1e8748		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8758		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8788		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8798		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87a8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87c8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e87d8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>1e87e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87f8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>1e8808		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8828		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8848		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e8858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8868		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8878		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>1e8888		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8898		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>1e88a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88c8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>1e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e88f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8908		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8918		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>1e8928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8938		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>1e8948		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8968		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>1e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e89a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e89b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>1e89e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a08		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>1e8a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8a48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a78		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>1e8a88		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8aa8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>1e8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8ae8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>1e8af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b18		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>1e8b28		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b48		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>1e8b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8b88		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e8b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bb8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>1e8bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8be8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>1e8bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8c28		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>1e8c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c58		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>1e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c88		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>1e8c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8cc8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8cf8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>1e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d28		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>1e8d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8d68		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d98		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1e8da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8dc8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8e08		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e8e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e38		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>1e8e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8ea8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>1e8eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ed8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e8ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8f48		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>1e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f78		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>1e8f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8fe8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>1e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e9028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e9088		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>1e9098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e90c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9128		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e9138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e91c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e91d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e9268		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>1e93f8		00 00 00 00 00 00 00 00
.1e9400						SS_UPlus_TXT
>1e9400		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>1e9408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>1e94f8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9558		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e95b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e95c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9618		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9668		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>1e9678		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e96c8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>1e96d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9728		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>1e9738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9788		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>1e9798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e97e8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>1e97f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9848		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>1e9858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e98a8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>1e98b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e98e8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>1e98f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9908		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e9948		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>1e9958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9968		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e99a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>1e99b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e99d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>1e99e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a08		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>1e9a18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a28		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e9a38		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a68		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9a78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9a88		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9a98		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>1e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ac8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9ad8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9ae8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9af8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>1e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9b48		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9b58		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e9b68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b88		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9ba8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9bb8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e9bc8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9be8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e9bf8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c08		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c18		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c28		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c48		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1e9c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c68		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c78		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ca8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9cb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9cc8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9cd8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e9ce8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d08		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9d18		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9d28		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9d38		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e9d48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d68		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9d78		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9d88		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e9d98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9da8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9dc8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9dd8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9de8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e9df8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e28		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e38		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e9e48		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e9e58		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>1e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e88		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e98		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e9ea8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9eb8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>1e9ec8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>1e9ed8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ee8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9ef8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f08		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9f18		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e9f28		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>1e9f38		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9f48		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9f58		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e9f78		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e9f88		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>1e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fa8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e9fc8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fd8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e9fe8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea008		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1ea018		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1ea028		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>1ea038		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea048		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>1ea058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea068		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea078		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1ea088		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>1ea098		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea0a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>1ea0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea0c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea0d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1ea0e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>1ea0f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea108		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1ea118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea128		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea138		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1ea148		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea158		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea168		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea188		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea198		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1ea1a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>1ea1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea1e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea1f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea208		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea218		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea228		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>1ea238		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea248		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea258		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea268		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea278		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>1ea288		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea298		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea2a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea2b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea2c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea2d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>1ea2e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea308		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea318		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1ea328		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>1ea338		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1ea348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea368		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea378		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea388		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>1ea398		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea3a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea3b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1ea3c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1ea3d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea3e8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea3f8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea418		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea428		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>1ea438		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea458		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea478		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea488		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1ea498		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea4a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea4b8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea4c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea4d8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea4e8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>1ea4f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1ea508		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea518		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea538		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea548		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>1ea558		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1ea568		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea578		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea598		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea5a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1ea5b8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1ea5c8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1ea5d8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea608		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea618		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1ea628		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea638		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea658		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea668		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea678		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1ea688		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea698		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea6c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea6d8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>1ea6e8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>1ea6f8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea718		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea728		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea738		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>1ea748		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea758		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea778		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea788		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea798		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1ea7a8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea7b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea7e8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea7f8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1ea808		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea858		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea868		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1ea878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1ea8a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea8b8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8c8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>1ea8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea918		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea928		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea968		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>1ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea988		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea9c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>1ea9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea9e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaa28		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>1eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>1eabf8		00 00 00 00 00 00 00 00
.1eac00						SS_U_TXT
>1eac00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>1eac08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>1eacb8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eacc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eacf8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ead38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1ead78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eada8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>1eadb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eade8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>1eadf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae28		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>1eae38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae68		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>1eae78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaea8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>1eaeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaee8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>1eaef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaf28		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>1eaf38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf48		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>1eaf58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf68		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eaf78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf88		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>1eaf98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafa8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eafb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafc8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>1eafd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafe8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eaff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb008		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>1eb018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb028		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eb038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb048		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb068		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb088		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb0a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb0c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb0e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb108		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb128		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb148		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1eb158		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb168		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>1eb198		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb1a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb1c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb1d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb1e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb208		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb218		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb228		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb248		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb258		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb268		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1eb278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb288		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb298		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb2a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1eb2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb2c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb2d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1eb2e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1eb2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb308		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb318		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1eb328		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb348		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb358		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb368		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb388		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb398		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb3a8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb3c8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb3d8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb3e8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb408		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1eb418		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb428		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb448		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb458		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1eb468		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb488		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb498		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1eb4a8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb4c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb4d8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1eb4e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb508		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb518		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1eb528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb538		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb548		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb558		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb578		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb588		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb598		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb5c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb5d8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb608		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1eb618		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1eb628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb638		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb648		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1eb658		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb678		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1eb688		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>1eb698		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb6c8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1eb6d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb6e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb708		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>1eb718		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb738		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb748		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>1eb758		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1eb768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb778		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb788		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>1eb798		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1eb7a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb7c8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>1eb7d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1eb7e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb808		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb818		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1eb828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb838		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb848		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb858		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1eb868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb878		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb888		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb898		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>1eb8a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8b8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb8c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb8d8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1eb8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8f8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb918		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb938		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb948		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb958		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb978		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb988		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb998		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1eb9c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb9d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1eba08		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1eba18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eba48		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>1eba58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eba88		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>1eba98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ebac8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1ebad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1ebbf8		00 00 00 00 00 00 00 00
.1f0000						FONT_4_BANK0
>1f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>1f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>1f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>1f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>1f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>1f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>1f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>1f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>1f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>1f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>1f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>1f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>1f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>1f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>1f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>1f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>1f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>1f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>1f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>1f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>1f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>1f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>1f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>1f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>1f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>1f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>1f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>1f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>1f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>1f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>1f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>1f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>1f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>1f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>1f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>1f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>1f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>1f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>1f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>1f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>1f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>1f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>1f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>1f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>1f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>1f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>1f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>1f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>1f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>1f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>1f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>1f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>1f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>1f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>1f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>1f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>1f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>1f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>1f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>1f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>1f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>1f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>1f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>1f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>1f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>1f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>1f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>1f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>1f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>1f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>1f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>1f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>1f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>1f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>1f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>1f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>1f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>1f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>1f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>1f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>1f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>1f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>1f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>1f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>1f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>1f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>1f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>1f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>1f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>1f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>1f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>1f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>1f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>1f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>1f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>1f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>1f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>1f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>1f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>1f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>1f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>1f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>1f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>1f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>1f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>1f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>1f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>1f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>1f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>1f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>1f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>1f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>1f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>1f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>1f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>1f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>1f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>1f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>1f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>1f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>1f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>1f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>1f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>1f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>1f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>1f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>1f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>1f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>1f07f8		00 00 00 00 00 00 00 00
.1f0800						FONT_4_SPLASH
>1f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>1f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>1f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>1f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>1f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>1f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>1f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>1f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>1f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>1f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>1f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>1f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>1f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>1f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>1f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>1f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>1f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>1f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>1f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>1f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>1f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>1f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>1f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>1f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>1f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>1f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>1f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>1f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>1f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>1f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>1f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>1f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>1f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>1f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>1f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>1f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>1f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>1f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>1f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>1f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>1f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>1f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>1f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>1f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>1f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>1f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>1f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>1f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>1f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>1f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>1f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>1f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>1f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>1f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>1f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>1f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>1f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>1f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>1f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>1f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>1f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>1f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>1f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>1f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>1f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>1f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>1f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>1f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>1f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>1f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>1f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>1f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>1f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>1f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>1f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>1f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>1f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>1f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>1f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>1f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>1f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>1f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>1f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>1f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>1f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>1f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>1f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>1f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>1f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>1f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>1f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>1f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>1f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>1f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>1f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>1f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>1f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>1f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>1f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>1f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>1f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>1f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>1f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>1f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>1f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>1f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>1f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>1f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>1f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>1f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>1f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>1f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>1f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>1f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>1f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>1f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>1f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>1f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>1f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>1f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>1f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>1f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>1f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>1f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>1f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>1f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>1f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>1f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>1f0ff8		0f 0f 0f 0f f0 f0 f0 00
>1fffff		ff				                .byte $FF               ; Last byte of flash data

;******  End of listing
