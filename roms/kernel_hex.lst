
; 64tass Turbo Assembler Macro V1.56.2625? listing file
; 64tass --m65816 --long-address --flat --intel-hex -o kernel.hex --list kernel_hex.lst --labels=kernel_hex.lbl kernel.asm
; Sat Jun  5 10:50:08 2021

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: kernel.asm


;******  Processing file: macros_inc.asm


;******  Return to file: kernel.asm


;******  Processing file: simulator_inc.asm


;******  Return to file: kernel.asm


;******  Processing file: page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;2 Bytes Color of next character to be printed to the screen.
=$000020				CURATTR          = $000020 ;2 Bytes Attribute of next character to be printed to the screen.
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000d0				KERNEL_TEMP      = $0000D0 ;32 Bytes Temp space for kernel
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000108				DIVIDER_0        = $000108 ;0 Byte  Unsigned divider
=$000108				D0_OPERAND_A     = $000108 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00010a				D0_OPERAND_B     = $00010A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00010c				D0_RESULT        = $00010C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00010e				D0_REMAINDER     = $00010E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000110				DIVIDER_1        = $000110 ;0 Byte  Signed divider
=$000110				D1_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$000112				D1_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in A/B
=$000114				D1_RESULT        = $000114 ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D1_REMAINDER     = $000116 ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$01					FNX0_INT00_ALLONE = $01  ; Not Used - Always 1
=$02					FNX0_INT01_SOF    = $02  ;Start of Frame @ 60FPS
=$04					FNX0_INT02_SOL    = $04  ;Start of Line (Programmable)
=$08					FNX0_INT03_TMR0   = $08  ;Timer 0 Interrupt
=$10					FNX0_INT04_TMR1   = $10  ;Timer 1 Interrupt
=$20					FNX0_INT05_TMR2   = $20  ;Timer 2 Interrupt
=$40					FNX0_INT06_RTC    = $40  ;Real-Time Clock Interrupt
=$80					FNX0_INT07_FDC    = $80  ;Floppy Disk Controller
=$01					FNX1_INT00_KBD    = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0    = $02  ;Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1    = $04  ;Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2   = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1   = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401 = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT    = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD = $80  ;SD Card Controller Interrupt
=$01					FNX2_INT00_OPL2R  = $01  ;OPl2 Right Channel
=$02					FNX2_INT01_OPL2L  = $02  ;OPL2 Left Channel
=$04					FNX2_INT02_BTX_INT= $04  ;Beatrix Interrupt (TBD)
=$08					FNX2_INT03_SDMA   = $08  ;System DMA
=$10					FNX2_INT04_VDMA   = $10  ;Video DMA
=$20					FNX2_INT05_DACHP  = $20  ;DAC Hot Plug
=$40					FNX2_INT06_EXT    = $40  ;External Expansion
=$80					FNX2_INT07_ALLONE = $80  ; Not Used - Always 1
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$0001ff				VECTOR_STATE     = $0001FF ;1 Byte  Interrupt Vector State. See VECTOR_STATE_ENUM
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000320				SDOS_BLOCK_BEGIN = $000320 ;
=$000324				SDOS_LOAD_ADDY   = $000324 ; 4 Bytes (Uses 3 Only)
=$000328				SDOS_FILE_SIZE   = $000328 ;
=$00032c				SDOS_BYTE_NUMBER = $00032C ; Number of Byte to Read or Write before changing the Pointer
=$000330				SDOS_REG_WR32_AD = $000330 ; 4 Bytes (Used to read and Write Values in/from CH376S)
=$000334				SDOS_BYTE_PTR    = $000334
=$000380				SDOS_FILE_NAME   = $000380 ; // Max of 128 Chars
=$000400				SDOS_BLK_BEGIN   = $000400 ; 512 Bytes to Store SD Card Incoming or Outcoming Block
=$0006ff				SDOS_BLK_END     = $0006FF ;
=$000e00				STEF_BLOB_BEGIN  = $000E00 ; Temp Buffer for Testing
=$000eff				STEF_BLOB_END    = $000EFF ;
=$000f00				KEY_BUFFER       = $000F00 ;64 Bytes keyboard buffer
=$40					KEY_BUFFER_SIZE  = $40 ;64 Bytes (constant) keyboard buffer length
=$000f3f				KEY_BUFFER_END   = $000F3F ;1 Byte  Last byte of keyboard buffer
=$000f40				KEY_BUFFER_RPOS  = $000F40 ;2 Bytes keyboard buffer read position
=$000f42				KEY_BUFFER_WPOS  = $000F42 ;2 Bytes keyboard buffer write position
=$000f43				KEYBOARD_SC_FLG  = $000F43 ;1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f44				KEYBOARD_SC_TMP  = $000F44 ;1 Byte, Interrupt Save Scan Code while Processing
=$001000				TEST_BEGIN       = $001000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$18ff00				ISR_BEGIN        = $18FF00 ; Byte  Beginning of CPU vectors in Direct page
=$18ff00				HRESET           = $18FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$18ff10				HCOP             = $18FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$18ff20				HBRK             = $18FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$18ff30				HABORT           = $18FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$18ff40				HNMI             = $18FF40 ;32 Bytes Handle NMI
=$18ff60				HIRQ             = $18FF60 ;32 Bytes Handle IRQ
=$18ff80				Unused_FF80      = $18FF80 ;End of direct page Interrrupt handlers
=$18ffe0				VECTORS_BEGIN    = $18FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$200000				VECTORS_END      = $200000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: kernel.asm


;******  Processing file: page_00_data.asm

>180000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>180003	48 00				                .word 72            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>180005	80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>180007	34 00				                .word 52            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>180009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>18000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>18000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>180013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>180014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>180016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: kernel.asm


;******  Processing file: page_00_code.asm

.18ff00	18		clc		RHRESET         CLC
.18ff01	fb		xce		                XCE
.18ff02	5c 00 00 19	jmp $190000	                JML BOOT
.18ff10					RHCOP
.18ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff12	8b		phb		                PHB
.18ff13	0b		phd		                PHD
.18ff14	48		pha		                PHA
.18ff15	da		phx		                PHX
.18ff16	5a		phy		                PHY
.18ff17	5c 08 00 19	jmp $190008	                JML BREAK
.18ff20					RHBRK
.18ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff22	8b		phb		                PHB
.18ff23	0b		phd		                PHD
.18ff24	48		pha		                PHA
.18ff25	da		phx		                PHX
.18ff26	5a		phy		                PHY
.18ff27	5c 08 00 19	jmp $190008	                JML BREAK
.18ff30					RHABORT
.18ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff32	8b		phb		                PHB
.18ff33	0b		phd		                PHD
.18ff34	48		pha		                PHA
.18ff35	da		phx		                PHX
.18ff36	5a		phy		                PHY
.18ff37	5c 08 00 19	jmp $190008	                JML BREAK
.18ff40					 RHNMI
.18ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff42	8b		phb		                PHB
.18ff43	0b		phd		                PHD
.18ff44	48		pha		                PHA
.18ff45	da		phx		                PHX
.18ff46	5a		phy		                PHY
.18ff47	22 a0 0f 19	jsl $190fa0	                JSL NMI_HANDLER
.18ff4b	7a		ply		                PLY
.18ff4c	fa		plx		                PLX
.18ff4d	68		pla		                PLA
.18ff4e	2b		pld		                PLD
.18ff4f	ab		plb		                PLB
.18ff50	40		rti		                RTI
.18ff60					RHIRQ
.18ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff62	8b		phb		                PHB
.18ff63	0b		phd		                PHD
.18ff64	48		pha		                PHA
.18ff65	da		phx		                PHX
.18ff66	5a		phy		                PHY
.18ff67	22 af 0e 19	jsl $190eaf	                JSL IRQ_HANDLER
.18ff6b	7a		ply		                PLY
.18ff6c	fa		plx		                PLX
.18ff6d	68		pla		                PLA
.18ff6e	2b		pld		                PLD
.18ff6f	ab		plb		                PLB
.18ff70	40		rti		                RTI
.18ffe0	5c 66 50 19	jmp $195066	JUMP_READY      JML IMREADY     ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>18ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>18ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>18ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>18ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>18ffec	00 00				                .word $0000    ; FFEC
>18ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.18fff0	5c 43 05 19	jmp $190543	RRETURN         JML IRETURN
>18fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>18fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>18fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>18fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>18fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>18fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: kernel.asm


;******  Processing file: Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: kernel.asm


;******  Processing file: interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;

;******  Return to file: kernel.asm


;******  Processing file: dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: kernel.asm


;******  Processing file: vicky_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H	      = $AF0001
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$af0004				BORDER_CTRL_REG         = $AF0004
=$01					Border_Ctrl_Enable      = $01
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BACKGROUND_COLOR_B      = $AF0008 ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af0009				BACKGROUND_COLOR_G      = $AF0009
=$af000a				BACKGROUND_COLOR_R      = $AF000A ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_RESERVED        = $AF0011   ;Not in Use
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$af0401				VDMA_COUNT_REG_L        = $AF0401
=$af0402				VDMA_COUNT_REG_M        = $AF0402
=$af0403				VDMA_COUNT_REG_H        = $AF0403
=$af0404				VDMA_DATA_2_WRITE_L     = $AF0404
=$af0405				VDMA_DATA_2_WRITE_H     = $AF0405
=$af0406				VDMA_STRIDE_L           = $AF0406
=$af0407				VDMA_STRIDE_H           = $AF0407
=$af0408				VDMA_SRC_ADDY_L         = $AF0408
=$af0409				VDMA_SRC_ADDY_M         = $AF0409
=$af040a				VDMA_SRC_ADDY_H         = $AF040A
=$af040b				VDMA_RESERVED_0         = $AF040B
=$af040c				VDMA_DST_ADDY_L         = $AF040C
=$af040d				VDMA_DST_ADDY_M         = $AF040D
=$af040e				VDMA_DST_ADDY_H         = $AF040E
=$af040f				VDMA_RESERVED_1         = $AF040F
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: kernel.asm


;******  Processing file: super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: kernel.asm


;******  Processing file: keyboard_def.asm

=$af1064				STATUS_PORT 	        =	$AF1064
=$af1060				KBD_OUT_BUF 	        =	$AF1060
=$af1060				KBD_INPT_BUF	        = $AF1060
=$af1064				KBD_CMD_BUF		        = $AF1064
=$af1060				KBD_DATA_BUF	        = $AF1060
=$af1060				PORT_A			          =	$AF1060
=$af1061				PORT_B			          =	$AF1061
=$01					OUT_BUF_FULL  =	$01
=$02					INPT_BUF_FULL	=	$02
=$04					SYS_FLAG		  =	$04
=$08					CMD_DATA		  =	$08
=$10					KEYBD_INH     =	$10
=$20					TRANS_TMOUT	  =	$20
=$40					RCV_TMOUT		  =	$40
=$80					PARITY_EVEN		=	$80
=$10					INH_KEYBOARD	=	$10
=$ae					KBD_ENA			  =	$AE
=$ad					KBD_DIS			  =	$AD
=$f1					KB_MENU			  =	$F1
=$f4					KB_ENABLE		  =	$F4
=$f7					KB_MAKEBREAK  =	$F7
=$fe					KB_ECHO			  =	$FE
=$ff					KB_RESET		  =	$FF
=$ed					KB_LED_CMD		=	$ED
=$aa					KB_OK			    =	$AA
=$fa					KB_ACK			  =	$FA
=$ff					KB_OVERRUN		=	$FF
=$fe					KB_RESEND		  =	$FE
=$f0					KB_BREAK		  =	$F0
=$10					KB_FA			    =	$10
=$20					KB_FE			    =	$20
=$40					KB_PR_LED		  =	$40

;******  Return to file: kernel.asm


;******  Processing file: SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: kernel.asm


;******  Processing file: RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: kernel.asm


;******  Processing file: io_def.asm

=$afe800				JOYSTICK0     = $AFE800  ;(R) Joystick 0 - J7 (Next to Buzzer)
=$afe801				JOYSTICK1     = $AFE801  ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2     = $AFE802  ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3     = $AFE803  ;(R) Joystick 3 - J10 (next to SD Card)
=$afe804				DIPSWITCH     = $AFE804  ;(R) $AFE804...$AFE807
=$afe808				SDCARD_DATA   = $AFE808  ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe809				SDCARD_CMD    = $AFE809  ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe810				SDCARD_STAT   = $AFE810  ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe820				CODEC_DATA_LO = $AFE820  ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe821				CODEC_DATA_HI = $AFE821  ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe822				CODEC_WR_CTRL = $AFE822  ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: kernel.asm


;******  Processing file: monitor.asm

.195000	5c 5c 50 19	jmp $19505c	MONITOR         JML IMONITOR
.195004	5c 88 50 19	jmp $195088	MSTATUS         JML IMSTATUS
.195008	5c 66 50 19	jmp $195066	MREADY          JML IMREADY
.19500c	5c 33 51 19	jmp $195133	MRETURN         JML IMRETURN
.195010	5c 34 51 19	jmp $195134	MPARSE          JML IMPARSE
.195014	5c 35 51 19	jmp $195135	MPARSE1         JML IMPARSE1
.195018	5c 36 51 19	jmp $195136	MEXECUTE        JML IMEXECUTE
.19501c	5c 37 51 19	jmp $195137	MASSEMBLE       JML IMASSEMBLE
.195020	5c 38 51 19	jmp $195138	MASSEMBLEA      JML IMASSEMBLEA
.195024	5c 39 51 19	jmp $195139	MCOMPARE        JML IMCOMPARE
.195028	5c 3a 51 19	jmp $19513a	MDISASSEMBLE    JML IMDISASSEMBLE
.19502c	5c 3b 51 19	jmp $19513b	MFILL           JML IMFILL
.195030	5c 3d 51 19	jmp $19513d	MJUMP           JML IMJUMP
.195034	5c 3e 51 19	jmp $19513e	MHUNT           JML IMHUNT
.195038	5c 3f 51 19	jmp $19513f	MLOAD           JML IMLOAD
.19503c	5c 40 51 19	jmp $195140	MMEMORY         JML IMMEMORY
.195040	5c 41 51 19	jmp $195141	MREGISTERS      JML IMREGISTERS
.195044	5c 42 51 19	jmp $195142	MSAVE           JML IMSAVE
.195048	5c 43 51 19	jmp $195143	MTRANSFER       JML IMTRANSFER
.19504c	5c 44 51 19	jmp $195144	MVERIFY         JML IMVERIFY
.195050	5c 45 51 19	jmp $195145	MEXIT           JML IMEXIT
.195054	5c 46 51 19	jmp $195146	MMODIFY         JML IMMODIFY
.195058	5c 47 51 19	jmp $195147	MDOS            JML IMDOS
.19505c	18		clc		IMONITOR        CLC           ; clear the carry flag
.19505d	fb		xce		                XCE           ; move carry to emulation flag.
.19505e	a9 ff fe	lda #$feff	                LDA #STACK_END ; Reset the stack
.195061	1b		tcs		                TAS
.195062	5c 66 50 19	jmp $195066	                JML IMREADY
.195066					IMREADY
.195066	c2 30		rep #$30	                REP #$30        ; set A&X long
.195068	a9 66 50	lda #$5066	                LDA #<>IMREADY
.19506b	8d e1 ff	sta $ffe1	                STA JMP_READY+1
.19506e	e2 20		sep #$20	                SEP #$20        ; set A short
.195070	a9 19		lda #$19	                LDA #`IMREADY
.195072	8d e3 ff	sta $ffe3	                STA JMP_READY+3
.195075	c2 20		rep #$20	                REP #$20        ; set A long
.195077	a9 33 51	lda #$5133	                LDA #<>IMRETURN
.19507a	8d f1 ff	sta $fff1	                STA RETURN+1
.19507d	e2 20		sep #$20	                SEP #$20        ; set A short
.19507f	a9 19		lda #$19	                LDA #`IMRETURN
.195081	8d f3 ff	sta $fff3	                STA RETURN+3
.195084	5c 88 50 19	jmp $195088	                JML IMSTATUS
.195088					IMSTATUS
.195088	48		pha		                PHA             ; begin setdbr macro
.195089	08		php		                PHP
.19508a	e2 20		sep #$20	                SEP #$20        ; set A short
.19508c	a9 19		lda #$19		LDA #`mregisters_msg
.19508e	48		pha		                PHA
.19508f	ab		plb		                PLB
.195090	28		plp		                PLP
.195091	68		pla		                PLA             ; end setdbr macro
.195092	a2 49 51	ldx #$5149	                LDX #<>mregisters_msg
.195095	22 7e 05 19	jsl $19057e	                JSL IPRINT
.195099	e2 20		sep #$20	                SEP #$20        ; set A short
.19509b	a9 3b		lda #$3b	                LDA #';'
.19509d	22 9e 05 19	jsl $19059e	                JSL IPUTC
.1950a1	c2 30		rep #$30	                REP #$30        ; set A&X long
.1950a3	48		pha		                PHA             ; begin setdbr macro
.1950a4	08		php		                PHP
.1950a5	e2 20		sep #$20	                SEP #$20        ; set A short
.1950a7	a9 00		lda #$00		LDA #$0
.1950a9	48		pha		                PHA
.1950aa	ab		plb		                PLB
.1950ab	28		plp		                PLP
.1950ac	68		pla		                PLA             ; end setdbr macro
.1950ad	a0 03 00	ldy #$0003	                LDY #3
.1950b0	a2 42 02	ldx #$0242	                LDX #CPUPC+2
.1950b3	22 71 06 19	jsl $190671	                JSL IPRINTH
.1950b7	a5 20		lda $20		                LDA ' '
.1950b9	22 9e 05 19	jsl $19059e	                JSL IPUTC
.1950bd	a0 02 00	ldy #$0002	                LDY #2
.1950c0	a2 45 02	ldx #$0245	                LDX #CPUA+1
.1950c3	22 71 06 19	jsl $190671	                JSL IPRINTH
.1950c7	a5 20		lda $20		                LDA ' '
.1950c9	22 9e 05 19	jsl $19059e	                JSL IPUTC
.1950cd	a0 02 00	ldy #$0002	                LDY #2
.1950d0	a2 47 02	ldx #$0247	                LDX #CPUX+1
.1950d3	22 71 06 19	jsl $190671	                JSL IPRINTH
.1950d7	a5 20		lda $20		                LDA ' '
.1950d9	22 9e 05 19	jsl $19059e	                JSL IPUTC
.1950dd	a0 02 00	ldy #$0002	                LDY #2
.1950e0	a2 49 02	ldx #$0249	                LDX #CPUY+1
.1950e3	22 71 06 19	jsl $190671	                JSL IPRINTH
.1950e7	a5 20		lda $20		                LDA ' '
.1950e9	22 9e 05 19	jsl $19059e	                JSL IPUTC
.1950ed	a0 02 00	ldy #$0002	                LDY #2
.1950f0	a2 4b 02	ldx #$024b	                LDX #CPUSTACK+1
.1950f3	22 71 06 19	jsl $190671	                JSL IPRINTH
.1950f7	a5 20		lda $20		                LDA ' '
.1950f9	22 9e 05 19	jsl $19059e	                JSL IPUTC
.1950fd	a0 01 00	ldy #$0001	                LDY #1
.195100	a2 4e 02	ldx #$024e	                LDX #CPUDBR
.195103	22 71 06 19	jsl $190671	                JSL IPRINTH
.195107	a5 20		lda $20		                LDA ' '
.195109	22 9e 05 19	jsl $19059e	                JSL IPUTC
.19510d	22 9e 05 19	jsl $19059e	                JSL IPUTC
.195111	a0 02 00	ldy #$0002	                LDY #2
.195114	a2 4d 02	ldx #$024d	                LDX #CPUDP+1
.195117	22 71 06 19	jsl $190671	                JSL IPRINTH
.19511b	a5 20		lda $20		                LDA ' '
.19511d	22 9e 05 19	jsl $19059e	                JSL IPUTC
.195121	a0 01 00	ldy #$0001	                LDY #1
.195124	a2 4f 02	ldx #$024f	                LDX #CPUFLAGS
.195127	22 71 06 19	jsl $190671	                JSL IPRINTH
.19512b	22 cc 05 19	jsl $1905cc	                JSL IPRINTCR
.19512f	5c 3c 05 19	jmp $19053c	                JML IREADYWAIT
.195133	6b		rtl		IMRETURN        RTL ; Handle RETURN key (ie: execute command)
.195134	00		brk #		IMPARSE         BRK ; Parse the current command line
.195135	00		brk #		IMPARSE1        BRK ; Parse one word on the current command line
.195136	00		brk #		IMEXECUTE       BRK ; Execute the current command line (requires MCMD and MARG1-MARG8 to be populated)
.195137	00		brk #		IMASSEMBLE      BRK ; Assemble a line of text.
.195138	00		brk #		IMASSEMBLEA     BRK ; Assemble a line of text.
.195139	00		brk #		IMCOMPARE       BRK ; Compare memory. len=1
.19513a	00		brk #		IMDISASSEMBLE   BRK ; Disassemble memory. end=1 instruction
.19513b	00		brk #		IMFILL          BRK ; Fill memory with specified value. Start and end must be in the same bank.
.19513c	00		brk #		IMGO            BRK ; Execute from specified address
.19513d	00		brk #		IMJUMP          BRK ; Execute from spefified address
.19513e	00		brk #		IMHUNT          BRK ; Hunt (find) value in memory
.19513f	00		brk #		IMLOAD          BRK ; Load data from disk. Device=1 (internal floppy) Start=Address in file
.195140	00		brk #		IMMEMORY        BRK ; View memory
.195141	00		brk #		IMREGISTERS     BRK ; View/edit registers
.195142	00		brk #		IMSAVE          BRK ; Save memory to disk
.195143	00		brk #		IMTRANSFER      BRK ; Transfer (copy) data in memory
.195144	00		brk #		IMVERIFY        BRK ; Verify memory and file on disk
.195145	00		brk #		IMEXIT          BRK ; Exit monitor and return to BASIC command prompt
.195146	00		brk #		IMMODIFY        BRK ; Modify memory
.195147	00		brk #		IMDOS           BRK ; Execute DOS command
.195148					MMESSAGES
>195148	00				MMERROR         .text $00
>195149	0d 20 50 43 20 20 20 20		mregisters_msg  .null $0D," PC     A    X    Y    SP   DBR DP   NVMXDIZC"
>195151	20 41 20 20 20 20 58 20 20 20 20 59 20 20 20 20
>195161	53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56
>195171	4d 58 44 49 5a 43 00

;******  Return to file: kernel.asm


;******  Processing file: SDOS.asm


;******  Processing file: ch376s_inc.asm

=$00					DEF_NULL_CHAR       = $00
=$2a					DEF_WILDCARD_CHAR   = $2A
=$5c					DEF_SEPAR_CHAR1     = $5C
=$2f					DEF_SEPAR_CHAR2     = $2F
=$0a					CH_CMD_RD_VAR8        = $0A     ; Read 8Bit Value
=$0b					CH_CMD_WR_VAR8        = $0B     ; Write 8Bit Value to controller
=$0c					CH_CMD_RD_VAR32       = $0C     ; Read 32Bit Value
=$0d					CH_CMD_WR_VAR32       = $0D
=$15					CH_CMD_SET_MODE       = $15     ; Set the Controller's mode, in our Case in SDCARD
=$22					CH_CMD_GET_STATUS     = $22     ; Get Interrupt Status
=$27					CH_CMD_RD_DATA0       = $27     ;
=$2f					CH_CMD_SET_FILENAME   = $2F     ;SET_FILE_NAME
=$31					CH_CMD_DISK_MOUNT     = $31     ;DISK_MOUNT
=$32					CH_CMD_FILE_OPEN      = $32     ;FILE_OPEN
=$33					CH_CMD_FILE_ENUM_GO   = $33
=$39					CH_CMD_BYTE_LOCATE    = $39
=$3a					CH_CMD_BYTE_READ      = $3A
=$3b					CH_CMD_BYTE_RD_GO     = $3B
=$3c					CH_CMD_BYTE_WRITE     = $3C
=$3d					CH_CMD_BYTE_WR_GO     = $3D
=$44					CH_VAR_DISK_ROOT		= $44
=$48					CH_VAR_DSK_TOTAL_CLUS	= $48
=$4c					CH_VAR_DSK_START_LBA	= $4C
=$50					CH_VAR_DSK_DAT_START	= $50
=$54					CH_VAR_LBA_BUFFER		= $54
=$58					CH_VAR_LBA_CURRENT		= $58
=$5c					CH_VAR_FAT_DIR_LBA		= $5C
=$60					CH_VAR_START_CLUSTER	= $60
=$64					CH_VAR_CURRENT_CLUST	= $64
=$68					CH_VAR_FILE_SIZE		= $68
=$6c					CH_VAR_CURRENT_OFFSET	= $6C
=$14					CH376S_STAT_SUCCESS  = $14
=$17					CH376S_STAT_BUF_OVF  = $17
=$1d					CH376S_STAT_DSK_RD   = $1D
=$1e					CH376S_STAT_DSK_WR   = $1E
=$41					CH376S_ERR_OPEN_DIR  = $41
=$42					CH376S_ERR_MISS_FIL  = $42
=$43					CH376S_ERR_FND_NAME  = $43
=$82					CH376S_ERR_DISK_DSC  = $82
=$84					CH376S_ERR_LRG_SEC   = $84
=$92					CH376S_ERR_PARTTION  = $92
=$a1					CH376S_ERR_NOT_FORM  = $A1
=$b1					CH376S_ERR_DSK_FULL  = $B1
=$b2					CH376S_FDT_OVER      = $B2
=$b4					CH376S_FILE_CLOSED   = $B4
=$00					SDCARD_PRSNT_NO_CARD = $00
=$01					SDCARD_PRSNT_CD      = $01
=$02					SDCARD_PRSNT_WP      = $02
=$04					SDCARD_PRSNT_MNTED   = $04  ; Card is present and Mounted1

;******  Return to file: SDOS.asm

.192000	5c c5 21 19	jmp $1921c5	SDOS_CHECK_CD JML ISDOS_CHK_CD ; Check if Card is Present
.192004	5c d4 21 19	jmp $1921d4	SDOS_CHECK_WP JML ISDOS_CHK_WP ; Check if Card is Write Protected
.192008	5c 20 20 19	jmp $192020	SDOS_INIT     JML ISDOS_INIT
.19200c	5c 63 20 19	jmp $192063	SDOS_DIR      JML ISDOS_DIR
.192010	5c 21 21 19	jmp $192121	SDOS_CHDIR    JML ISDOS_CHDIR
.192014	5c 22 21 19	jmp $192122	SDOS_LOAD     JML ISDOS_LOAD
.192018	5c 26 21 19	jmp $192126	SDOS_SAVE     JML ISDOS_SAVE
.19201c	5c 27 21 19	jmp $192127	SDOS_EXEC     JML ISDOS_EXEC
.192020					ISDOS_INIT
.192020	e2 20		sep #$20	                SEP #$20        ; set A short
.192022	a9 06		lda #$06	              LDA #$06
.192024	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192028	20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.19202b	a9 a8		lda #$a8	              LDA #$A8
.19202d	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192031	20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192034	20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192037	20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.19203a	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.19203e	20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.192041	a9 15		lda #$15	              LDA #CH_CMD_SET_MODE
.192043	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192047	20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.19204a	20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.19204d	a9 03		lda #$03	              LDA #$03            ; Mode 3 - SDCARD
.19204f	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA     ; Write the MODE and Wait for around ~10us
.192053					ISDOS_WAIT_FOR_MODE_SW
.192053	20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA ; Wait 0.6us
.192056	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.19205a	c9 51		cmp #$51	              CMP #$51   ; CMD_RET_SUCCESS		EQU		051H, CMD_RET_ABORT		EQU		05FH
.19205c	d0 f5		bne $192053	              BNE ISDOS_WAIT_FOR_MODE_SW
.19205e	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA     ; See the Status Output
.192062	6b		rtl		              RTL
.192063					ISDOS_DIR
.192063	e2 20		sep #$20	                SEP #$20        ; set A short
.192065	c2 10		rep #$10	                REP #$10        ; set X long
.192067	20 28 21	jsr $192128	              JSR ISDOS_MOUNT_CARD;     First to See if the Card is Present
.19206a	a2 00 00	ldx #$0000	              LDX #$0000
.19206d					ISDOS_DIR_TRF
.19206d	bf b7 23 19	lda $1923b7,x	              LDA sd_card_dir_string,X    ; /
.192071	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.192075	e8		inx		              INX
.192076	e0 03 00	cpx #$0003	              CPX #$0003
.192079	d0 f2		bne $19206d	              BNE ISDOS_DIR_TRF
.19207b	20 6b 21	jsr $19216b	              JSR SDOS_FILE_OPEN         ; Now that the file name is set, go open File
.19207e	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.192080	f0 03		beq $192085	              BEQ ISDOS_DIR_CONT0
.192082	82 87 00	brl $19210c	              BRL ISDOS_MISS_FILE
.192085					ISDOS_DIR_CONT0
.192085	a2 35 24	ldx #$2435	              LDX #<>sd_card_msg4         ; Print Screen the Message "FILE OPENED"
.192088	22 7e 05 19	jsl $19057e	              JSL IPRINT       ; print the first line
.19208c					ISDOS_NEXT_ENTRY
.19208c	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.19208e	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192092	20 98 21	jsr $192198	              JSR DLYCMD_2_DTA;
.192095	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ;  Load First Data
.192099	a0 00 00	ldy #$0000	              LDY #$0000
.19209c	a2 00 00	ldx #$0000	              LDX #$0000
.19209f	a8		tay		              TAY              ; GET Size (Save in Case we need it)
.1920a0					ISDOS_DIR_GET_CHAR
.1920a0	20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA ; Wait 0.6us
.1920a3	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ;
.1920a7	22 9e 05 19	jsl $19059e	              JSL IPUTC        ; Print the character
.1920ab	e8		inx		              INX
.1920ac	e0 08 00	cpx #$0008	              CPX #$0008
.1920af	d0 03		bne $1920b4	              BNE ISDOS_DIR_CONT1
.1920b1	20 1a 21	jsr $19211a	              JSR ISDOS_DISPLAY_DOT
.1920b4					ISDOS_DIR_CONT1
.1920b4	e0 0b 00	cpx #$000b	              CPX #$000B          ; the First 11th Character is the file name
.1920b7	d0 e7		bne $1920a0	              BNE ISDOS_DIR_GET_CHAR
.1920b9	a9 20		lda #$20	              LDA #$20
.1920bb	22 9e 05 19	jsl $19059e	              JSL IPUTC        ; Print the character
.1920bf	a9 28		lda #$28	              LDA #'('
.1920c1	22 9e 05 19	jsl $19059e	              JSL IPUTC        ; Print the character
.1920c5	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ;
.1920c9	29 10		and #$10	              AND #$10
.1920cb	c9 10		cmp #$10	              CMP #$10
.1920cd	f0 04		beq $1920d3	              BEQ ISDOS_DIR_ATTR0
.1920cf	a9 46		lda #$46	              LDA #'F'
.1920d1	80 02		bra $1920d5	              BRA ISDOS_DIR_ATTR1
.1920d3					ISDOS_DIR_ATTR0
.1920d3	a9 44		lda #$44	              LDA #'D'
.1920d5					ISDOS_DIR_ATTR1
.1920d5	22 9e 05 19	jsl $19059e	              JSL IPUTC        ; Print the character
.1920d9	a9 29		lda #$29	              LDA #')'
.1920db	22 9e 05 19	jsl $19059e	              JSL IPUTC        ; Print the character
.1920df	a9 0d		lda #$0d	              LDA #$0D         ; Carriage Return
.1920e1	22 9e 05 19	jsl $19059e	              JSL IPUTC        ; Print the character
.1920e5					ISDOS_DIR_GET_CHAR_FINISH
.1920e5	20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA ; Wait 0.6us
.1920e8	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ; After the name Just empty the buffer
.1920ec	e8		inx		              INX
.1920ed	e0 20 00	cpx #$0020	              CPX #$0020
.1920f0	d0 f3		bne $1920e5	              BNE ISDOS_DIR_GET_CHAR_FINISH
.1920f2	20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.1920f5	a9 33		lda #$33	              LDA #CH_CMD_FILE_ENUM_GO
.1920f7	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.1920fb	20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT       ; Go Wait for Interrupt
.1920fe	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.192100	f0 8a		beq $19208c	              BEQ ISDOS_NEXT_ENTRY
.192102	c9 42		cmp #$42	              CMP #CH376S_ERR_MISS_FIL
.192104	d0 06		bne $19210c	              BNE  ISDOS_MISS_FILE
.192106	a2 42 24	ldx #$2442	              LDX #<>sd_card_msg5   ; End of File
.192109	82 09 00	brl $192115	              BRL ISDOS_DIR_DONE
.19210c					ISDOS_MISS_FILE
.19210c	a2 cd 23	ldx #$23cd	              LDX #<>sd_card_err0
.19210f	82 03 00	brl $192115	              BRL ISDOS_DIR_DONE
.192112					NO_SDCARD_PRESENT
.192112	a2 ba 23	ldx #$23ba	              LDX #<>sd_no_card_msg
.192115					ISDOS_DIR_DONE
.192115	22 7e 05 19	jsl $19057e	              JSL IPRINT       ; print the first line
.192119	6b		rtl		              RTL;
.19211a					ISDOS_DISPLAY_DOT
.19211a	a9 2e		lda #$2e	              LDA #'.'
.19211c	22 9e 05 19	jsl $19059e	              JSL IPUTC        ; Print the character
.192120	60		rts		              RTS;
.192121	00		brk #		ISDOS_CHDIR   BRK;
.192122					ISDOS_LOAD
.192122	20 42 22	jsr $192242	              JSR SDOS_READ_FILE;
.192125	6b		rtl		              RTL;
.192126	00		brk #		ISDOS_SAVE    BRK;
.192127	00		brk #		ISDOS_EXEC    BRK;
.192128					ISDOS_MOUNT_CARD
.192128	e2 20		sep #$20	                SEP #$20        ; set A short
.19212a	c2 10		rep #$10	                REP #$10        ; set X long
.19212c	a2 fe 23	ldx #$23fe	              LDX #<>sd_card_msg1         ; Print Screen the Message "Card Detected"
.19212f	22 7e 05 19	jsl $19057e	              JSL IPRINT       ; print the first line
.192133	a0 00 00	ldy #$0000	              LDY #$0000
.192136	a9 01		lda #$01	              LDA #$01
.192138	85 3f		sta $3f		              STA SDCARD_PRSNT_MNT        ; Bit[0] = Card Present
.19213a					TRY_MOUNT_AGAIN
.19213a	a9 31		lda #$31	              LDA #CH_CMD_DISK_MOUNT      ; If Present, go Mount it.
.19213c	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD              ;
.192140	20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT       ;
.192143	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS    ;
.192145	f0 09		beq $192150	              BEQ ISDOS_MOUNTED
.192147	c8		iny		              INY
.192148	c0 05 00	cpy #$0005	              CPY #$0005
.19214b	d0 ed		bne $19213a	              BNE TRY_MOUNT_AGAIN
.19214d	4c 5e 21	jmp $19215e	              JMP SDCARD_ERROR_MOUNT
.192150					ISDOS_MOUNTED
.192150	a2 0e 24	ldx #$240e	              LDX #<>sd_card_msg2         ; Print Screen the Message "Card Detected"
.192153	22 7e 05 19	jsl $19057e	              JSL IPRINT       ; print the first line
.192157	a5 3f		lda $3f		              LDA SDCARD_PRSNT_MNT
.192159	29 fb		and #$fb	              AND #~SDCARD_PRSNT_MNTED
.19215b	09 04		ora #$04	              ORA #SDCARD_PRSNT_MNTED     ; Set Bit to Indicate that is mounted
.19215d	60		rts		              RTS
.19215e					SDCARD_ERROR_MOUNT
.19215e	a2 1d 24	ldx #$241d	              LDX #<>sd_card_msg3         ; Print Screen the Message "Card Detected"
.192161	22 7e 05 19	jsl $19057e	              JSL IPRINT       ; print the first line
.192165	60		rts		              RTS
.192166	a9 00		lda #$00	ISDOS_NO_CARD LDA #SDCARD_PRSNT_NO_CARD
.192168	85 3f		sta $3f		              STA SDCARD_PRSNT_MNT
.19216a	60		rts		              RTS
.19216b					SDOS_FILE_OPEN
.19216b	20 7b 21	jsr $19217b	              JSR SDOS_SET_FILE_NAME ; Make Sure the Pointer to the File Name is properly
.19216e	20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.192171	a9 32		lda #$32	              LDA #CH_CMD_FILE_OPEN ;
.192173	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD          ; Go Request to open the File
.192177	20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.19217a	60		rts		              RTS
.19217b					SDOS_SET_FILE_NAME
.19217b	a9 2f		lda #$2f	              LDA #CH_CMD_SET_FILENAME
.19217d	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192181	20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.192184	a2 00 00	ldx #$0000	              LDX #$0000
.192187					SDOS_SET_FILE_LOOP
.192187	bf 80 03 00	lda $000380,x	              LDA @lSDOS_FILE_NAME, X   ; This is where the FileName ought to be.
.19218b	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.19218f	20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192192	e8		inx		              INX
.192193	c9 00		cmp #$00	              CMP #$00              ; Check end of Line
.192195	d0 f0		bne $192187	              BNE SDOS_SET_FILE_LOOP
.192197	60		rts		              RTS
.192198					DLYCMD_2_DTA
.192198	ea		nop		              NOP
.192199	ea		nop		              NOP
.19219a	ea		nop		              NOP
.19219b	ea		nop		              NOP
.19219c	ea		nop		              NOP
.19219d					DLYDTA_2_DTA
.19219d	ea		nop		              NOP
.19219e	ea		nop		              NOP
.19219f	ea		nop		              NOP
.1921a0	ea		nop		              NOP
.1921a1	ea		nop		              NOP
.1921a2	60		rts		              RTS;
.1921a3					SDCARD_WAIT_4_INT
.1921a3	e2 20		sep #$20	                SEP #$20        ; set A short
.1921a5	78		sei		              SEI                 ; There is no time out on this, so let's
.1921a6					SDCARD_BUSY_INT
.1921a6	af 09 e8 af	lda $afe809	              LDA SDCARD_CMD    ; Read Status of Interrupt and
.1921aa	29 80		and #$80	              AND #$80          ; Bit[7] = !INT if Zero = Busy
.1921ac	c9 80		cmp #$80	              CMP #$80          ;
.1921ae	f0 f6		beq $1921a6	              BEQ SDCARD_BUSY_INT
.1921b0	58		cli		              CLI
.1921b1					SDCARD_BUSY_DONE
.1921b1	20 98 21	jsr $192198	              JSR DLYCMD_2_DTA ;
.1921b4	20 98 21	jsr $192198	              JSR DLYCMD_2_DTA ;
.1921b7	a9 22		lda #$22	              LDA #CH_CMD_GET_STATUS
.1921b9	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.1921bd	20 98 21	jsr $192198	              JSR DLYCMD_2_DTA;   ; 1.5us Delay to get the Value Return
.1921c0	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA;
.1921c4	60		rts		              RTS           ;
.1921c5					ISDOS_CHK_CD
.1921c5	e2 20		sep #$20	                SEP #$20        ; set A short
.1921c7	18		clc		              CLC
.1921c8	af 10 e8 af	lda $afe810	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.1921cc	29 01		and #$01	              AND #$01
.1921ce	c9 01		cmp #$01	              CMP #$01
.1921d0	f0 01		beq $1921d3	              BEQ SDCD_NOT_PRST;
.1921d2	38		sec		              SEC
.1921d3	60		rts		SDCD_NOT_PRST RTS
.1921d4					ISDOS_CHK_WP
.1921d4	e2 20		sep #$20	                SEP #$20        ; set A short
.1921d6	18		clc		              CLC
.1921d7	af 10 e8 af	lda $afe810	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.1921db	29 02		and #$02	              AND #$02
.1921dd	d0 01		bne $1921e0	              BNE SDCD_NOT_WP;
.1921df	38		sec		              SEC
.1921e0	60		rts		SDCD_NOT_WP   RTS
.1921e1					ISDOS_GET_FILE_SIZE
.1921e1	e2 20		sep #$20	                SEP #$20        ; set A short
.1921e3	a9 0c		lda #$0c	              LDA #CH_CMD_RD_VAR32
.1921e5	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.1921e9	20 98 21	jsr $192198	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.1921ec	a9 68		lda #$68	              LDA #CH_VAR_FILE_SIZE
.1921ee	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA;
.1921f2	20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.1921f5	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA         ;LSB First
.1921f9	8f 28 03 00	sta $000328	              STA @lSDOS_FILE_SIZE+0
.1921fd	8f 20 01 00	sta $000120	              STA @lADDER32_A_LL;     ; Store in ADDER32 REgister A
.192201	20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192204	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192208	8f 29 03 00	sta $000329	              STA @lSDOS_FILE_SIZE+1
.19220c	8f 21 01 00	sta $000121	              STA @lADDER32_A_LH;     ; Store in ADDER32 REgister A
.192210	20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192213	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192217	8f 2a 03 00	sta $00032a	              STA @lSDOS_FILE_SIZE+2
.19221b	8f 22 01 00	sta $000122	              STA @lADDER32_A_HL;     ; Store in ADDER32 REgister A
.19221f	20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192222	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192226	8f 2b 03 00	sta $00032b	              STA @lSDOS_FILE_SIZE+3   ;MSB Last
.19222a	8f 23 01 00	sta $000123	              STA @lADDER32_A_HH;     ; Store in ADDER32 REgister A
.19222e	20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192231	af 28 01 00	lda $000128	              LDA @lADDER32_R_LL;
.192235	af 29 01 00	lda $000129	              LDA @lADDER32_R_LH;
.192239	af 2a 01 00	lda $00012a	              LDA @lADDER32_R_HL;
.19223d	af 2b 01 00	lda $00012b	              LDA @lADDER32_R_HH;
.192241	60		rts		              RTS
.192242					SDOS_READ_FILE
.192242	c2 30		rep #$30	                REP #$30        ; set A&X long
.192244	20 4f 23	jsr $19234f	              JSR SDOS_SETUP_ADDER_B;
.192247	e2 20		sep #$20	                SEP #$20        ; set A short
.192249	20 6b 21	jsr $19216b	              JSR SDOS_FILE_OPEN
.19224c	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ; if the file open successfully, let's go on.
.19224e	f0 03		beq $192253	              BEQ SDOS_READ_FILE_KEEP_GOING
.192250	82 91 00	brl $1922e4	              BRL SDOS_READ_END
.192253					SDOS_READ_FILE_KEEP_GOING
.192253	a2 51 24	ldx #$2451	              LDX #<>sd_card_msg6         ; Print Screen the Message "FILE FOUND, LOADING..."
.192256	22 7e 05 19	jsl $19057e	              JSL IPRINT       ; print the first line
.19225a	20 e1 21	jsr $1921e1	              JSR ISDOS_GET_FILE_SIZE   ; Get the File Size in 32Bits
.19225d	c2 20		rep #$20	                REP #$20        ; set A long
.19225f	20 73 23	jsr $192373	              JSR SDOS_SETUP_CH376S_BUFFER_SIZE;
.192262	a9 00 00	lda #$0000	              LDA #$0000
.192265	8f 3c 00 00	sta $00003c	              STA @lSDCARD_BYTE_NUM; Just make sure the High Part of the Size is Zero
.192269	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR   ; Clear the Byte Pointer 32 Bytes Register
.19226d	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2 ; This is to Relocated the Pointer after you passed the 64K Boundary
.192271	e2 20		sep #$20	                SEP #$20        ; set A short
.192273					SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock
.192273	a9 3a		lda #$3a	              LDA #CH_CMD_BYTE_READ
.192275	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.192279	20 98 21	jsr $192198	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.19227c	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER
.192280	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192284	20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA;   ; 1.5us Delay to get the Value Return
.192287	af 2d 03 00	lda $00032d	              LDA @lSDOS_BYTE_NUMBER+1
.19228b	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.19228f	20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT
.192292	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.192294	f0 03		beq $192299	              BEQ SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.192296	82 4b 00	brl $1922e4	              BRL SDOS_READ_END
.192299					SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.192299	20 92 23	jsr $192392	              JSR SDOS_READ_BLOCK
.19229c	a9 3b		lda #$3b	              LDA #CH_CMD_BYTE_RD_GO
.19229e	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.1922a2	20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT
.1922a5	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.1922a7	d0 05		bne $1922ae	              BNE SDOS_READ_PROC_DONE
.1922a9	20 ee 22	jsr $1922ee	              JSR SDOS_ADJUST_POINTER  ; Go Adjust the Address
.1922ac	80 eb		bra $192299	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.1922ae					SDOS_READ_PROC_DONE
.1922ae	c2 20		rep #$20	                REP #$20        ; set A long
.1922b0	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER  ; Load the Previously number of Byte
.1922b4	c9 ff ff	cmp #$ffff	              CMP #$FFFF
.1922b7	d0 24		bne $1922dd	              BNE SDOS_READ_DONE1                  ; if it equal 64K, then the file is bugger than 64K
.1922b9	af 28 01 00	lda $000128	              LDA @lADDER32_R_LL
.1922bd	8f 20 01 00	sta $000120	              STA @lADDER32_A_LL
.1922c1	af 2a 01 00	lda $00012a	              LDA @lADDER32_R_HL
.1922c5	8f 22 01 00	sta $000122	              STA @lADDER32_A_HL
.1922c9	20 73 23	jsr $192373	              JSR SDOS_SETUP_CH376S_BUFFER_SIZE ;
.1922cc	20 35 23	jsr $192335	              JSR SDOS_COMPUTE_LOCATE_POINTER
.1922cf	e2 20		sep #$20	                SEP #$20        ; set A short
.1922d1	20 00 23	jsr $192300	              JSR SDOS_BYTE_LOCATE    ; Apply the new location for the CH376S
.1922d4	20 a3 21	jsr $1921a3	              JSR SDCARD_WAIT_4_INT
.1922d7	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ;
.1922d9	d0 09		bne $1922e4	              BNE SDOS_READ_END
.1922db	80 96		bra $192273	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock ; Let's go fetch a new block of 64K or less
.1922dd					SDOS_READ_DONE1
.1922dd	a9 00		lda #$00	              LDA #$00
.1922df	a2 68 24	ldx #$2468	              LDX #<>sd_card_msg7         ; Print Screen the Message "FILE LOADED"
.1922e2	80 05		bra $1922e9	              BRA SDOS_READ_PROC_DONE1
.1922e4					SDOS_READ_END
.1922e4	a9 ff		lda #$ff	              LDA #$FF
.1922e6	a2 e3 23	ldx #$23e3	              LDX #<>sd_card_err1         ;"ERROR LOADING FILE"
.1922e9					SDOS_READ_PROC_DONE1
.1922e9	22 7e 05 19	jsl $19057e	              JSL IPRINT       ; print the first line
.1922ed	60		rts		              RTS;
.1922ee					SDOS_ADJUST_POINTER
.1922ee	c2 20		rep #$20	                REP #$20        ; set A long
.1922f0	18		clc		              CLC
.1922f1	a5 38		lda $38		              LDA SDCARD_FILE_PTR ;Load the Pointer
.1922f3	65 3c		adc $3c		              ADC SDCARD_BYTE_NUM
.1922f5	85 38		sta $38		              STA SDCARD_FILE_PTR;
.1922f7	e2 20		sep #$20	                SEP #$20        ; set A short
.1922f9	a5 3a		lda $3a		              LDA SDCARD_FILE_PTR+2;
.1922fb	69 00		adc #$00	              ADC #$00          ; This is just add up the Carry
.1922fd	85 3a		sta $3a		              STA SDCARD_FILE_PTR+2;
.1922ff					SDOS_ADJ_DONE
.1922ff	60		rts		              RTS
.192300					SDOS_BYTE_LOCATE
.192300	e2 20		sep #$20	                SEP #$20        ; set A short
.192302	a9 39		lda #$39	              LDA #CH_CMD_BYTE_LOCATE
.192304	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192308	20 98 21	jsr $192198	              JSR DLYCMD_2_DTA
.19230b	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR
.19230f	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192313	20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192316	af 35 03 00	lda $000335	              LDA @lSDOS_BYTE_PTR+1
.19231a	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.19231e	20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.192321	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.192325	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192329	20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA
.19232c	af 37 03 00	lda $000337	              LDA @lSDOS_BYTE_PTR+3
.192330	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192334	60		rts		              RTS
.192335					SDOS_COMPUTE_LOCATE_POINTER
.192335	c2 20		rep #$20	                REP #$20        ; set A long
.192337	18		clc		              CLC
.192338	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR ; $00330
.19233c	69 ff ff	adc #$ffff	              ADC #$FFFF
.19233f	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR
.192343	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.192347	69 00 00	adc #$0000	              ADC #$0000          ; this is to Add the Carry
.19234a	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2
.19234e	60		rts		              RTS
.19234f					SDOS_SETUP_ADDER_B
.19234f	c2 20		rep #$20	                REP #$20        ; set A long
.192351	a9 01 00	lda #$0001	              LDA #$0001
.192354	8f 24 01 00	sta $000124	              STA @lADDER32_B_LL
.192358	a9 ff ff	lda #$ffff	              LDA #$FFFF
.19235b	8f 26 01 00	sta $000126	              STA @lADDER32_B_HL
.19235f	60		rts		              RTS
.192360					SDOS_LOAD_ADDER_A_WITH_SIZE
.192360	c2 20		rep #$20	                REP #$20        ; set A long
.192362	af 28 03 00	lda $000328	              LDA @lSDOS_FILE_SIZE;
.192366	8f 20 01 00	sta $000120	              STA @lADDER32_A_LL;
.19236a	af 2a 03 00	lda $00032a	              LDA @lSDOS_FILE_SIZE+2;
.19236e	8f 22 01 00	sta $000122	              STA @lADDER32_A_HL;
.192372	60		rts		              RTS
.192373					SDOS_SETUP_CH376S_BUFFER_SIZE
.192373	c2 20		rep #$20	                REP #$20        ; set A long
.192375	af 2a 01 00	lda $00012a	              LDA  @lADDER32_R_HL
.192379	29 00 80	and #$8000	              AND #$8000          ; Check if it is negative
.19237c	c9 00 80	cmp #$8000	              CMP #$8000          ; if it is then just put the Size of the file in ByteNumber
.19237f	f0 08		beq $192389	              BEQ SDOS_SETUP_SMALLR_THAN64K
.192381	a9 ff ff	lda #$ffff	              LDA #$FFFF
.192384	8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.192388	60		rts		              RTS
.192389					SDOS_SETUP_SMALLR_THAN64K
.192389	af 20 01 00	lda $000120	              LDA @lADDER32_A_LL
.19238d	8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.192391	60		rts		              RTS
.192392					SDOS_READ_BLOCK
.192392	e2 20		sep #$20	                SEP #$20        ; set A short
.192394	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.192396	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.19239a	20 98 21	jsr $192198	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.19239d	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA     ; Read First Byte for Number of Byte to Read
.1923a1	85 3c		sta $3c		              STA SDCARD_BYTE_NUM  ; Store the Number of byte to be read
.1923a3	20 9d 21	jsr $19219d	              JSR DLYDTA_2_DTA;   ; 3us Delay to get the Value Return
.1923a6	a0 00 00	ldy #$0000	              LDY #$0000
.1923a9					SDOS_READ_MORE
.1923a9	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.1923ad	97 38		sta [$38],y	              STA [SDCARD_FILE_PTR], Y        ; Store Block Data Sector Begin
.1923af	c8		iny		              INY
.1923b0	c4 3c		cpy $3c		              CPY SDCARD_BYTE_NUM
.1923b2	d0 f5		bne $1923a9	              BNE SDOS_READ_MORE
.1923b4	a5 3c		lda $3c		              LDA SDCARD_BYTE_NUM  ; Reload the Number of Byte Read
.1923b6	60		rts		              RTS
>1923b7	2f 2a 00			sd_card_dir_string  .text $2F, $2A ,$00
>1923ba	4e 4f 20 53 44 43 41 52		sd_no_card_msg      .text "NO SDCARD PRESENT", $0D, $00
>1923c2	44 20 50 52 45 53 45 4e 54 0d 00
>1923cd	45 52 52 4f 52 20 49 4e		sd_card_err0        .text "ERROR IN READIND CARD", $00
>1923d5	20 52 45 41 44 49 4e 44 20 43 41 52 44 00
>1923e3	45 52 52 4f 52 20 4c 4f		sd_card_err1        .text "ERROR LOADING FILE", $00
>1923eb	41 44 49 4e 47 20 46 49 4c 45 00
>1923f6	4e 61 6d 65 3a 20 0d 00		sd_card_msg0        .text "Name: ", $0D,$00
>1923fe	53 44 43 41 52 44 20 44		sd_card_msg1        .text "SDCARD DETECTED", $00
>192406	45 54 45 43 54 45 44 00
>19240e	53 44 43 41 52 44 20 4d		sd_card_msg2        .text "SDCARD MOUNTED", $00
>192416	4f 55 4e 54 45 44 00
>19241d	46 41 49 4c 45 44 20 54		sd_card_msg3        .text "FAILED TO MOUNT SDCARD", $0D, $00
>192425	4f 20 4d 4f 55 4e 54 20 53 44 43 41 52 44 0d 00
>192435	46 49 4c 45 20 4f 50 45		sd_card_msg4        .text "FILE OPENED", $0D, $00
>19243d	4e 45 44 0d 00
>192442	45 4e 44 20 4f 46 20 46		sd_card_msg5        .text "END OF FILE...", $00
>19244a	49 4c 45 2e 2e 2e 00
>192451	46 49 4c 45 20 46 4f 55		sd_card_msg6        .text "FILE FOUND, LOADING...", $00
>192459	4e 44 2c 20 4c 4f 41 44 49 4e 47 2e 2e 2e 00
>192468	46 49 4c 45 20 4c 4f 41		sd_card_msg7        .text "FILE LOADED", $00
>192470	44 45 44 00

;******  Return to file: kernel.asm


;******  Processing file: OPL2_Library.asm


;******  Processing file: OPL2_def.asm

=$afe500				OPL2_L_BASE               = $AFE500
=$afe501				OPL2_L_TEST               = $AFE501 ; TEST
=$afe502				OPL2_L_TIMER1             = $AFE502 ; TIMER-1
=$afe503				OPL2_L_TIMER2             = $AFE503 ; TIMER-2
=$afe504				OPL2_L_IRQ                = $AFE504 ;
=$afe508				OPL2_L_CSM                = $AFE508 ;
=$afe520				OPL2_L_AM_VID_EG_KSR_MULT = $AFE520 ; $40..$35 (21 Registers)
=$afee40				OPL2_L_KSL_TL             = $AFEE40;  $40..$55 (21 Registers)
=$afe560				OPL2_L_AR_DR              = $AFE560;  $60..$75 (21 Registers)
=$afe580				OPL2_L_SL_RR              = $AFE580;  $80..$95 (21 Registers)
=$afe5a0				OPL2_L_FNumber            = $AFE5A0;  $A0..$A8
=$afe5b0				OPL2_L_KON_BLOCK_FNumber  = $AFE5B0;  $B0..$B9
=$afe5bd				OPL2_L_DPTH_RHYTM         = $AFE5BD;  $BD
=$afe5c0				OPL2_L_FEEDBACK           = $AFE5C0;  $C0..$C9
=$afe5e0				OPL2_L_WAVE_SELECT        = $AFE5E0;  $E0..$F5
=$afe600				OPL2_R_BASE               = $AFE600
=$afe601				OPL2_R_TEST               = $AFE601 ; TEST
=$afe602				OPL2_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL2_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL2_R_IRQ                = $AFE604 ;
=$afe608				OPL2_R_CSM                = $AFE608 ;
=$afe620				OPL2_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL2_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL2_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL2_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL2_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL2_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL2_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL2_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL2_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$e700					OPL2_S_BASE_LL            = $E700
=$00af					OPL2_S_BASE_HL            = $00AF
=$afe701				OPL2_S_TEST               = $AFE701 ; TEST
=$afe702				OPL2_S_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL2_S_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL2_S_IRQ                = $AFE704 ;
=$afe708				OPL2_S_CSM                = $AFE708 ;
=$afe720				OPL2_S_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL2_S_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL2_S_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL2_S_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL2_S_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL2_S_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL2_S_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL2_S_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL2_S_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=0					NOTE_C =    0
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
>192474	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>19247c	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>19248c	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>192494	12
>192495	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>19249d	15
>19249e	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>1924a4	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>1924a9	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: OPL2_Library.asm

.1924af					IOPL2_TONE_TEST
.1924af	e2 20		sep #$20	                SEP #$20        ; set A short
.1924b1	a9 01		lda #$01	                LDA #$01
.1924b3	85 26		sta $26		                STA OPL2_OPERATOR
.1924b5	c2 30		rep #$30	                REP #$30        ; set A&X long
.1924b7	22 2f 25 19	jsl $19252f	                JSL OPL2_INIT
.1924bb	e2 20		sep #$20	                SEP #$20        ; set A short
.1924bd	a9 00		lda #$00	                LDA #$00
.1924bf	85 36		sta $36		                STA OPL2_LOOP
.1924c1					OPL2_TONE_TESTING_L0
.1924c1	e2 20		sep #$20	                SEP #$20        ; set A short
.1924c3	a5 36		lda $36		                LDA OPL2_LOOP
.1924c5	85 27		sta $27		                STA OPL2_CHANNEL
.1924c7	38		sec		                SEC
.1924c8	22 7b 25 19	jsl $19257b	                JSL OPL2_SET_TREMOLO
.1924cc	38		sec		                SEC
.1924cd	22 aa 25 19	jsl $1925aa	                JSL OPL2_SET_VIBRATO
.1924d1	a9 04		lda #$04	                LDA #$04
.1924d3	85 32		sta $32		                STA OPL2_PARAMETER0
.1924d5	22 de 25 19	jsl $1925de	                JSL OPL2_SET_MULTIPLIER
.1924d9	a9 0a		lda #$0a	                LDA #$0A
.1924db	85 32		sta $32		                STA OPL2_PARAMETER0
.1924dd	22 46 26 19	jsl $192646	                JSL OPL2_SET_ATTACK
.1924e1	a9 04		lda #$04	                LDA #$04
.1924e3	85 32		sta $32		                STA OPL2_PARAMETER0
.1924e5	22 7a 26 19	jsl $19267a	                JSL OPL2_SET_DECAY
.1924e9	a9 0f		lda #$0f	                LDA #$0F
.1924eb	85 32		sta $32		                STA OPL2_PARAMETER0
.1924ed	22 a6 26 19	jsl $1926a6	                JSL OPL2_SET_SUSTAIN
.1924f1	a9 0f		lda #$0f	                LDA #$0F
.1924f3	85 32		sta $32		                STA OPL2_PARAMETER0
.1924f5	22 da 26 19	jsl $1926da	                JSL OPL2_SET_RELEASE
.1924f9	e2 20		sep #$20	                SEP #$20        ; set A short
.1924fb	e6 36		inc $36		                INC OPL2_LOOP
.1924fd	a5 36		lda $36		                LDA OPL2_LOOP
.1924ff	c9 03		cmp #$03	                CMP #$03
.192501	d0 be		bne $1924c1	                BNE OPL2_TONE_TESTING_L0
.192503	a9 00		lda #$00	                LDA #$00
.192505	85 36		sta $36		                STA OPL2_LOOP
.192507					OPL2_TONE_TESTING_L1
.192507	85 30		sta $30		                STA OPL2_NOTE
.192509	29 03		and #$03	                AND #$03        ; replace modulo 3
.19250b	85 27		sta $27		                STA OPL2_CHANNEL
.19250d	a9 03		lda #$03	                LDA #$03
.19250f	85 31		sta $31		                STA OPL2_OCTAVE
.192511	22 51 25 19	jsl $192551	                JSL OPL2_PLAYNOTE
.192515	e2 20		sep #$20	                SEP #$20        ; set A short
.192517	c2 10		rep #$10	                REP #$10        ; set X long
.192519	a2 00 00	ldx #$0000	                LDX #$0000
.19251c					OPL2_TONE_TESTING_L2
.19251c	ea		nop		                NOP
.19251d	ea		nop		                NOP
.19251e	ea		nop		                NOP
.19251f	ea		nop		                NOP
.192520	e8		inx		                INX
.192521	e0 ff ff	cpx #$ffff	                CPX #$FFFF
.192524	d0 f6		bne $19251c	                BNE OPL2_TONE_TESTING_L2
.192526	e6 36		inc $36		                INC OPL2_LOOP
.192528	a5 36		lda $36		                LDA OPL2_LOOP
.19252a	c9 0c		cmp #$0c	                CMP #12
.19252c	d0 d9		bne $192507	                BNE OPL2_TONE_TESTING_L1
.19252e	6b		rtl		                RTL
.19252f					OPL2_INIT
.19252f	c2 20		rep #$20	                REP #$20        ; set A long
.192531	a9 00 00	lda #$0000	                LDA #$0000
.192534	85 28		sta $28		                STA OPL2_REG_REGION
.192536	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.192538	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19253a	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.19253c	85 30		sta $30		                STA OPL2_NOTE
.19253e	85 32		sta $32		                STA OPL2_PARAMETER0
.192540	85 34		sta $34		                STA OPL2_PARAMETER2
.192542	6b		rtl		                RTL
.192543					OPL2_Reset
.192543	6b		rtl		                RTL
.192544					OPL2_Get_FrequencyBlock
.192544	6b		rtl		                RTL
.192545					OPL2_Get_Register
.192545	6b		rtl		                RTL
.192546					OPL2_Get_WaveFormSelect
.192546	6b		rtl		                RTL
.192547					OPL2_Get_ScalingLevel
.192547	6b		rtl		                RTL
.192548					OPL2_Get_Block
.192548	6b		rtl		                RTL
.192549					OPL2_Get_KeyOn
.192549	6b		rtl		                RTL
.19254a					OPL2_Get_Feedback
.19254a	6b		rtl		                RTL
.19254b					OPL2_Get_SynthMode
.19254b	6b		rtl		                RTL
.19254c					OPL2_Get_DeepTremolo
.19254c	6b		rtl		                RTL
.19254d					OPL2_Get_DeepVibrato
.19254d	6b		rtl		                RTL
.19254e					OPL2_Get_Percussion
.19254e	6b		rtl		                RTL
.19254f					OPL2_Get_Drums
.19254f	6b		rtl		                RTL
.192550					OPL2_Get_WaveForm
.192550	6b		rtl		                RTL
.192551					OPL2_PLAYNOTE
.192551	e2 20		sep #$20	                SEP #$20        ; set A short
.192553	a9 00		lda #$00	                LDA #$00
.192555	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.192557	20 a5 27	jsr $1927a5	                JSR OPL2_SET_KEYON
.19255a	20 74 27	jsr $192774	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.19255d	e2 10		sep #$10	                SEP #$10        ; set X short
.19255f	c2 20		rep #$20	                REP #$20        ; set A long
.192561	a6 30		ldx $30		                LDX OPL2_NOTE
.192563	bf 74 24 19	lda $192474,x	                LDA @lnoteFNumbers,X
.192567	85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 16bit in Param OPL2_PARAMETER0 & OPL2_PARAMETER1
.192569	22 06 27 19	jsl $192706	                JSL OPL2_SET_FNUMBER
.19256d	e2 20		sep #$20	                SEP #$20        ; set A short
.19256f	a9 01		lda #$01	                LDA #$01
.192571	85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.192573	20 a5 27	jsr $1927a5	                JSR OPL2_SET_KEYON
.192576	6b		rtl		                RTL
.192577					OPL2_PLAYDRUM
.192577	6b		rtl		                RTL
.192578					OPL2_Set_Instrument
.192578	6b		rtl		                RTL
.192579					OPL2_Set_Register
.192579	6b		rtl		                RTL
.19257a					OPL2_Set_WaveFormSelect
.19257a	6b		rtl		                RTL
.19257b					OPL2_SET_TREMOLO
.19257b	08		php		                PHP ; Push the Carry
.19257c	c2 20		rep #$20	                REP #$20        ; set A long
.19257e	a9 20 00	lda #$0020	                LDA #$0020;
.192581	85 28		sta $28		                STA OPL2_REG_REGION
.192583	20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.192586	28		plp		                PLP ; Pull the Carry out
.192587	e2 20		sep #$20	                SEP #$20        ; set A short
.192589	b0 08		bcs $192593	                BCS OPL2_Set_Tremolo_Set;
.19258b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19258d	29 7f		and #$7f	                AND #$7F
.19258f	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192591	80 06		bra $192599	                BRA OPL2_Set_Tremolo_Exit
.192593					OPL2_Set_Tremolo_Set
.192593	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192595	09 80		ora #$80	                ORA #$80
.192597	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192599					OPL2_Set_Tremolo_Exit
.192599	6b		rtl		                RTL
.19259a					OPL2_GET_TREMOLO
.19259a	c2 20		rep #$20	                REP #$20        ; set A long
.19259c	a9 20 00	lda #$0020	                LDA #$0020;
.19259f	85 28		sta $28		                STA OPL2_REG_REGION
.1925a1	20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1925a4	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925a6	29 80 00	and #$0080	                AND #$80
.1925a9	6b		rtl		                RTL
.1925aa					OPL2_SET_VIBRATO
.1925aa	08		php		                PHP ; Push the Carry
.1925ab	c2 20		rep #$20	                REP #$20        ; set A long
.1925ad	a9 20 00	lda #$0020	                LDA #$0020;
.1925b0	85 28		sta $28		                STA OPL2_REG_REGION
.1925b2	20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1925b5	28		plp		                PLP ; Pull the Carry out
.1925b6	e2 20		sep #$20	                SEP #$20        ; set A short
.1925b8	b0 08		bcs $1925c2	                BCS OPL2_Set_Vibrato_Set;
.1925ba	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925bc	29 bf		and #$bf	                AND #$BF
.1925be	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1925c0	80 06		bra $1925c8	                BRA OPL2_Set_Vibrato_Exit
.1925c2					OPL2_Set_Vibrato_Set
.1925c2	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925c4	09 40		ora #$40	                ORA #$40
.1925c6	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1925c8					OPL2_Set_Vibrato_Exit
.1925c8	6b		rtl		                RTL
.1925c9					OPL2_GET_VIBRATO
.1925c9	c2 20		rep #$20	                REP #$20        ; set A long
.1925cb	a9 20 00	lda #$0020	                LDA #$0020;
.1925ce	85 28		sta $28		                STA OPL2_REG_REGION
.1925d0	20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1925d3	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925d5	29 40 00	and #$0040	                AND #$40
.1925d8	6b		rtl		                RTL
.1925d9					OPL2_Set_MaintainSustain
.1925d9	6b		rtl		                RTL
.1925da					OPL2_Get_MaintainSustain
.1925da	6b		rtl		                RTL
.1925db					OPL2_Set_EnvelopeScaling
.1925db	6b		rtl		                RTL
.1925dc					OPL2_Get_EnvelopeScaling
.1925dc	6b		rtl		                RTL
.1925dd					OPL2_Get_Multiplier
.1925dd	6b		rtl		                RTL
.1925de					OPL2_SET_MULTIPLIER
.1925de	c2 20		rep #$20	                REP #$20        ; set A long
.1925e0	a9 20 00	lda #$0020	                LDA #$0020;
.1925e3	85 28		sta $28		                STA OPL2_REG_REGION
.1925e5	20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1925e8	e2 20		sep #$20	                SEP #$20        ; set A short
.1925ea	a5 32		lda $32		                LDA OPL2_PARAMETER0
.1925ec	29 0f		and #$0f	                AND #$0F
.1925ee	85 32		sta $32		                STA OPL2_PARAMETER0
.1925f0	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1925f2	29 f0		and #$f0	                AND #$F0
.1925f4	05 32		ora $32		                ORA OPL2_PARAMETER0
.1925f6	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1925f8	6b		rtl		                RTL
.1925f9					OPL2_SET_SCALINGLEVEL
.1925f9	c2 20		rep #$20	                REP #$20        ; set A long
.1925fb	a9 40 00	lda #$0040	                LDA #$0040;
.1925fe	85 28		sta $28		                STA OPL2_REG_REGION
.192600	20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.192603	e2 20		sep #$20	                SEP #$20        ; set A short
.192605	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.192607	29 03		and #$03	                AND #$03
.192609	0a		asl a		                ASL
.19260a	0a		asl a		                ASL
.19260b	0a		asl a		                ASL
.19260c	0a		asl a		                ASL
.19260d	0a		asl a		                ASL
.19260e	0a		asl a		                ASL
.19260f	85 32		sta $32		                STA OPL2_PARAMETER0
.192611	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192613	29 3f		and #$3f	                AND #$3F
.192615	05 32		ora $32		                ORA OPL2_PARAMETER0
.192617	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192619	6b		rtl		                RTL
.19261a					OPL2_SET_VOLUME
.19261a	c2 20		rep #$20	                REP #$20        ; set A long
.19261c	a9 40 00	lda #$0040	                LDA #$0040  ;
.19261f	85 28		sta $28		                STA OPL2_REG_REGION
.192621	20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.192624	e2 20		sep #$20	                SEP #$20        ; set A short
.192626	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.192628	29 3f		and #$3f	                AND #$3F
.19262a	85 32		sta $32		                STA OPL2_PARAMETER0
.19262c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19262e	29 c0		and #$c0	                AND #$C0
.192630	05 32		ora $32		                ORA OPL2_PARAMETER0
.192632	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192634	6b		rtl		                RTL
.192635					OPL2_GET_VOLUME
.192635	c2 20		rep #$20	                REP #$20        ; set A long
.192637	a9 40 00	lda #$0040	                LDA #$0040  ;
.19263a	85 28		sta $28		                STA OPL2_REG_REGION
.19263c	20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.19263f	e2 20		sep #$20	                SEP #$20        ; set A short
.192641	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192643	29 3f		and #$3f	                AND #$3F
.192645	6b		rtl		                RTL
.192646					OPL2_SET_ATTACK
.192646	c2 20		rep #$20	                REP #$20        ; set A long
.192648	a9 60 00	lda #$0060	                LDA #$0060  ;
.19264b	85 28		sta $28		                STA OPL2_REG_REGION
.19264d	20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.192650	e2 20		sep #$20	                SEP #$20        ; set A short
.192652	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.192654	29 0f		and #$0f	                AND #$0F
.192656	0a		asl a		                ASL
.192657	0a		asl a		                ASL
.192658	0a		asl a		                ASL
.192659	0a		asl a		                ASL
.19265a	85 32		sta $32		                STA OPL2_PARAMETER0
.19265c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19265e	29 0f		and #$0f	                AND #$0F
.192660	05 32		ora $32		                ORA OPL2_PARAMETER0
.192662	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192664	6b		rtl		                RTL
.192665					OPL2_GET_ATTACK
.192665	c2 20		rep #$20	                REP #$20        ; set A long
.192667	a9 60 00	lda #$0060	                LDA #$0060
.19266a	85 28		sta $28		                STA OPL2_REG_REGION
.19266c	20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.19266f	e2 20		sep #$20	                SEP #$20        ; set A short
.192671	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192673	29 f0		and #$f0	                AND #$F0
.192675	4a		lsr a		                LSR
.192676	4a		lsr a		                LSR
.192677	4a		lsr a		                LSR
.192678	4a		lsr a		                LSR
.192679	6b		rtl		                RTL
.19267a					OPL2_SET_DECAY
.19267a	c2 20		rep #$20	                REP #$20        ; set A long
.19267c	a9 60 00	lda #$0060	                LDA #$0060;
.19267f	85 28		sta $28		                STA OPL2_REG_REGION
.192681	20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.192684	e2 20		sep #$20	                SEP #$20        ; set A short
.192686	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.192688	29 0f		and #$0f	                AND #$0F
.19268a	85 32		sta $32		                STA OPL2_PARAMETER0
.19268c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19268e	29 f0		and #$f0	                AND #$F0
.192690	05 32		ora $32		                ORA OPL2_PARAMETER0
.192692	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.192694	6b		rtl		                RTL
.192695					OPL2_GET_DECAY
.192695	c2 20		rep #$20	                REP #$20        ; set A long
.192697	a9 60 00	lda #$0060	                LDA #$0060
.19269a	85 28		sta $28		                STA OPL2_REG_REGION
.19269c	20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.19269f	e2 20		sep #$20	                SEP #$20        ; set A short
.1926a1	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1926a3	29 0f		and #$0f	                AND #$0F
.1926a5	6b		rtl		                RTL
.1926a6					OPL2_SET_SUSTAIN
.1926a6	c2 20		rep #$20	                REP #$20        ; set A long
.1926a8	a9 80 00	lda #$0080	                LDA #$0080;
.1926ab	85 28		sta $28		                STA OPL2_REG_REGION
.1926ad	20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1926b0	e2 20		sep #$20	                SEP #$20        ; set A short
.1926b2	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1926b4	29 0f		and #$0f	                AND #$0F
.1926b6	0a		asl a		                ASL
.1926b7	0a		asl a		                ASL
.1926b8	0a		asl a		                ASL
.1926b9	0a		asl a		                ASL
.1926ba	85 32		sta $32		                STA OPL2_PARAMETER0
.1926bc	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1926be	29 0f		and #$0f	                AND #$0F
.1926c0	05 32		ora $32		                ORA OPL2_PARAMETER0
.1926c2	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1926c4	6b		rtl		                RTL
.1926c5					OPL2_GET_SUSTAIN
.1926c5	c2 20		rep #$20	                REP #$20        ; set A long
.1926c7	a9 80 00	lda #$0080	                LDA #$0080
.1926ca	85 28		sta $28		                STA OPL2_REG_REGION
.1926cc	20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1926cf	e2 20		sep #$20	                SEP #$20        ; set A short
.1926d1	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1926d3	29 f0		and #$f0	                AND #$F0
.1926d5	4a		lsr a		                LSR
.1926d6	4a		lsr a		                LSR
.1926d7	4a		lsr a		                LSR
.1926d8	4a		lsr a		                LSR
.1926d9	6b		rtl		                RTL
.1926da					OPL2_SET_RELEASE
.1926da	c2 20		rep #$20	                REP #$20        ; set A long
.1926dc	a9 80 00	lda #$0080	                LDA #$0080;
.1926df	85 28		sta $28		                STA OPL2_REG_REGION
.1926e1	20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1926e4	e2 20		sep #$20	                SEP #$20        ; set A short
.1926e6	a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1926e8	29 0f		and #$0f	                AND #$0F
.1926ea	85 32		sta $32		                STA OPL2_PARAMETER0
.1926ec	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1926ee	29 f0		and #$f0	                AND #$F0
.1926f0	05 32		ora $32		                ORA OPL2_PARAMETER0
.1926f2	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1926f4	6b		rtl		                RTL
.1926f5					OPL2_GET_RELEASE
.1926f5	c2 20		rep #$20	                REP #$20        ; set A long
.1926f7	a9 80 00	lda #$0080	                LDA #$0080
.1926fa	85 28		sta $28		                STA OPL2_REG_REGION
.1926fc	20 e0 27	jsr $1927e0	                JSR OPL2_GET_REG_OFFSET
.1926ff	e2 20		sep #$20	                SEP #$20        ; set A short
.192701	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192703	29 0f		and #$0f	                AND #$0F
.192705	6b		rtl		                RTL
.192706					OPL2_SET_FNUMBER
.192706	e2 20		sep #$20	                SEP #$20        ; set A short
.192708	18		clc		                CLC
.192709	a5 27		lda $27		                LDA OPL2_CHANNEL
.19270b	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.19270d	69 a0		adc #$a0	                ADC #$A0
.19270f	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.192711	a9 00		lda #$00	                LDA #$00
.192713	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.192715	c2 30		rep #$30	                REP #$30        ; set A&X long
.192717	18		clc		                CLC
.192718	a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.19271b	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.19271d	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19271f	a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.192722	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.192724	e2 20		sep #$20	                SEP #$20        ; set A short
.192726	a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the 16Bits Value of FNumber
.192728	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.19272a	18		clc		                CLC
.19272b	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.19272d	69 10		adc #$10	                ADC #$10
.19272f	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.192731	a5 33		lda $33		                LDA OPL2_PARAMETER1
.192733	29 03		and #$03	                AND #$03
.192735	85 33		sta $33		                STA OPL2_PARAMETER1
.192737	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192739	29 fc		and #$fc	                AND #$FC
.19273b	05 33		ora $33		                ORA OPL2_PARAMETER1
.19273d	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19273f	6b		rtl		                RTL
.192740					OPL2_GET_FNUMBER
.192740	e2 20		sep #$20	                SEP #$20        ; set A short
.192742	18		clc		                CLC
.192743	a5 27		lda $27		                LDA OPL2_CHANNEL
.192745	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.192747	69 a0		adc #$a0	                ADC #$A0
.192749	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.19274b	a9 00		lda #$00	                LDA #$00
.19274d	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.19274f	c2 30		rep #$30	                REP #$30        ; set A&X long
.192751	18		clc		                CLC
.192752	a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.192755	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.192757	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.192759	a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.19275c	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.19275e	e2 20		sep #$20	                SEP #$20        ; set A short
.192760	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.192762	85 32		sta $32		                STA OPL2_PARAMETER0
.192764	18		clc		                CLC
.192765	a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.192767	69 10		adc #$10	                ADC #$10
.192769	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19276b	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19276d	29 03		and #$03	                AND #$03
.19276f	85 33		sta $33		                STA OPL2_PARAMETER1
.192771	6b		rtl		                RTL
.192772					OPL2_Set_Frequency
.192772	6b		rtl		                RTL
.192773					OPL2_Get_Frequency
.192773	6b		rtl		                RTL
.192774					OPL2_SET_BLOCK
.192774	e2 20		sep #$20	                SEP #$20        ; set A short
.192776	18		clc		                CLC
.192777	a5 27		lda $27		                LDA OPL2_CHANNEL
.192779	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.19277b	69 b0		adc #$b0	                ADC #$B0
.19277d	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.19277f	a9 00		lda #$00	                LDA #$00
.192781	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.192783	c2 30		rep #$30	                REP #$30        ; set A&X long
.192785	18		clc		                CLC
.192786	a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.192789	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.19278b	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19278d	a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.192790	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.192792	e2 20		sep #$20	                SEP #$20        ; set A short
.192794	a5 31		lda $31		                LDA OPL2_OCTAVE
.192796	29 07		and #$07	                AND #$07
.192798	0a		asl a		                ASL
.192799	0a		asl a		                ASL
.19279a	85 31		sta $31		                STA OPL2_OCTAVE
.19279c	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19279e	29 e3		and #$e3	                AND #$E3
.1927a0	05 31		ora $31		                ORA OPL2_OCTAVE
.1927a2	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1927a4	60		rts		                RTS
.1927a5					OPL2_SET_KEYON
.1927a5	e2 20		sep #$20	                SEP #$20        ; set A short
.1927a7	18		clc		                CLC
.1927a8	a5 27		lda $27		                LDA OPL2_CHANNEL
.1927aa	29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.1927ac	69 b0		adc #$b0	                ADC #$B0
.1927ae	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1927b0	a9 00		lda #$00	                LDA #$00
.1927b2	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1927b4	c2 30		rep #$30	                REP #$30        ; set A&X long
.1927b6	18		clc		                CLC
.1927b7	a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.1927ba	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.1927bc	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1927be	a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.1927c1	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1927c3	e2 20		sep #$20	                SEP #$20        ; set A short
.1927c5	a5 32		lda $32		                LDA OPL2_PARAMETER0
.1927c7	29 01		and #$01	                AND #$01
.1927c9	0a		asl a		                ASL
.1927ca	0a		asl a		                ASL
.1927cb	0a		asl a		                ASL
.1927cc	0a		asl a		                ASL
.1927cd	0a		asl a		                ASL
.1927ce	85 32		sta $32		                STA OPL2_PARAMETER0
.1927d0	a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1927d2	29 df		and #$df	                AND #$DF
.1927d4	05 32		ora $32		                ORA OPL2_PARAMETER0
.1927d6	87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1927d8	60		rts		                RTS
.1927d9					OPL2_Set_Feedback
.1927d9	6b		rtl		                RTL
.1927da					OPL2_Set_SynthMode
.1927da	6b		rtl		                RTL
.1927db					OPL2_Set_DeepTremolo
.1927db	6b		rtl		                RTL
.1927dc					OPL2_Set_DeepVibrato
.1927dc	6b		rtl		                RTL
.1927dd					OPL2_Set_Percussion
.1927dd	6b		rtl		                RTL
.1927de					OPL2_Set_Drums
.1927de	6b		rtl		                RTL
.1927df					OPL2_Set_WaveForm
.1927df	6b		rtl		                RTL
.1927e0					OPL2_GET_REG_OFFSET
.1927e0	e2 30		sep #$30	                SEP #$30        ; set A&X short
.1927e2	a5 27		lda $27		                LDA OPL2_CHANNEL
.1927e4	29 0f		and #$0f	                AND #$0F
.1927e6	aa		tax		                TAX
.1927e7	a5 26		lda $26		                LDA OPL2_OPERATOR   ; Check which Operator In used
.1927e9	29 01		and #$01	                AND #$01            ; if ZERO = The operator 1, One = Operator 2
.1927eb	c9 01		cmp #$01	                CMP #$01
.1927ed	f0 06		beq $1927f5	                BEQ OPL2_Get_Register_Offset_l0
.1927ef	bf 8c 24 19	lda $19248c,x	                LDA @lregisterOffsets_operator0, X
.1927f3	80 04		bra $1927f9	                BRA OPL2_Get_Register_Offset_exit
.1927f5					OPL2_Get_Register_Offset_l0
.1927f5	bf 95 24 19	lda $192495,x	                LDA @lregisterOffsets_operator1, X
.1927f9					OPL2_Get_Register_Offset_exit
.1927f9	85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1927fb	a9 00		lda #$00	                LDA #$00
.1927fd	85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1927ff	c2 30		rep #$30	                REP #$30        ; set A&X long
.192801	18		clc		                CLC
.192802	a9 00 e7	lda #$e700	                LDA #OPL2_S_BASE_LL
.192805	65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.192807	65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.192809	85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19280b	a9 af 00	lda #$00af	                LDA #OPL2_S_BASE_HL
.19280e	85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.192810	60		rts		                RTS

;******  Return to file: kernel.asm


;******  Processing file: BM437_ATI_FontSet.asm

>1ff800	00 00 00 00 00 00 00 00		BM437_ATI_8X8_Font_Set  .text   $00, $00, $00, $00, $00, $00, $00, $00 ; #0
>1ff808	3f 40 52 40 5e 4c 40 3f		                        .text	$3F, $40, $52, $40, $5E, $4C, $40, $3F ; #1
>1ff810	1f 3f 35 2e 31 3f 1f 00		                        .text	$1F, $3F, $35, $2E, $31, $3F, $1F, $00 ; #2
>1ff818	31 3b 3f 3f 1f 0e 04 00		                        .text	$31, $3B, $3F, $3F, $1F, $0E, $04, $00 ; #3
>1ff820	04 0e 1f 3f 1f 0e 04 00		                        .text	$04, $0E, $1F, $3F, $1F, $0E, $04, $00 ; #4
>1ff828	04 0e 04 3b 3b 04 0e 00		                        .text	$04, $0E, $04, $3B, $3B, $04, $0E, $00 ; #5
>1ff830	0e 1f 3f 3f 1b 04 0e 00		                        .text	$0E, $1F, $3F, $3F, $1B, $04, $0E, $00 ; #6
>1ff838	00 0c 1e 3f 1e 0c 00 00		                        .text	$00, $0C, $1E, $3F, $1E, $0C, $00, $00 ; #7
>1ff840	7f 73 61 40 61 73 7f 7f		                        .text	$7F, $73, $61, $40, $61, $73, $7F, $7F ; #8
>1ff848	00 0c 1e 33 33 1e 0c 00		                        .text	$00, $0C, $1E, $33, $33, $1E, $0C, $00 ; #9
>1ff850	7f 73 61 4c 4c 61 73 7f		                        .text	$7F, $73, $61, $4C, $4C, $61, $73, $7F ; #10
>1ff858	3c 38 3c 36 0f 19 19 0f		                        .text	$3C, $38, $3C, $36, $0F, $19, $19, $0F ; #11
>1ff860	3f 61 61 3f 0c 3f 0c 0c		                        .text	$3F, $61, $61, $3F, $0C, $3F, $0C, $0C ; #12
>1ff868	40 60 70 78 7c 7e 7f 7f		                        .text	$40, $60, $70, $78, $7C, $7E, $7F, $7F ; #13
>1ff870	7f 3f 1f 0f 07 03 01 00		                        .text	$7F, $3F, $1F, $0F, $07, $03, $01, $00 ; #14
>1ff878	6d 1e 33 73 33 1e 6d 00		                        .text	$6D, $1E, $33, $73, $33, $1E, $6D, $00 ; #15
>1ff880	00 01 07 0f 07 01 00 00		                        .text	$00, $01, $07, $0F, $07, $01, $00, $00 ; #16
>1ff888	20 30 3c 3e 3c 30 20 00		                        .text	$20, $30, $3C, $3E, $3C, $30, $20, $00 ; #17
>1ff890	0c 1e 3f 0c 3f 1e 0c 00		                        .text	$0C, $1E, $3F, $0C, $3F, $1E, $0C, $00 ; #18
>1ff898	33 33 33 33 33 00 33 00		                        .text	$33, $33, $33, $33, $33, $00, $33, $00 ; #19
>1ff8a0	7f 6d 6f 6e 6c 6c 6c 00		                        .text	$7F, $6D, $6F, $6E, $6C, $6C, $6C, $00 ; #20
>1ff8a8	1e 33 0e 1b 1b 0e 19 0f		                        .text	$1E, $33, $0E, $1B, $1B, $0E, $19, $0F ; #21
>1ff8b0	00 00 00 00 3f 3f 3f 00		                        .text	$00, $00, $00, $00, $3F, $3F, $3F, $00 ; #22
>1ff8b8	0c 1e 3f 0c 3f 1e 0c 3f		                        .text	$0C, $1E, $3F, $0C, $3F, $1E, $0C, $3F ; #23
>1ff8c0	0c 1e 3f 0c 0c 0c 0c 00		                        .text	$0C, $1E, $3F, $0C, $0C, $0C, $0C, $00 ; #24
>1ff8c8	0c 0c 0c 0c 3f 1e 0c 00		                        .text	$0C, $0C, $0C, $0C, $3F, $1E, $0C, $00 ; #25
>1ff8d0	00 0c 1c 3f 1c 0c 00 00		                        .text	$00, $0C, $1C, $3F, $1C, $0C, $00, $00 ; #26
>1ff8d8	00 06 07 3f 07 06 00 00		                        .text	$00, $06, $07, $3F, $07, $06, $00, $00 ; #27
>1ff8e0	00 00 01 01 01 3f 00 00		                        .text	$00, $00, $01, $01, $01, $3F, $00, $00 ; #28
>1ff8e8	00 12 33 7f 33 12 00 00		                        .text	$00, $12, $33, $7F, $33, $12, $00, $00 ; #29
>1ff8f0	00 00 00 00 00 00 00 00		                        .text	$00, $00, $00, $00, $00, $00, $00, $00 ; #30
>1ff8f8	00 00 00 00 00 00 00 00		                        .text	$00, $00, $00, $00, $00, $00, $00, $00 ; #31
>1ff900	00 00 00 00 00 00 00 00		                        .text	$00, $00, $00, $00, $00, $00, $00, $00 ; #32
>1ff908	0c 1e 1e 0c 0c 00 0c 00		                        .text	$0C, $1E, $1E, $0C, $0C, $00, $0C, $00 ; #33
>1ff910	1b 1b 1b 00 00 00 00 00		                        .text	$1B, $1B, $1B, $00, $00, $00, $00, $00 ; #34
>1ff918	1b 1b 3f 1b 3f 1b 1b 00		                        .text	$1B, $1B, $3F, $1B, $3F, $1B, $1B, $00 ; #35
>1ff920	0c 3f 01 1f 30 1f 0c 00		                        .text	$0C, $3F, $01, $1F, $30, $1F, $0C, $00 ; #36
>1ff928	00 31 18 0c 06 03 31 00		                        .text	$00, $31, $18, $0C, $06, $03, $31, $00 ; #37
>1ff930	00 00 00 00 00 00 00 00		                        .text	$00, $00, $00, $00, $00, $00, $00, $00 ; #38
>1ff938	0c 0c 06 00 00 00 00 00		                        .text	$0C, $0C, $06, $00, $00, $00, $00, $00 ; #39
>1ff940	0c 06 03 03 03 06 0c 00		                        .text	$0C, $06, $03, $03, $03, $06, $0C, $00 ; #40
>1ff948	03 06 0c 0c 0c 06 03 00		                        .text	$03, $06, $0C, $0C, $0C, $06, $03, $00 ; #41
>1ff950	00 3b 1f 3f 1f 3b 00 00		                        .text	$00, $3B, $1F, $3F, $1F, $3B, $00, $00 ; #42
>1ff958	00 0c 0c 3f 0c 0c 00 00		                        .text	$00, $0C, $0C, $3F, $0C, $0C, $00, $00 ; #43
>1ff960	00 00 00 00 0c 0c 06 00		                        .text	$00, $00, $00, $00, $0C, $0C, $06, $00 ; #44
>1ff968	00 00 00 3f 00 00 00 00		                        .text	$00, $00, $00, $3F, $00, $00, $00, $00 ; #45
>1ff970	00 00 00 00 00 0e 0e 00		                        .text	$00, $00, $00, $00, $00, $0E, $0E, $00 ; #46
>1ff978	30 18 0c 06 03 01 00 00		                        .text	$30, $18, $0C, $06, $03, $01, $00, $00 ; #47
>1ff980	1f 31 39 3d 37 33 1f 00		                        .text	$1F, $31, $39, $3D, $37, $33, $1F, $00 ; #48
>1ff988	0c 0f 0c 0c 0c 0c 3f 00		                        .text	$0C, $0F, $0C, $0C, $0C, $0C, $3F, $00 ; #49
>1ff990	1f 31 18 0c 06 33 3f 00		                        .text	$1F, $31, $18, $0C, $06, $33, $3F, $00 ; #50
>1ff998	1f 31 30 1e 30 31 1f 00		                        .text	$1F, $31, $30, $1E, $30, $31, $1F, $00 ; #51
>1ff9a0	18 1c 1e 1b 3f 18 18 00		                        .text	$18, $1C, $1E, $1B, $3F, $18, $18, $00 ; #52
>1ff9a8	3f 01 1f 30 30 31 1f 00		                        .text	$3F, $01, $1F, $30, $30, $31, $1F, $00 ; #53
>1ff9b0	1f 31 01 1f 31 31 1f 00		                        .text	$1F, $31, $01, $1F, $31, $31, $1F, $00 ; #54
>1ff9b8	3f 31 30 18 0c 0c 0c 00		                        .text	$3F, $31, $30, $18, $0C, $0C, $0C, $00 ; #55
>1ff9c0	1f 31 31 1f 31 31 1f 00		                        .text	$1F, $31, $31, $1F, $31, $31, $1F, $00 ; #56
>1ff9c8	1f 31 31 3f 30 31 1f 00		                        .text	$1F, $31, $31, $3F, $30, $31, $1F, $00 ; #57
>1ff9d0	00 1c 1c 00 00 1c 1c 00		                        .text	$00, $1C, $1C, $00, $00, $1C, $1C, $00 ; #58
>1ff9d8	00 0c 0c 00 00 0c 0c 06		                        .text	$00, $0C, $0C, $00, $00, $0C, $0C, $06 ; #59
>1ff9e0	18 0c 06 03 06 0c 18 00		                        .text	$18, $0C, $06, $03, $06, $0C, $18, $00 ; #60
>1ff9e8	00 00 3f 00 00 3f 00 00		                        .text	$00, $00, $3F, $00, $00, $3F, $00, $00 ; #61
>1ff9f0	03 06 0c 18 0c 06 03 00		                        .text	$03, $06, $0C, $18, $0C, $06, $03, $00 ; #62
>1ff9f8	1f 31 30 18 0c 00 0c 00		                        .text	$1F, $31, $30, $18, $0C, $00, $0C, $00 ; #63
>1ffa00	1f 31 31 3d 1d 01 3f 00		                        .text	$1F, $31, $31, $3D, $1D, $01, $3F, $00 ; #64
>1ffa08	0e 1b 31 31 3f 31 31 00		                        .text	$0E, $1B, $31, $31, $3F, $31, $31, $00 ; #65
>1ffa10	1f 33 33 1f 33 33 1f 00		                        .text	$1F, $33, $33, $1F, $33, $33, $1F, $00 ; #66
>1ffa18	1e 33 01 01 01 33 1e 00		                        .text	$1E, $33, $01, $01, $01, $33, $1E, $00 ; #67
>1ffa20	0f 1b 33 33 33 1b 0f 00		                        .text	$0F, $1B, $33, $33, $33, $1B, $0F, $00 ; #68
>1ffa28	3f 21 01 0f 01 21 3f 00		                        .text	$3F, $21, $01, $0F, $01, $21, $3F, $00 ; #69
>1ffa30	3f 23 03 1f 03 03 07 00		                        .text	$3F, $23, $03, $1F, $03, $03, $07, $00 ; #70
>1ffa38	1f 31 01 01 3d 31 1f 00		                        .text	$1F, $31, $01, $01, $3D, $31, $1F, $00 ; #71
>1ffa40	31 31 31 3f 31 31 31 00		                        .text	$31, $31, $31, $3F, $31, $31, $31, $00 ; #72
>1ffa48	1e 0c 0c 0c 0c 0c 1e 00		                        .text	$1E, $0C, $0C, $0C, $0C, $0C, $1E, $00 ; #73
>1ffa50	1e 0c 0c 0c 0d 0d 07 00		                        .text	$1E, $0C, $0C, $0C, $0D, $0D, $07, $00 ; #74
>1ffa58	31 19 0d 07 0d 19 31 00		                        .text	$31, $19, $0D, $07, $0D, $19, $31, $00 ; #75
>1ffa60	07 03 03 03 03 23 3f 00		                        .text	$07, $03, $03, $03, $03, $23, $3F, $00 ; #76
>1ffa68	31 3b 3f 35 35 31 31 00		                        .text	$31, $3B, $3F, $35, $35, $31, $31, $00 ; #77
>1ffa70	31 33 33 37 3d 39 31 00		                        .text	$31, $33, $33, $37, $3D, $39, $31, $00 ; #78
>1ffa78	1f 31 31 31 31 31 1f 00		                        .text	$1F, $31, $31, $31, $31, $31, $1F, $00 ; #79
>1ffa80	1f 33 33 1f 03 03 07 00		                        .text	$1F, $33, $33, $1F, $03, $03, $07, $00 ; #80
>1ffa88	1f 31 31 31 31 35 1f 30		                        .text	$1F, $31, $31, $31, $31, $35, $1F, $30 ; #81
>1ffa90	1f 31 31 1f 0d 19 31 00		                        .text	$1F, $31, $31, $1F, $0D, $19, $31, $00 ; #82
>1ffa98	1f 31 01 1f 30 31 1f 00		                        .text	$1F, $31, $01, $1F, $30, $31, $1F, $00 ; #83
>1ffaa0	3f 2d 0c 0c 0c 0c 1e 00		                        .text	$3F, $2D, $0C, $0C, $0C, $0C, $1E, $00 ; #84
>1ffaa8	31 31 31 31 31 31 1f 00		                        .text	$31, $31, $31, $31, $31, $31, $1F, $00 ; #85
>1ffab0	31 31 31 31 1b 0e 04 00		                        .text	$31, $31, $31, $31, $1B, $0E, $04, $00 ; #86
>1ffab8	31 31 35 35 3f 3b 31 00		                        .text	$31, $31, $35, $35, $3F, $3B, $31, $00 ; #87
>1ffac0	31 1b 0e 0e 0e 1b 31 00		                        .text	$31, $1B, $0E, $0E, $0E, $1B, $31, $00 ; #88
>1ffac8	33 33 33 1e 0c 0c 1e 00		                        .text	$33, $33, $33, $1E, $0C, $0C, $1E, $00 ; #89
>1ffad0	3f 30 18 0c 06 23 3f 00		                        .text	$3F, $30, $18, $0C, $06, $23, $3F, $00 ; #90
>1ffad8	1f 03 03 03 03 03 1f 00		                        .text	$1F, $03, $03, $03, $03, $03, $1F, $00 ; #91
>1ffae0	01 03 06 0c 18 30 20 00		                        .text	$01, $03, $06, $0C, $18, $30, $20, $00 ; #92
>1ffae8	1f 18 18 18 18 18 1f 00		                        .text	$1F, $18, $18, $18, $18, $18, $1F, $00 ; #93
>1ffaf0	04 0e 1b 31 00 00 00 00		                        .text	$04, $0E, $1B, $31, $00, $00, $00, $00 ; #94
>1ffaf8	00 00 00 00 00 00 00 7f		                        .text	$00, $00, $00, $00, $00, $00, $00, $7F ; #95
>1ffb00	06 06 0c 00 00 00 00 00		                        .text	$06, $06, $0C, $00, $00, $00, $00, $00 ; #96
>1ffb08	00 00 0f 18 1f 19 3f 00		                        .text	$00, $00, $0F, $18, $1F, $19, $3F, $00 ; #97
>1ffb10	03 03 1f 33 33 33 1f 00		                        .text	$03, $03, $1F, $33, $33, $33, $1F, $00 ; #98
>1ffb18	00 00 1f 31 01 31 1f 00		                        .text	$00, $00, $1F, $31, $01, $31, $1F, $00 ; #99
>1ffb20	1c 18 1f 19 19 19 3f 00		                        .text	$1C, $18, $1F, $19, $19, $19, $3F, $00 ; #100
>1ffb28	00 00 1f 31 3f 01 1f 00		                        .text	$00, $00, $1F, $31, $3F, $01, $1F, $00 ; #101
>1ffb30	1c 36 06 1f 06 06 0f 00		                        .text	$1C, $36, $06, $1F, $06, $06, $0F, $00 ; #102
>1ffb38	00 00 37 39 31 3f 30 1f		                        .text	$00, $00, $37, $39, $31, $3F, $30, $1F ; #103
>1ffb40	03 03 1f 33 33 33 33 00		                        .text	$03, $03, $1F, $33, $33, $33, $33, $00 ; #104
>1ffb48	0c 00 0e 0c 0c 0c 1e 00		                        .text	$0C, $00, $0E, $0C, $0C, $0C, $1E, $00 ; #105
>1ffb50	18 00 1c 18 18 18 19 0f		                        .text	$18, $00, $1C, $18, $18, $18, $19, $0F ; #106
>1ffb58	03 03 33 1b 0f 1b 33 00		                        .text	$03, $03, $33, $1B, $0F, $1B, $33, $00 ; #107
>1ffb60	0c 0c 0c 0c 0c 0c 1c 00		                        .text	$0C, $0C, $0C, $0C, $0C, $0C, $1C, $00 ; #108
>1ffb68	00 00 1b 3f 35 35 31 00		                        .text	$00, $00, $1B, $3F, $35, $35, $31, $00 ; #109
>1ffb70	00 00 1d 33 33 33 33 00		                        .text	$00, $00, $1D, $33, $33, $33, $33, $00 ; #110
>1ffb78	00 00 1f 31 31 31 1f 00		                        .text	$00, $00, $1F, $31, $31, $31, $1F, $00 ; #111
>1ffb80	00 00 1d 33 33 1f 03 07		                        .text	$00, $00, $1D, $33, $33, $1F, $03, $07 ; #112
>1ffb88	00 00 37 19 19 1f 18 3c		                        .text	$00, $00, $37, $19, $19, $1F, $18, $3C ; #113
>1ffb90	00 00 1d 33 03 03 07 00		                        .text	$00, $00, $1D, $33, $03, $03, $07, $00 ; #114
>1ffb98	00 00 1f 01 1f 30 1f 00		                        .text	$00, $00, $1F, $01, $1F, $30, $1F, $00 ; #115
>1ffba0	06 06 1f 06 06 36 1c 00		                        .text	$06, $06, $1F, $06, $06, $36, $1C, $00 ; #116
>1ffba8	00 00 19 19 19 19 37 00		                        .text	$00, $00, $19, $19, $19, $19, $37, $00 ; #117
>1ffbb0	00 00 31 31 1b 0e 04 00		                        .text	$00, $00, $31, $31, $1B, $0E, $04, $00 ; #118
>1ffbb8	00 00 31 31 35 3f 1b 00		                        .text	$00, $00, $31, $31, $35, $3F, $1B, $00 ; #119
>1ffbc0	00 00 31 1b 0e 1b 31 00		                        .text	$00, $00, $31, $1B, $0E, $1B, $31, $00 ; #120
>1ffbc8	00 00 31 31 39 37 30 1f		                        .text	$00, $00, $31, $31, $39, $37, $30, $1F ; #121
>1ffbd0	00 00 1f 0c 06 13 1f 00		                        .text	$00, $00, $1F, $0C, $06, $13, $1F, $00 ; #122
>1ffbd8	38 0c 0c 07 0c 0c 38 00		                        .text	$38, $0C, $0C, $07, $0C, $0C, $38, $00 ; #123
>1ffbe0	0c 0c 0c 00 0c 0c 0c 00		                        .text	$0C, $0C, $0C, $00, $0C, $0C, $0C, $00 ; #124
>1ffbe8	07 0c 0c 38 0c 0c 07 00		                        .text	$07, $0C, $0C, $38, $0C, $0C, $07, $00 ; #125
>1ffbf0	37 1d 00 00 00 00 00 00		                        .text	$37, $1D, $00, $00, $00, $00, $00, $00 ; #126
>1ffbf8	00 04 0e 0e 1b 1b 3f 00		                        .text	$00, $04, $0E, $0E, $1B, $1B, $3F, $00 ; #127
>1ffc00	1e 33 01 33 1e 0c 19 0f		                        .text	$1E, $33, $01, $33, $1E, $0C, $19, $0F ; #128
>1ffc08	00 31 00 31 31 39 37 00		                        .text	$00, $31, $00, $31, $31, $39, $37, $00 ; #129
>1ffc10	38 00 1f 31 3f 01 1f 00		                        .text	$38, $00, $1F, $31, $3F, $01, $1F, $00 ; #130
>1ffc18	1f 31 0f 18 1f 19 3f 00		                        .text	$1F, $31, $0F, $18, $1F, $19, $3F, $00 ; #131
>1ffc20	31 00 0f 18 1f 19 3f 00		                        .text	$31, $00, $0F, $18, $1F, $19, $3F, $00 ; #132
>1ffc28	03 00 0f 18 1f 19 3f 00		                        .text	$03, $00, $0F, $18, $1F, $19, $3F, $00 ; #133
>1ffc30	0e 0e 0f 18 1f 19 3f 00		                        .text	$0E, $0E, $0F, $18, $1F, $19, $3F, $00 ; #134
>1ffc38	00 00 1f 01 1f 0c 1b 0e		                        .text	$00, $00, $1F, $01, $1F, $0C, $1B, $0E ; #135
>1ffc40	1f 31 1f 31 3f 01 1f 00		                        .text	$1F, $31, $1F, $31, $3F, $01, $1F, $00 ; #136
>1ffc48	31 00 1f 31 3f 01 1f 00		                        .text	$31, $00, $1F, $31, $3F, $01, $1F, $00 ; #137
>1ffc50	03 00 1f 31 3f 01 1f 00		                        .text	$03, $00, $1F, $31, $3F, $01, $1F, $00 ; #138
>1ffc58	33 00 0e 0c 0c 0c 1e 00		                        .text	$33, $00, $0E, $0C, $0C, $0C, $1E, $00 ; #139
>1ffc60	1f 31 0e 0c 0c 0c 1e 00		                        .text	$1F, $31, $0E, $0C, $0C, $0C, $1E, $00 ; #140
>1ffc68	03 00 0e 0c 0c 0c 1e 00		                        .text	$03, $00, $0E, $0C, $0C, $0C, $1E, $00 ; #141
>1ffc70	31 0e 1b 31 3f 31 31 00		                        .text	$31, $0E, $1B, $31, $3F, $31, $31, $00 ; #142
>1ffc78	0e 0e 00 1f 31 3f 31 00		                        .text	$0E, $0E, $00, $1F, $31, $3F, $31, $00 ; #143
>1ffc80	38 00 3f 01 0f 01 3f 00		                        .text	$38, $00, $3F, $01, $0F, $01, $3F, $00 ; #144
>1ffc88	00 00 1b 2c 3f 0d 3b 00		                        .text	$00, $00, $1B, $2C, $3F, $0D, $3B, $00 ; #145
>1ffc90	3f 0d 0d 3f 0d 0d 3d 00		                        .text	$3F, $0D, $0D, $3F, $0D, $0D, $3D, $00 ; #146
>1ffc98	1f 31 00 1f 31 31 1f 00		                        .text	$1F, $31, $00, $1F, $31, $31, $1F, $00 ; #147
>1ffca0	00 31 00 1f 31 31 1f 00		                        .text	$00, $31, $00, $1F, $31, $31, $1F, $00 ; #148
>1ffca8	00 03 00 1f 31 31 1f 00		                        .text	$00, $03, $00, $1F, $31, $31, $1F, $00 ; #149
>1ffcb0	1f 31 00 31 31 39 37 00		                        .text	$1F, $31, $00, $31, $31, $39, $37, $00 ; #150
>1ffcb8	00 03 00 31 31 39 37 00		                        .text	$00, $03, $00, $31, $31, $39, $37, $00 ; #151
>1ffcc0	00 31 00 31 39 37 30 1f		                        .text	$00, $31, $00, $31, $39, $37, $30, $1F ; #152
>1ffcc8	31 0e 1b 31 31 1b 0e 00		                        .text	$31, $0E, $1B, $31, $31, $1B, $0E, $00 ; #153
>1ffcd0	31 00 31 31 31 31 1f 00		                        .text	$31, $00, $31, $31, $31, $31, $1F, $00 ; #154
>1ffcd8	00 0c 3f 0d 0d 3f 0c 00		                        .text	$00, $0C, $3F, $0D, $0D, $3F, $0C, $00 ; #155
>1ffce0	0e 1b 03 07 33 37 1b 00		                        .text	$0E, $1B, $03, $07, $33, $37, $1B, $00 ; #156
>1ffce8	61 33 1e 3f 0c 1e 0c 00		                        .text	$61, $33, $1E, $3F, $0C, $1E, $0C, $00 ; #157
>1ffcf0	1f 31 1f 19 3d 19 39 00		                        .text	$1F, $31, $1F, $19, $3D, $19, $39, $00 ; #158
>1ffcf8	18 3c 0c 3f 0c 0c 0d 07		                        .text	$18, $3C, $0C, $3F, $0C, $0C, $0D, $07 ; #159
>1ffd00	38 00 0f 18 1f 19 3f 00		                        .text	$38, $00, $0F, $18, $1F, $19, $3F, $00 ; #160
>1ffd08	1c 00 0e 0c 0c 0c 1e 00		                        .text	$1C, $00, $0E, $0C, $0C, $0C, $1E, $00 ; #161
>1ffd10	00 38 00 1f 31 31 1f 00		                        .text	$00, $38, $00, $1F, $31, $31, $1F, $00 ; #162
>1ffd18	00 38 00 19 19 1d 37 00		                        .text	$00, $38, $00, $19, $19, $1D, $37, $00 ; #163
>1ffd20	00 1f 00 1e 33 33 33 00		                        .text	$00, $1F, $00, $1E, $33, $33, $33, $00 ; #164
>1ffd28	3f 00 31 33 37 39 31 00		                        .text	$3F, $00, $31, $33, $37, $39, $31, $00 ; #165
>1ffd30	0e 1b 3e 00 3f 00 00 00		                        .text	$0E, $1B, $3E, $00, $3F, $00, $00, $00 ; #166
>1ffd38	1f 31 1f 00 1f 00 00 00		                        .text	$1F, $31, $1F, $00, $1F, $00, $00, $00 ; #167
>1ffd40	0c 00 0c 06 03 33 1e 00		                        .text	$0C, $00, $0C, $06, $03, $33, $1E, $00 ; #168
>1ffd48	00 00 00 1f 03 03 00 00		                        .text	$00, $00, $00, $1F, $03, $03, $00, $00 ; #169
>1ffd50	00 00 00 1f 18 18 00 00		                        .text	$00, $00, $00, $1F, $18, $18, $00, $00 ; #170
>1ffd58	01 19 0d 06 1f 36 18 3e		                        .text	$01, $19, $0D, $06, $1F, $36, $18, $3E ; #171
>1ffd60	01 19 0d 06 1b 1e 3f 18		                        .text	$01, $19, $0D, $06, $1B, $1E, $3F, $18 ; #172
>1ffd68	0c 00 0c 0c 1e 1e 0c 00		                        .text	$0C, $00, $0C, $0C, $1E, $1E, $0C, $00 ; #173
>1ffd70	00 36 1b 0d 1b 36 00 00		                        .text	$00, $36, $1B, $0D, $1B, $36, $00, $00 ; #174
>1ffd78	00 0d 1b 36 1b 0d 00 00		                        .text	$00, $0D, $1B, $36, $1B, $0D, $00, $00 ; #175
>1ffd80	22 08 22 08 22 08 22 08		                        .text	$22, $08, $22, $08, $22, $08, $22, $08 ; #176
>1ffd88	55 2a 55 2a 55 2a 55 2a		                        .text	$55, $2A, $55, $2A, $55, $2A, $55, $2A ; #177
>1ffd90	5d 77 5d 77 5d 77 5d 77		                        .text	$5D, $77, $5D, $77, $5D, $77, $5D, $77 ; #178
>1ffd98	0c 0c 0c 0c 0c 0c 0c 0c		                        .text	$0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C ; #179
>1ffda0	0c 0c 0c 0c 0f 0c 0c 0c		                        .text	$0C, $0C, $0C, $0C, $0F, $0C, $0C, $0C ; #180
>1ffda8	0c 0c 0f 0c 0f 0c 0c 0c		                        .text	$0C, $0C, $0F, $0C, $0F, $0C, $0C, $0C ; #181
>1ffdb0	36 36 36 36 37 36 36 36		                        .text	$36, $36, $36, $36, $37, $36, $36, $36 ; #182
>1ffdb8	00 00 00 00 3f 36 36 36		                        .text	$00, $00, $00, $00, $3F, $36, $36, $36 ; #183
>1ffdc0	00 00 0f 0c 0f 0c 0c 0c		                        .text	$00, $00, $0F, $0C, $0F, $0C, $0C, $0C ; #184
>1ffdc8	36 36 37 30 37 36 36 36		                        .text	$36, $36, $37, $30, $37, $36, $36, $36 ; #185
>1ffdd0	36 36 36 36 36 36 36 36		                        .text	$36, $36, $36, $36, $36, $36, $36, $36 ; #186
>1ffdd8	00 00 3f 30 37 36 36 36		                        .text	$00, $00, $3F, $30, $37, $36, $36, $36 ; #187
>1ffde0	36 36 37 30 3f 00 00 00		                        .text	$36, $36, $37, $30, $3F, $00, $00, $00 ; #188
>1ffde8	36 36 36 36 3f 00 00 00		                        .text	$36, $36, $36, $36, $3F, $00, $00, $00 ; #189
>1ffdf0	0c 0c 0f 0c 0f 00 00 00		                        .text	$0C, $0C, $0F, $0C, $0F, $00, $00, $00 ; #190
>1ffdf8	00 00 00 00 0f 0c 0c 0c		                        .text	$00, $00, $00, $00, $0F, $0C, $0C, $0C ; #191
>1ffe00	0c 0c 0c 0c 7c 00 00 00		                        .text	$0C, $0C, $0C, $0C, $7C, $00, $00, $00 ; #192
>1ffe08	0c 0c 0c 0c 7f 00 00 00		                        .text	$0C, $0C, $0C, $0C, $7F, $00, $00, $00 ; #193
>1ffe10	00 00 00 00 7f 0c 0c 0c		                        .text	$00, $00, $00, $00, $7F, $0C, $0C, $0C ; #194
>1ffe18	0c 0c 0c 0c 7c 0c 0c 0c		                        .text	$0C, $0C, $0C, $0C, $7C, $0C, $0C, $0C ; #195
>1ffe20	00 00 00 00 7f 00 00 00		                        .text	$00, $00, $00, $00, $7F, $00, $00, $00 ; #196
>1ffe28	0c 0c 0c 0c 7f 0c 0c 0c		                        .text	$0C, $0C, $0C, $0C, $7F, $0C, $0C, $0C ; #197
>1ffe30	0c 0c 7c 0c 7c 0c 0c 0c		                        .text	$0C, $0C, $7C, $0C, $7C, $0C, $0C, $0C ; #198
>1ffe38	36 36 36 36 76 36 36 36		                        .text	$36, $36, $36, $36, $76, $36, $36, $36 ; #199
>1ffe40	36 36 76 06 7e 00 00 00		                        .text	$36, $36, $76, $06, $7E, $00, $00, $00 ; #200
>1ffe48	00 00 7e 06 76 36 36 36		                        .text	$00, $00, $7E, $06, $76, $36, $36, $36 ; #201
>1ffe50	36 36 77 00 7f 00 00 00		                        .text	$36, $36, $77, $00, $7F, $00, $00, $00 ; #202
>1ffe58	00 00 7f 00 77 36 36 36		                        .text	$00, $00, $7F, $00, $77, $36, $36, $36 ; #203
>1ffe60	36 36 76 06 76 36 36 36		                        .text	$36, $36, $76, $06, $76, $36, $36, $36 ; #204
>1ffe68	00 00 7f 00 7f 00 00 00		                        .text	$00, $00, $7F, $00, $7F, $00, $00, $00 ; #205
>1ffe70	36 36 77 00 77 36 36 36		                        .text	$36, $36, $77, $00, $77, $36, $36, $36 ; #206
>1ffe78	0c 0c 7f 00 7f 00 00 00		                        .text	$0C, $0C, $7F, $00, $7F, $00, $00, $00 ; #207
>1ffe80	36 36 36 36 7f 00 00 00		                        .text	$36, $36, $36, $36, $7F, $00, $00, $00 ; #208
>1ffe88	00 00 7f 00 7f 0c 0c 0c		                        .text	$00, $00, $7F, $00, $7F, $0C, $0C, $0C ; #209
>1ffe90	00 00 00 00 7f 36 36 36		                        .text	$00, $00, $00, $00, $7F, $36, $36, $36 ; #210
>1ffe98	36 36 36 36 7e 00 00 00		                        .text	$36, $36, $36, $36, $7E, $00, $00, $00 ; #211
>1ffea0	0c 0c 7c 0c 7c 00 00 00		                        .text	$0C, $0C, $7C, $0C, $7C, $00, $00, $00 ; #212
>1ffea8	00 00 7c 0c 7c 0c 0c 0c		                        .text	$00, $00, $7C, $0C, $7C, $0C, $0C, $0C ; #213
>1ffeb0	00 00 00 00 7e 36 36 36		                        .text	$00, $00, $00, $00, $7E, $36, $36, $36 ; #214
>1ffeb8	36 36 36 36 7f 36 36 36		                        .text	$36, $36, $36, $36, $7F, $36, $36, $36 ; #215
>1ffec0	0c 0c 7f 0c 7f 0c 0c 0c		                        .text	$0C, $0C, $7F, $0C, $7F, $0C, $0C, $0C ; #216
>1ffec8	0c 0c 0c 0c 0f 00 00 00		                        .text	$0C, $0C, $0C, $0C, $0F, $00, $00, $00 ; #217
>1ffed0	00 00 00 00 7c 0c 0c 0c		                        .text	$00, $00, $00, $00, $7C, $0C, $0C, $0C ; #218
>1ffed8	7f 7f 7f 7f 7f 7f 7f 7f		                        .text	$7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F ; #219
>1ffee0	00 00 00 00 7f 7f 7f 7f		                        .text	$00, $00, $00, $00, $7F, $7F, $7F, $7F ; #220
>1ffee8	07 07 07 07 07 07 07 07		                        .text	$07, $07, $07, $07, $07, $07, $07, $07 ; #221
>1ffef0	78 78 78 78 78 78 78 78		                        .text	$78, $78, $78, $78, $78, $78, $78, $78 ; #222
>1ffef8	7f 7f 7f 7f 00 00 00 00		                        .text	$7F, $7F, $7F, $7F, $00, $00, $00, $00 ; #223
>1fff00	00 00 33 1d 0d 1d 33 00		                        .text	$00, $00, $33, $1D, $0D, $1D, $33, $00 ; #224
>1fff08	00 0f 19 0f 19 31 19 00		                        .text	$00, $0F, $19, $0F, $19, $31, $19, $00 ; #225
>1fff10	00 3f 23 03 03 03 03 00		                        .text	$00, $3F, $23, $03, $03, $03, $03, $00 ; #226
>1fff18	00 3f 1b 1b 1b 1b 1b 00		                        .text	$00, $3F, $1B, $1B, $1B, $1B, $1B, $00 ; #227
>1fff20	3f 31 03 06 03 31 3f 00		                        .text	$3F, $31, $03, $06, $03, $31, $3F, $00 ; #228
>1fff28	00 3f 0d 19 19 0d 07 00		                        .text	$00, $3F, $0D, $19, $19, $0D, $07, $00 ; #229
>1fff30	00 33 33 33 33 1f 01 00		                        .text	$00, $33, $33, $33, $33, $1F, $01, $00 ; #230
>1fff38	00 37 1d 0c 0c 0c 0e 00		                        .text	$00, $37, $1D, $0C, $0C, $0C, $0E, $00 ; #231
>1fff40	3f 0e 1b 31 1b 0e 3f 00		                        .text	$3F, $0E, $1B, $31, $1B, $0E, $3F, $00 ; #232
>1fff48	0e 1b 31 3f 31 1b 0e 00		                        .text	$0E, $1B, $31, $3F, $31, $1B, $0E, $00 ; #233
>1fff50	0e 1b 31 31 1b 1b 3b 00		                        .text	$0E, $1B, $31, $31, $1B, $1B, $3B, $00 ; #234
>1fff58	3e 03 0e 33 31 19 0f 00		                        .text	$3E, $03, $0E, $33, $31, $19, $0F, $00 ; #235
>1fff60	00 00 3f 6d 6d 3f 00 00		                        .text	$00, $00, $3F, $6D, $6D, $3F, $00, $00 ; #236
>1fff68	30 1f 3d 37 33 1f 01 00		                        .text	$30, $1F, $3D, $37, $33, $1F, $01, $00 ; #237
>1fff70	0e 03 01 0f 01 03 0e 00		                        .text	$0E, $03, $01, $0F, $01, $03, $0E, $00 ; #238
>1fff78	1f 31 31 31 31 31 31 00		                        .text	$1F, $31, $31, $31, $31, $31, $31, $00 ; #239
>1fff80	00 3f 00 3f 00 3f 00 00		                        .text	$00, $3F, $00, $3F, $00, $3F, $00, $00 ; #240
>1fff88	0c 0c 3f 0c 0c 00 3f 00		                        .text	$0C, $0C, $3F, $0C, $0C, $00, $3F, $00 ; #241
>1fff90	06 0c 18 0c 06 00 3f 00		                        .text	$06, $0C, $18, $0C, $06, $00, $3F, $00 ; #242
>1fff98	18 0c 06 0c 18 00 3f 00		                        .text	$18, $0C, $06, $0C, $18, $00, $3F, $00 ; #243
>1fffa0	18 3c 0c 0c 0c 0c 0c 0c		                        .text	$18, $3C, $0C, $0C, $0C, $0C, $0C, $0C ; #244
>1fffa8	0c 0c 0c 0c 0c 0f 06 00		                        .text	$0C, $0C, $0C, $0C, $0C, $0F, $06, $00 ; #245
>1fffb0	00 00 0c 00 3f 00 0c 00		                        .text	$00, $00, $0C, $00, $3F, $00, $0C, $00 ; #246
>1fffb8	00 37 1d 00 37 1d 00 00		                        .text	$00, $37, $1D, $00, $37, $1D, $00, $00 ; #247
>1fffc0	1f 31 31 1f 00 00 00 00		                        .text	$1F, $31, $31, $1F, $00, $00, $00, $00 ; #248
>1fffc8	00 00 00 0c 0c 00 00 00		                        .text	$00, $00, $00, $0C, $0C, $00, $00, $00 ; #249
>1fffd0	00 00 00 00 0c 00 00 00		                        .text	$00, $00, $00, $00, $0C, $00, $00, $00 ; #250
>1fffd8	7c 0c 0c 0c 0f 0e 0c 00		                        .text	$7C, $0C, $0C, $0C, $0F, $0E, $0C, $00 ; #251
>1fffe0	0d 1b 1b 1b 00 00 00 00		                        .text	$0D, $1B, $1B, $1B, $00, $00, $00, $00 ; #252
>1fffe8	07 0d 06 0f 00 00 00 00		                        .text	$07, $0D, $06, $0F, $00, $00, $00, $00 ; #253
>1ffff0	00 00 1f 1f 1f 1f 00 00		                        .text	$00, $00, $1F, $1F, $1F, $1F, $00, $00 ; #254
>1ffff8	00 00 00 00 00 00 00 00		                        .text	$00, $00, $00, $00, $00, $00, $00, $00 ; #255

;******  Return to file: kernel.asm


;******  Processing file: kernel_jumptable.asm

.190000	5c 00 04 19	jmp $190400	BOOT            JML IBOOT
.190004	5c a8 0f 19	jmp $190fa8	RESTORE         JML IRESTORE
.190008	5c e2 04 19	jmp $1904e2	BREAK           JML IBREAK
.19000c	5c 29 05 19	jmp $190529	READY           JML IREADY
.190010	5c a9 0f 19	jmp $190fa9	SCINIT          JML ISCINIT
.190014	5c aa 0f 19	jmp $190faa	IOINIT          JML IIOINIT
.190018	5c 9e 05 19	jmp $19059e	PUTC            JML IPUTC
.19001c	5c 87 05 19	jmp $190587	PUTS            JML IPUTS
.190020	5c cb 05 19	jmp $1905cb	PUTB            JML IPUTB
.190024	5c ab 0f 19	jmp $190fab	PUTBLOCK        JML IPUTBLOCK
.190028	5c ac 0f 19	jmp $190fac	SETLFS          JML ISETLFS
.19002c	5c ad 0f 19	jmp $190fad	SETNAM          JML ISETNAM
.190030	5c ae 0f 19	jmp $190fae	OPEN            JML IOPEN
.190034	5c af 0f 19	jmp $190faf	CLOSE           JML ICLOSE
.190038	5c b0 0f 19	jmp $190fb0	SETIN           JML ISETIN
.19003c	5c b1 0f 19	jmp $190fb1	SETOUT          JML ISETOUT
.190040	5c b2 0f 19	jmp $190fb2	GETB            JML IGETB
.190044	5c b3 0f 19	jmp $190fb3	GETBLOCK        JML IGETBLOCK
.190048	5c b4 0f 19	jmp $190fb4	GETCH           JML IGETCH
.19004c	5c 4d 05 19	jmp $19054d	GETCHW          JML IGETCHW
.190050	5c 44 05 19	jmp $190544	GETCHE          JML IGETCHE
.190054	5c b5 0f 19	jmp $190fb5	GETS            JML IGETS
.190058	5c b6 0f 19	jmp $190fb6	GETLINE         JML IGETLINE
.19005c	5c b7 0f 19	jmp $190fb7	GETFIELD        JML IGETFIELD
.190060	5c b8 0f 19	jmp $190fb8	TRIM            JML ITRIM
.190064	5c b9 0f 19	jmp $190fb9	PRINTC          JML IPRINTC
.190068	5c ba 0f 19	jmp $190fba	PRINTS          JML IPRINTS
.19006c	5c cc 05 19	jmp $1905cc	PRINTCR         JML IPRINTCR
.190070	5c bb 0f 19	jmp $190fbb	PRINTF          JML IPRINTF
.190074	5c bc 0f 19	jmp $190fbc	PRINTI          JML IPRINTI
.190078	5c 71 06 19	jmp $190671	PRINTH          JML IPRINTH
.19007c	5c bd 0f 19	jmp $190fbd	PRINTAI         JML IPRINTAI
.190080	5c be 0f 19	jmp $190fbe	PRINTAH         JML IPRINTAH
.190084	5c 21 06 19	jmp $190621	LOCATE          JML ILOCATE
.190088	5c bf 0f 19	jmp $190fbf	PUSHKEY         JML IPUSHKEY
.19008c	5c c0 0f 19	jmp $190fc0	PUSHKEYS        JML IPUSHKEYS
.190090	5c ed 05 19	jmp $1905ed	CSRRIGHT        JML ICSRRIGHT
.190094	5c c1 0f 19	jmp $190fc1	CSRLEFT         JML ICSRLEFT
.190098	5c 1f 06 19	jmp $19061f	CSRUP           JML ICSRUP
.19009c	5c 20 06 19	jmp $190620	CSRDOWN         JML ICSRDOWN
.1900a0	5c c2 0f 19	jmp $190fc2	CSRHOME         JML ICSRHOME
.1900a4	5c 57 06 19	jmp $190657	SCROLLUP        JML ISCROLLUP
.1900a8	5c 9f 06 19	jmp $19069f	CLRSCREEN       JML ICLRSCREEN
.1900ac	5c 06 07 19	jmp $190706	INITCHLUT	      JML IINITCHLUT
.1900b0	5c 01 0a 19	jmp $190a01	INITSUPERIO	    JML IINITSUPERIO
.1900b4	5c 00 0b 19	jmp $190b00	INITKEYBOARD    JML IINITKEYBOARD
.1900b8	5c ab 0b 19	jmp $190bab	INITRTC         JML IINITRTC
.1900bc	5c e2 0b 19	jmp $190be2	TESTSID         JML ITESTSID
.1900c0	5c 0d 0c 19	jmp $190c0d	TESTMATH        JML ITESTMATH
.1900c4	5c e0 09 19	jmp $1909e0	INITCURSOR      JML IINITCURSOR
.1900c8	5c b5 09 19	jmp $1909b5	INITFONTSET     JML IINITFONTSET
.1900cc	5c 35 07 19	jmp $190735	INITGAMMATABLE  JML IINITGAMMATABLE
.1900d0	5c 55 07 19	jmp $190755	INITALLLUT      JML IINITALLLUT
.1900d4	5c 17 08 19	jmp $190817	INITVKYTXTMODE  JML IINITVKYTXTMODE
.1900d8	5c 40 08 19	jmp $190840	INITVKYGRPMODE  JML IINITVKYGRPMODE
.1900dc	5c 77 08 19	jmp $190877	INITTILEMODE    JML IINITTILEMODE
.1900e0	5c 78 08 19	jmp $190878	INITSPRITE      JML IINITSPRITE
.1900e4	5c 34 0c 19	jmp $190c34	INITCODEC       JML IINITCODEC
.1900e8	5c 7d 0c 19	jmp $190c7d	RESETCODEC      JML IRESETCODEC
.1900ec	5c eb 0c 19	jmp $190ceb	BMP_PARSER      JML IBMP_PARSER
.1900f0	5c a0 0c 19	jmp $190ca0	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.1900f4	5c af 24 19	jmp $1924af	OPL2_TONE_TEST  JML IOPL2_TONE_TEST

;******  Return to file: kernel.asm

.190400					IBOOT
.190400	18		clc		                CLC           ; clear the carry flag
.190401	fb		xce		                XCE           ; move carry to emulation flag.
.190402	78		sei		                SEI
.190403	c2 30		rep #$30	                REP #$30        ; set A&X long
.190405	a9 ff fe	lda #$feff	                LDA #STACK_END   ; initialize stack pointer
.190408	1b		tcs		                TAS
.190409	48		pha		                PHA             ; begin setdp macro
.19040a	08		php			PHP
.19040b	c2 20		rep #$20	                REP #$20        ; set A long
.19040d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190410	5b		tcd		                TCD
.190411	28		plp			PLP
.190412	68		pla		                PLA             ; end setdp macro
.190413	e2 20		sep #$20	                SEP #$20        ; set A short
.190415	a2 00 00	ldx #$0000	                LDX #$0000
.190418	a9 00		lda #$00	                LDA #$00
.19041a					CLEAR_MEM_LOOP
.19041a	95 00		sta $00,x	                STA $0000, X
.19041c	e8		inx		                INX
.19041d	e0 00 04	cpx #$0400	                CPX #$0400
.190420	d0 f8		bne $19041a	                BNE CLEAR_MEM_LOOP
.190422	ea		nop		                NOP
.190423	a9 ff		lda #$ff	                LDA #$FF
.190425	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.190429	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.19042d	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.190431	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.190435	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190439	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.19043d	c2 30		rep #$30	                REP #$30        ; set A&X long
.19043f	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.190442	85 0c		sta $0c		                STA SCREENBEGIN
.190444	e2 20		sep #$20	                SEP #$20        ; set A short
.190446	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.190448	85 0e		sta $0e		                STA SCREENBEGIN+2
.19044a	c2 30		rep #$30	                REP #$30        ; set A&X long
.19044c	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.19044f	85 17		sta $17		                STA CURSORPOS
.190451	e2 20		sep #$20	                SEP #$20        ; set A short
.190453	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.190455	85 19		sta $19		                STA CURSORPOS+2
.190457	a9 00		lda #$00	                LDA #$00
.190459	8d 43 0f	sta $0f43	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.19045c	a2 48 00	ldx #$0048	                LDX #72
.19045f	86 0f		stx $0f		                STX COLS_VISIBLE
.190461	a0 38 00	ldy #$0038	                LDY #56
.190464	84 13		sty $13		                STY LINES_VISIBLE
.190466	a2 80 00	ldx #$0080	                LDX #128
.190469	86 11		stx $11		                STX COLS_PER_LINE
.19046b	a0 40 00	ldy #$0040	                LDY #64
.19046e	84 15		sty $15		                STY LINES_MAX
.190470	c2 30		rep #$30	                REP #$30        ; set A&X long
.190472	22 e4 00 19	jsl $1900e4	                JSL INITCODEC
.190476	22 b0 00 19	jsl $1900b0	                JSL INITSUPERIO
.19047a	22 b8 00 19	jsl $1900b8	                JSL INITRTC
.19047e	22 cc 00 19	jsl $1900cc	                JSL INITGAMMATABLE
.190482	22 d0 00 19	jsl $1900d0	                JSL INITALLLUT
.190486	22 ac 00 19	jsl $1900ac	                JSL INITCHLUT
.19048a	22 c4 00 19	jsl $1900c4	                JSL INITCURSOR
.19048e	22 d4 00 19	jsl $1900d4	                JSL INITVKYTXTMODE
.190492	22 b5 09 19	jsl $1909b5	                JSL IINITFONTSET
.190496	22 9f 06 19	jsl $19069f	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.19049a	22 ce 06 19	jsl $1906ce	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.19049e	c2 30		rep #$30	                REP #$30        ; set A&X long
.1904a0					greet
.1904a0	48		pha		                PHA             ; begin setdbr macro
.1904a1	08		php		                PHP
.1904a2	e2 20		sep #$20	                SEP #$20        ; set A short
.1904a4	a9 19		lda #$19		LDA #`greet_msg
.1904a6	48		pha		                PHA
.1904a7	ab		plb		                PLB
.1904a8	28		plp		                PLP
.1904a9	68		pla		                PLA             ; end setdbr macro
.1904aa	a2 c5 0f	ldx #$0fc5	                LDX #<>greet_msg
.1904ad	22 7e 05 19	jsl $19057e	                JSL IPRINT       ; print the first line
.1904b1	a2 71 11	ldx #$1171	                LDX #<>version_msg
.1904b4	22 7e 05 19	jsl $19057e	                JSL IPRINT       ; print the first line
.1904b8	48		pha		                PHA             ; begin setdp macro
.1904b9	08		php			PHP
.1904ba	c2 20		rep #$20	                REP #$20        ; set A long
.1904bc	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1904bf	5b		tcd		                TCD
.1904c0	28		plp			PLP
.1904c1	68		pla		                PLA             ; end setdp macro
.1904c2	22 b4 00 19	jsl $1900b4	                JSL INITKEYBOARD ;
.1904c6	c2 30		rep #$30	                REP #$30        ; set A&X long
.1904c8	a2 ab 12	ldx #$12ab	                LDX #<>ready_msg
.1904cb	22 7e 05 19	jsl $19057e	                JSL IPRINT       ; print the first line
.1904cf	58		cli		                CLI ; Make sure no Interrupt will come and fuck up Init before this point.
.1904d0	e2 20		sep #$20	                SEP #$20        ; set A short
.1904d2	48		pha		                PHA             ; begin setdbr macro
.1904d3	08		php		                PHP
.1904d4	e2 20		sep #$20	                SEP #$20        ; set A short
.1904d6	a9 01		lda #$01		LDA #$01
.1904d8	48		pha		                PHA
.1904d9	ab		plb		                PLB
.1904da	28		plp		                PLP
.1904db	68		pla		                PLA             ; end setdbr macro
.1904dc	ea		nop		endlessloop     NOP
.1904dd	5c dc 04 19	jmp $1904dc	                JML endlessloop
.1904e1	00		brk #		greet_done      BRK             ;Terminate boot routine and go to Ready handler.
.1904e2					IBREAK
.1904e2	48		pha		                PHA             ; begin setdp macro
.1904e3	08		php			PHP
.1904e4	c2 20		rep #$20	                REP #$20        ; set A long
.1904e6	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1904e9	5b		tcd		                TCD
.1904ea	28		plp			PLP
.1904eb	68		pla		                PLA             ; end setdp macro
.1904ec	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.1904ed	8f 48 02 00	sta $000248	                STA CPUY
.1904f1	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.1904f2	8f 46 02 00	sta $000246	                STA CPUX
.1904f6	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.1904f7	8f 44 02 00	sta $000244	                STA CPUA
.1904fb	68		pla		                PLA
.1904fc	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.190500	e2 20		sep #$20	                SEP #$20        ; set A short
.190502	68		pla		                PLA             ; Pull Data Bank (8 bits)
.190503	8f 4e 02 00	sta $00024e	                STA CPUDBR
.190507	68		pla		                PLA             ; Pull Flags (8 bits)
.190508	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.19050c	c2 20		rep #$20	                REP #$20        ; set A long
.19050e	68		pla		                PLA             ; Pull Program Counter (16 bits)
.19050f	8f 40 02 00	sta $000240	                STA CPUPC
.190513	e2 20		sep #$20	                SEP #$20        ; set A short
.190515	68		pla		                PLA             ; Pull Program Bank (8 bits)
.190516	8f 42 02 00	sta $000242	                STA CPUPBR
.19051a	c2 20		rep #$20	                REP #$20        ; set A long
.19051c	3b		tsc		                TSA             ; Get the stack
.19051d	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.190521	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.190524	1b		tcs		                TAS
.190525	5c e0 ff 00	jmp $00ffe0	                JML JMP_READY   ; Run READY routine (usually BASIC or MONITOR)
.190529					IREADY
.190529	48		pha		                PHA             ; begin setdbr macro
.19052a	08		php		                PHP
.19052b	e2 20		sep #$20	                SEP #$20        ; set A short
.19052d	a9 19		lda #$19		LDA #`ready_msg
.19052f	48		pha		                PHA
.190530	ab		plb		                PLB
.190531	28		plp		                PLP
.190532	68		pla		                PLA             ; end setdbr macro
.190533	e2 20		sep #$20	                SEP #$20        ; set A short
.190535	a2 ab 12	ldx #$12ab	                LDX #<>ready_msg
.190538	22 7e 05 19	jsl $19057e	                JSL IPRINT
.19053c					IREADYWAIT
.19053c	22 44 05 19	jsl $190544	                JSL IGETCHE
.190540	80 fa		bra $19053c	                BRA IREADYWAIT
.190542	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.190543	db		stp		IRETURN         STP
.190544	22 4d 05 19	jsl $19054d	IGETCHE         JSL IGETCHW
.190548	22 9e 05 19	jsl $19059e	                JSL IPUTC
.19054c	6b		rtl		                RTL
.19054d	0b		phd		IGETCHW         PHD
.19054e	da		phx		                PHX
.19054f	08		php		                PHP
.190550	48		pha		                PHA             ; begin setdp macro
.190551	08		php			PHP
.190552	c2 20		rep #$20	                REP #$20        ; set A long
.190554	a9 00 0f	lda #$0f00	                LDA #$0F00         ; set DP to page 0
.190557	5b		tcd		                TCD
.190558	28		plp			PLP
.190559	68		pla		                PLA             ; end setdp macro
.19055a	c2 30		rep #$30	                REP #$30        ; set A&X long
.19055c	a6 40		ldx $0f40	igetchw1        LDX KEY_BUFFER_RPOS
.19055e	e4 42		cpx $0f42	                CPX KEY_BUFFER_WPOS
.190560	d0 05		bne $190567	                BNE igetchw2
>190562	42 00				                .byte $42, $00
.190564	4c 5c 05	jmp $19055c	                JMP igetchw1
.190567	b5 00		lda $0f00,x	igetchw2        LDA $0,D,X  ; Read the value in the keyboard buffer
.190569	48		pha		                PHA
.19056a	8a		txa		                TXA
.19056b	18		clc		                CLC
.19056c	69 02 00	adc #$0002	                ADC #$02
.19056f	c9 40 00	cmp #$0040	                CMP #KEY_BUFFER_SIZE
.190572	90 03		bcc $190577	                BCC igetchw3
.190574	a9 00 00	lda #$0000	                LDA #$0
.190577	85 40		sta $0f40	igetchw3        STA KEY_BUFFER_RPOS
.190579	68		pla		                PLA
.19057a	28		plp		igetchw_done    PLP
.19057b	fa		plx		                PLX             ; Restore the saved registers and return
.19057c	2b		pld		                PLD
.19057d	6b		rtl		                RTL
.19057e	22 87 05 19	jsl $190587	IPRINT          JSL IPUTS
.190582	22 cc 05 19	jsl $1905cc	                JSL IPRINTCR
.190586	6b		rtl		                RTL
.190587	48		pha		IPUTS           PHA
.190588	08		php		                PHP
.190589	e2 20		sep #$20	                SEP #$20        ; set A short
.19058b	c2 10		rep #$10	                REP #$10        ; set X long
.19058d	bd 00 00	lda $190000,x	iputs1          LDA $0,b,x      ; read from the string
.190590	f0 08		beq $19059a	                BEQ iputs_done
.190592	22 9e 05 19	jsl $19059e	iputs2          JSL IPUTC
.190596	e8		inx		iputs3          INX
.190597	4c 8d 05	jmp $19058d	                JMP iputs1
.19059a	e8		inx		iputs_done      INX
.19059b	28		plp		                PLP
.19059c	68		pla		                PLA
.19059d	6b		rtl		                RTL
.19059e	0b		phd		IPUTC           PHD
.19059f	08		php		                PHP             ; stash the flags (we'll be changing M)
.1905a0	48		pha		                PHA             ; begin setdp macro
.1905a1	08		php			PHP
.1905a2	c2 20		rep #$20	                REP #$20        ; set A long
.1905a4	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1905a7	5b		tcd		                TCD
.1905a8	28		plp			PLP
.1905a9	68		pla		                PLA             ; end setdp macro
.1905aa	e2 20		sep #$20	                SEP #$20        ; set A short
.1905ac	c9 0d		cmp #$0d	                CMP #$0D        ; handle CR
.1905ae	d0 06		bne $1905b6	                BNE iputc_bs
.1905b0	22 cc 05 19	jsl $1905cc	                JSL IPRINTCR
.1905b4	80 10		bra $1905c6	                bra iputc_done
.1905b6	c9 08		cmp #$08	iputc_bs        CMP #$08        ; backspace
.1905b8	d0 06		bne $1905c0	                BNE iputc_print
.1905ba	22 dd 05 19	jsl $1905dd	                JSL IPRINTBS
.1905be	80 06		bra $1905c6	                BRA iputc_done
.1905c0	87 17		sta [$17]	iputc_print     STA [CURSORPOS] ; Save the character on the screen
.1905c2	22 ed 05 19	jsl $1905ed	                JSL ICSRRIGHT
.1905c6					iputc_done
>1905c6	42 01				                .byte $42, $01
.1905c8	28		plp		                PLP
.1905c9	2b		pld		                PLD
.1905ca	6b		rtl		                RTL
.1905cb					IPUTB
.1905cb	6b		rtl		                RTL
.1905cc	da		phx		IPRINTCR	PHX
.1905cd	5a		phy		                PHY
.1905ce	08		php		                PHP
.1905cf	a2 00 00	ldx #$0000	                LDX #0
.1905d2	a4 1c		ldy $1c		                LDY CURSORY
.1905d4	c8		iny		                INY
.1905d5	22 21 06 19	jsl $190621	                JSL ILOCATE
.1905d9	28		plp		                PLP
.1905da	7a		ply		                PLY
.1905db	fa		plx		                PLX
.1905dc	6b		rtl		                RTL
.1905dd	da		phx		IPRINTBS	PHX
.1905de	5a		phy		                PHY
.1905df	08		php		                PHP
.1905e0	a6 1a		ldx $1a		                LDX CURSORX
.1905e2	a4 1c		ldy $1c		                LDY CURSORY
.1905e4	ca		dex		                DEX
.1905e5	22 21 06 19	jsl $190621	                JSL ILOCATE
.1905e9	28		plp		                PLP
.1905ea	7a		ply		                PLY
.1905eb	fa		plx		                PLX
.1905ec	6b		rtl		                RTL
.1905ed					ICSRRIGHT
.1905ed	da		phx		                PHX
.1905ee	8b		phb		                PHB
.1905ef	c2 20		rep #$20	                REP #$20        ; set A long
.1905f1	c2 10		rep #$10	                REP #$10        ; set X long
.1905f3	48		pha		                PHA             ; begin setdp macro
.1905f4	08		php			PHP
.1905f5	c2 20		rep #$20	                REP #$20        ; set A long
.1905f7	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.1905fa	5b		tcd		                TCD
.1905fb	28		plp			PLP
.1905fc	68		pla		                PLA             ; end setdp macro
.1905fd	e6 17		inc $17		                INC CURSORPOS
.1905ff	a6 1a		ldx $1a		                LDX CURSORX
.190601	e8		inx		                INX
.190602	e4 0f		cpx $0f		                CPX COLS_VISIBLE
.190604	90 0c		bcc $190612	                BCC icsr_nowrap  ; wrap if the cursor is at or past column 80
.190606	a2 00 00	ldx #$0000	                LDX #0
.190609	5a		phy		                PHY
.19060a	a4 1c		ldy $1c		                LDY CURSORY
.19060c	c8		iny		                INY
.19060d	22 21 06 19	jsl $190621	                JSL ILOCATE
.190611	7a		ply		                PLY
.190612	86 1a		stx $1a		icsr_nowrap     STX CURSORX
.190614	48		pha		                PHA
.190615	8a		txa		                TXA
.190616	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.19061a	68		pla		                PLA
.19061b	ab		plb		                PLB
.19061c	fa		plx		                PLX
.19061d	6b		rtl		                RTL
.19061e	6b		rtl		ISRLEFT	        RTL
.19061f	6b		rtl		ICSRUP	        RTL
.190620	6b		rtl		ICSRDOWN	      RTL
.190621	48		pha		ILOCATE         PHA
.190622	08		php		                PHP
.190623	c2 30		rep #$30	                REP #$30        ; set A&X long
.190625					ilocate_scroll
.190625	c4 13		cpy $13		                CPY LINES_VISIBLE
.190627	90 07		bcc $190630	                BCC ilocate_scrolldone
.190629	22 57 06 19	jsl $190657	                JSL ISCROLLUP
.19062d	88		dey		                DEY
.19062e	80 f5		bra $190625	                BRA ilocate_scroll
.190630					ilocate_scrolldone
.190630	86 1a		stx $1a		                STX CURSORX
.190632	84 1c		sty $1c		                STY CURSORY
.190634	a5 0c		lda $0c		                LDA SCREENBEGIN
.190636					ilocate_row
.190636	c0 00 00	cpy #$0000	                CPY #$0
.190639	f0 08		beq $190643	                BEQ ilocate_right
.19063b	18		clc		ilocate_down    CLC
.19063c	65 11		adc $11		                ADC COLS_PER_LINE
.19063e	88		dey		                DEY
.19063f	f0 02		beq $190643	                BEQ ilocate_right
.190641	80 f8		bra $19063b	                BRA ilocate_down
.190643	18		clc		ilocate_right   CLC
.190644	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.190646	85 17		sta $17		                STA CURSORPOS
.190648	a4 1c		ldy $1c		                LDY CURSORY
.19064a	98		tya		                TYA
.19064b	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.19064f	8a		txa		                TXA
.190650	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.190654	28		plp		ilocate_done    PLP
.190655	68		pla		                PLA
.190656	6b		rtl		                RTL
.190657					ISCROLLUP
.190657	48		pha		                PHA
.190658	da		phx		                PHX
.190659	5a		phy		                PHY
.19065a	8b		phb		                PHB
.19065b	08		php		                PHP
.19065c	c2 30		rep #$30	                REP #$30        ; set A&X long
.19065e	18		clc		                CLC
.19065f	a5 0c		lda $0c		                LDA SCREENBEGIN
.190661	a8		tay		                TAY             ; Destination is first row
.190662	65 11		adc $11		                ADC COLS_PER_LINE
.190664	aa		tax		                TAX             ; Source is second row
.190665	a9 ef 1f	lda #$1fef	                LDA #SCREEN_PAGE1-SCREEN_PAGE0-COLS_PER_LINE
.190668	44 00 00	mvp #$00,#$00	                MVP $00,$00
.19066b	28		plp		                PLP
.19066c	ab		plb		                PLB
.19066d	7a		ply		                PLY
.19066e	fa		plx		                PLX
.19066f	68		pla		                PLA
.190670	6b		rtl		                RTL
.190671	08		php		IPRINTH         PHP
.190672	48		pha		                PHA
.190673					iprinth1
.190673	e2 20		sep #$20	                SEP #$20        ; set A short
.190675	bd 00 00	lda $190000,x	                LDA #0,b,x      ; Read the value to be printed
.190678	4a		lsr a		                LSR
.190679	4a		lsr a		                LSR
.19067a	4a		lsr a		                LSR
.19067b	4a		lsr a		                LSR
.19067c	22 8e 06 19	jsl $19068e	                JSL iprint_digit
.190680	bd 00 00	lda $190000,x	                LDA #0,b,x
.190683	22 8e 06 19	jsl $19068e	                JSL iprint_digit
.190687	ca		dex		                DEX
.190688	88		dey		                DEY
.190689	d0 e8		bne $190673	                BNE iprinth1
.19068b	68		pla		                PLA
.19068c	28		plp		                PLP
.19068d	6b		rtl		                RTL
.19068e	da		phx		iprint_digit    PHX
.19068f	c2 20		rep #$20	                REP #$20        ; set A long
.190691	29 0f 00	and #$000f	                AND #$0F
.190694	aa		tax		                TAX
.190695	bf 35 13 19	lda $191335,x	                LDA hex_digits,X
.190699	22 9e 05 19	jsl $19059e	                JSL IPUTC       ; Print the digit
.19069d	fa		plx		                PLX
.19069e	6b		rtl		                RTL
.19069f	0b		phd		ICLRSCREEN	    PHD
.1906a0	08		php		                PHP
.1906a1	48		pha		                PHA
.1906a2	da		phx		                PHX
.1906a3	e2 20		sep #$20	                SEP #$20        ; set A short
.1906a5	c2 10		rep #$10	                REP #$10        ; set X long
.1906a7	a2 00 00	ldx #$0000	                LDX #$0000		; Only Use One Pointer
.1906aa	a9 20		lda #$20	                LDA #$20		; Fill the Entire Screen with Space
.1906ac	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.1906b0	e8		inx		                inx
.1906b1	e0 00 20	cpx #$2000	                cpx #$2000
.1906b4	d0 f6		bne $1906ac	                bne iclearloop0
.1906b6	a2 00 00	ldx #$0000	                LDX	#$0000		; Only Use One Pointer
.1906b9	a9 ed		lda #$ed	                LDA #$ED		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.1906bb	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.1906bf	e8		inx		                inx
.1906c0	e0 00 20	cpx #$2000	                cpx #$2000
.1906c3	d0 f6		bne $1906bb	                bne iclearloop1
.1906c5	c2 10		rep #$10	                REP #$10        ; set X long
.1906c7	c2 20		rep #$20	                REP #$20        ; set A long
.1906c9	fa		plx		                PLX
.1906ca	68		pla		                PLA
.1906cb	28		plp		                PLP
.1906cc	2b		pld		                PLD
.1906cd	6b		rtl		                RTL
.1906ce	48		pha		ICOLORFLAG      PHA
.1906cf	da		phx		                PHX
.1906d0	08		php		                PHP
.1906d1	e2 30		sep #$30	                SEP #$30        ; set A&X short
.1906d3	a2 00		ldx #$00	                LDX #$00
.1906d5	bf ab 10 19	lda $1910ab,x	iclearloop2	    LDA @lgreet_clr_line1,x
.1906d9	9f 00 c0 af	sta $afc000,x	                STA CS_COLOR_MEM_PTR,x
.1906dd	bf b9 10 19	lda $1910b9,x	                LDA @lgreet_clr_line2,x
.1906e1	9f 80 c0 af	sta $afc080,x	                STA CS_COLOR_MEM_PTR + $80,x
.1906e5	bf c7 10 19	lda $1910c7,x	                LDA @lgreet_clr_line3,x
.1906e9	9f 00 c1 af	sta $afc100,x	                STA CS_COLOR_MEM_PTR + $100,x
.1906ed	bf d5 10 19	lda $1910d5,x	                LDA @lgreet_clr_line4,x
.1906f1	9f 80 c1 af	sta $afc180,x	                STA CS_COLOR_MEM_PTR + $180,x
.1906f5	bf e3 10 19	lda $1910e3,x	                LDA @lgreet_clr_line5,x
.1906f9	9f 00 c2 af	sta $afc200,x	                STA CS_COLOR_MEM_PTR + $200,x
.1906fd	e8		inx		                inx
.1906fe	e0 0e		cpx #$0e	                cpx #$0E
.190700	d0 d3		bne $1906d5	                bne iclearloop2
.190702	28		plp		                PLP
.190703	fa		plx		                PLX
.190704	68		pla		                PLA
.190705	6b		rtl		                RTL
.190706	0b		phd		IINITCHLUT		  PHD
.190707	08		php		                PHP
.190708	48		pha		                PHA
.190709	da		phx		                PHX
.19070a	e2 20		sep #$20	                SEP #$20        ; set A short
.19070c	e2 10		sep #$10	                SEP #$10        ; set X short
.19070e	a2 00		ldx #$00					        LDX	#$00
.190710	bf f1 10 19	lda $1910f1,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.190714	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.190718	e8		inx		                inx
.190719	e0 40		cpx #$40	                cpx #$40
.19071b	d0 f3		bne $190710	                bne lutinitloop0
.19071d	a2 00		ldx #$00	                LDX	#$00
.19071f	bf 31 11 19	lda $191131,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.190723	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.190727	e8		inx		                INX
.190728	e0 40		cpx #$40	                CPX #$40
.19072a	d0 f3		bne $19071f	                bne lutinitloop1
.19072c	c2 20		rep #$20	                REP #$20        ; set A long
.19072e	c2 10		rep #$10	                REP #$10        ; set X long
.190730	fa		plx		                PLX
.190731	68		pla		                PLA
.190732	28		plp		                PLP
.190733	2b		pld		                PLD
.190734	6b		rtl		                RTL
.190735					IINITGAMMATABLE
.190735	e2 20		sep #$20	                SEP #$20        ; set A short
.190737	c2 10		rep #$10	                REP #$10        ; set X long
.190739	a2 00 00	ldx #$0000	                ldx #$0000
.19073c	bf 00 18 19	lda $191800,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.190740	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.190744	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.190748	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.19074c	e8		inx		                inx
.19074d	e0 00 01	cpx #$0100	                cpx #$0100
.190750	d0 ea		bne $19073c	                bne initgammaloop
.190752	c2 30		rep #$30	                REP #$30        ; set A&X long
.190754	6b		rtl		                RTL
.190755	48		pha		IINITALLLUT     PHA
.190756	da		phx		                PHX
.190757	a2 00 00	ldx #$0000	                LDX #$0000
.19075a	e2 20		sep #$20	                SEP #$20        ; set A short
.19075c	a9 00		lda #$00	                LDA #$00
.19075e	85 0a		sta $0a		                STA $0A     ; Temp Location
.190760					iinit_lut_loop
.190760	86 02		stx $02		                STX $02
.190762	a6 0a		ldx $0a		                LDX $0A
.190764	bf 00 17 19	lda $191700,x	                LDA GAMMA_2_2_Tbl, x
.190768	49 55		eor #$55	                EOR  #$55
.19076a	a6 02		ldx $02		                LDX $02
.19076c	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190770	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190774	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190778	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.19077c	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190780	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190784	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190788	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.19078c	e8		inx		                inx
.19078d	86 02		stx $02		                STX $02
.19078f	a6 0a		ldx $0a		                LDX $0A
.190791	bf 00 19 19	lda $191900,x	                LDA RANDOM_LUT_Tbl, x
.190795	a6 02		ldx $02		                LDX $02
.190797	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.19079b	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.19079f	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.1907a3	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.1907a7	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.1907ab	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.1907af	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.1907b3	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.1907b7	e8		inx		                inx
.1907b8	86 02		stx $02		                STX $02
.1907ba	a6 0a		ldx $0a		                LDX $0A
.1907bc	bf 00 18 19	lda $191800,x	                LDA GAMMA_1_8_Tbl, x
.1907c0	49 aa		eor #$aa	                EOR  #$AA
.1907c2	a6 02		ldx $02		                LDX $02
.1907c4	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.1907c8	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.1907cc	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.1907d0	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.1907d4	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.1907d8	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.1907dc	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.1907e0	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.1907e4	e8		inx		                inx
.1907e5	a9 ff		lda #$ff	                LDA #$FF
.1907e7	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.1907eb	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.1907ef	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.1907f3	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.1907f7	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.1907fb	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.1907ff	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190803	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190807	e6 0a		inc $0a		                inc $0A
.190809	e8		inx		                inx
.19080a	e0 00 04	cpx #$0400	                cpx #$0400
.19080d	f0 03		beq $190812	                beq iinit_lut_exit
.19080f	82 4e ff	brl $190760	                brl iinit_lut_loop
.190812					iinit_lut_exit
.190812	c2 30		rep #$30	                REP #$30        ; set A&X long
.190814	fa		plx		                PLX
.190815	68		pla		                PLA
.190816	6b		rtl		                RTL
.190817	48		pha		IINITVKYTXTMODE PHA
.190818	e2 20		sep #$20	                SEP #$20        ; set A short
.19081a	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En      ;Okay, this Enables the Text Mode (Video Display)
.19081c	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.190820	a9 20		lda #$20	                LDA #$20
.190822	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.190826	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.19082a	a9 00		lda #$00	                LDA #$00
.19082c	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.190830	a9 01		lda #$01	                LDA #Border_Ctrl_Enable   ; Enable the Border
.190832	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.190836	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.190838	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.19083c	c2 30		rep #$30	                REP #$30        ; set A&X long
.19083e	68		pla		                PLA
.19083f	6b		rtl		                RTL
.190840					IINITVKYGRPMODE
.190840	48		pha		                PHA
.190841	e2 20		sep #$20	                SEP #$20        ; set A short
.190843	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190845	8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.190849	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.19084b	8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.19084f	a9 c0		lda #$c0	                LDA #$C0
.190851	8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.190855	a9 00		lda #$00	                LDA #$00
.190857	8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.19085b	a9 80		lda #$80	                LDA #$80
.19085d	8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.190861	a9 02		lda #$02	                LDA #$02
.190863	8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.190867	a9 e0		lda #$e0	                LDA #$E0
.190869	8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.19086d	a9 01		lda #$01	                LDA #$01
.19086f	8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.190873	c2 30		rep #$30	                REP #$30        ; set A&X long
.190875	68		pla		                PLA
.190876	6b		rtl		                RTL
.190877					IINITTILEMODE
.190877	6b		rtl		                RTL
.190878	48		pha		IINITSPRITE     PHA
.190879	e2 20		sep #$20	                SEP #$20        ; set A short
.19087b	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.19087d	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.190881	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.190885	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.190889	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.19088d	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.190891	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.190895	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.190899	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.19089d	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.1908a1	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.1908a5	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.1908a9	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.1908ad	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.1908b1	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.1908b5	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.1908b9	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.1908bd	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.1908c1	a9 09		lda #$09	                LDA #$09
.1908c3	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.1908c7	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.1908cb	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.1908cf	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.1908d3	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.1908d7	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.1908db	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.1908df	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.1908e3	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.1908e7	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.1908eb	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.1908ef	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.1908f3	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.1908f7	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.1908fb	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.1908ff	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.190903	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.190907	a9 00		lda #$00	                LDA #$00
.190909	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.19090d	a9 04		lda #$04	                LDA #$04
.19090f	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.190913	a9 08		lda #$08	                LDA #$08
.190915	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.190919	a9 0c		lda #$0c	                LDA #$0C
.19091b	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.19091f	a9 10		lda #$10	                LDA #$10
.190921	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.190925	a9 14		lda #$14	                LDA #$14
.190927	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.19092b	a9 18		lda #$18	                LDA #$18
.19092d	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.190931	a9 1c		lda #$1c	                LDA #$1C
.190933	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.190937	a9 20		lda #$20	                LDA #$20
.190939	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.19093d	a9 24		lda #$24	                LDA #$24
.19093f	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.190943	a9 28		lda #$28	                LDA #$28
.190945	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.190949	a9 2c		lda #$2c	                LDA #$2C
.19094b	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.19094f	a9 30		lda #$30	                LDA #$30
.190951	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.190955	a9 34		lda #$34	                LDA #$34
.190957	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.19095b	a9 38		lda #$38	                LDA #$38
.19095d	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.190961	a9 3c		lda #$3c	                LDA #$3C
.190963	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.190967	a9 40		lda #$40	                LDA #$40
.190969	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.19096d	a9 00		lda #$00	                LDA #$00
.19096f	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.190973	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.190977	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.19097b	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.19097f	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.190983	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.190987	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.19098b	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.19098f	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.190993	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.190997	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.19099b	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.19099f	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.1909a3	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.1909a7	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.1909ab	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.1909af	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.1909b3	68		pla		                PLA
.1909b4	6b		rtl		                RTL
.1909b5					IINITFONTSET
.1909b5	e2 20		sep #$20	                SEP #$20        ; set A short
.1909b7	c2 10		rep #$10	                REP #$10        ; set X long
.1909b9	a2 00 00	ldx #$0000	                LDX #$0000
.1909bc					initFontsetbranch0
.1909bc	bf 00 f0 1f	lda $1ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.1909c0	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.1909c4	e8		inx		                INX
.1909c5	e0 00 08	cpx #$0800	                CPX #$0800
.1909c8	d0 f2		bne $1909bc	                BNE initFontsetbranch0
.1909ca	ea		nop		                NOP
.1909cb	a2 00 00	ldx #$0000	                LDX #$0000
.1909ce					initFontsetbranch1
.1909ce	bf 00 f8 1f	lda $1ff800,x	                LDA @lBM437_ATI_8X8_Font_Set,X
.1909d2	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.1909d6	e8		inx		                INX
.1909d7	e0 00 08	cpx #$0800	                CPX #$0800
.1909da	d0 f2		bne $1909ce	                BNE initFontsetbranch1
.1909dc	ea		nop		                NOP
.1909dd	c2 30		rep #$30	                REP #$30        ; set A&X long
.1909df	6b		rtl		                RTL
.1909e0	48		pha		IINITCURSOR     PHA
.1909e1	e2 20		sep #$20	                SEP #$20        ; set A short
.1909e3	a9 a0		lda #$a0	                LDA #$A0      ;The Cursor Character will be a Fully Filled Block
.1909e5	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.1909e9	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.1909eb	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.1909ef	c2 30		rep #$30	                REP #$30        ; set A&X long
.1909f1	a9 00 00	lda #$0000	                LDA #$0000;
.1909f4	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.1909f8	a9 06 00	lda #$0006	                LDA #$0006;
.1909fb	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.1909ff	68		pla		                PLA
.190a00	6b		rtl		                RTL
.190a01	0b		phd		IINITSUPERIO	  PHD
.190a02	08		php		                PHP
.190a03	48		pha		                PHA
.190a04	e2 20		sep #$20	                SEP #$20        ; set A short
.190a06	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190a08	8f 23 11 af	sta $af1123	                STA GP10_REG
.190a0c	af 23 11 af	lda $af1123	                LDA GP10_REG
.190a10	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190a12	8f 24 11 af	sta $af1124	                STA GP11_REG
.190a16	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190a18	8f 25 11 af	sta $af1125	                STA GP12_REG
.190a1c	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190a1e	8f 26 11 af	sta $af1126	        				STA GP13_REG
.190a22	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.190a24	8f 27 11 af	sta $af1127	        				STA GP14_REG
.190a28	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.190a2a	8f 28 11 af	sta $af1128	        				STA GP15_REG
.190a2e	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.190a30	8f 29 11 af	sta $af1129	        				STA GP16_REG
.190a34	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.190a36	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.190a3a	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.190a3c	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.190a40	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190a42	8f 2f 11 af	sta $af112f					        STA GP24_REG
.190a46	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.190a48	8f 30 11 af	sta $af1130					        STA GP25_REG
.190a4c	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.190a4e	8f 31 11 af	sta $af1131					        STA GP26_REG
.190a52	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.190a54	8f 33 11 af	sta $af1133					        STA GP30_REG
.190a58	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.190a5a	8f 34 11 af	sta $af1134					        STA GP31_REG
.190a5e	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.190a60	8f 35 11 af	sta $af1135					        STA GP32_REG
.190a64	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.190a66	8f 36 11 af	sta $af1136					        STA GP33_REG
.190a6a	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.190a6c	8f 37 11 af	sta $af1137					        STA GP34_REG
.190a70	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.190a72	8f 38 11 af	sta $af1138					        STA GP35_REG
.190a76	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.190a78	8f 39 11 af	sta $af1139					        STA GP36_REG
.190a7c	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.190a7e	8f 3a 11 af	sta $af113a					        STA GP37_REG
.190a82	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190a84	8f 3d 11 af	sta $af113d					        STA GP42_REG
.190a88	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.190a8a	8f 3e 11 af	sta $af113e					        STA GP43_REG
.190a8e	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.190a90	8f 3f 11 af	sta $af113f					        STA GP50_REG
.190a94	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.190a96	8f 40 11 af	sta $af1140					        STA GP51_REG
.190a9a	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.190a9c	8f 41 11 af	sta $af1141					        STA GP52_REG
.190aa0	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.190aa2	8f 42 11 af	sta $af1142					        STA GP53_REG
.190aa6	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.190aa8	8f 43 11 af	sta $af1143					        STA GP54_REG
.190aac	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.190aae	8f 44 11 af	sta $af1144					        STA GP55_REG
.190ab2	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.190ab4	8f 45 11 af	sta $af1145					        STA GP56_REG
.190ab8	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.190aba	8f 46 11 af	sta $af1146					        STA GP57_REG
.190abe	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.190ac0	8f 47 11 af	sta $af1147					        STA GP60_REG
.190ac4	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.190ac6	8f 48 11 af	sta $af1148					        STA GP61_REG
.190aca	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.190acc	8f 4b 11 af	sta $af114b					        STA GP1_REG
.190ad0	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.190ad2	8f 4c 11 af	sta $af114c					        STA GP2_REG
.190ad6	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.190ad8	8f 4d 11 af	sta $af114d					        STA GP3_REG
.190adc	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.190ade	8f 4e 11 af	sta $af114e					        STA GP4_REG
.190ae2	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.190ae4	8f 4f 11 af	sta $af114f					        STA GP5_REG
.190ae8	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.190aea	8f 50 11 af	sta $af1150					        STA GP6_REG
.190aee	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.190af0	8f 5d 11 af	sta $af115d					        STA LED1_REG
.190af4	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.190af6	8f 5e 11 af	sta $af115e					        STA LED2_REG
.190afa	c2 20		rep #$20	                REP #$20        ; set A long
.190afc	68		pla		                PLA
.190afd	28		plp						        PLP
.190afe	2b		pld					        	PLD
.190aff	6b		rtl		                RTL
.190b00	0b		phd		IINITKEYBOARD	  PHD
.190b01	08		php						        PHP
.190b02	48		pha						        PHA
.190b03	da		phx						        PHX
.190b04	e2 20		sep #$20	                SEP #$20        ; set A short
.190b06	c2 10		rep #$10	                REP #$10        ; set X long
.190b08	18		clc		                CLC
.190b09	20 95 0b	jsr $190b95	                JSR Poll_Inbuf ;
.190b0c	a9 aa		lda #$aa					        LDA #$0AA			;Send self test command
.190b0e	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.190b12	20 a0 0b	jsr $190ba0	                JSR Poll_Outbuf ;
.190b15	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.190b19	c9 55		cmp #$55					        CMP #$55
.190b1b	f0 03		beq $190b20					        BEQ	passAAtest
.190b1d	82 65 00	brl $190b85	                BRL initkb_loop_out
.190b20					passAAtest
.190b20	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.190b22	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.190b26	20 a0 0b	jsr $190ba0	                JSR Poll_Outbuf ;
.190b29	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.190b2d	c9 00		cmp #$00					        CMP #$00			;Should be 00
.190b2f	f0 03		beq $190b34					        BEQ	passABtest
.190b31	82 51 00	brl $190b85	                BRL initkb_loop_out
.190b34					passABtest
.190b34	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.190b36	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.190b3a	20 95 0b	jsr $190b95	                JSR Poll_Inbuf ;
.190b3d	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.190b3f	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.190b43	20 95 0b	jsr $190b95	                JSR Poll_Inbuf ;
.190b46	a9 ee		lda #$ee	                LDA #$EE      ; Send Keyboard Reset command
.190b48	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.190b4c	a2 00 40	ldx #$4000	                LDX #$4000
.190b4f	ca		dex		DLY_LOOP2       DEX
.190b50	e0 00 00	cpx #$0000	                CPX #$0000
.190b53	d0 fa		bne $190b4f	                BNE DLY_LOOP2
.190b55	20 a0 0b	jsr $190ba0	                JSR Poll_Outbuf ;
.190b58	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.190b5c	c9 ee		cmp #$ee	                CMP #$EE
.190b5e	d0 25		bne $190b85	                BNE initkb_loop_out
.190b60	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.190b62	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.190b66	20 a0 0b	jsr $190ba0	                JSR Poll_Outbuf ;
.190b69	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.190b6d	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.190b71	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.190b75	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.190b79	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.190b7b	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190b7f	a2 1a 12	ldx #$121a	                LDX #<>Success_kb_init
.190b82	38		sec		                SEC
.190b83	b0 03		bcs $190b88	                BCS InitSuccess
.190b85	a2 2c 12	ldx #$122c	initkb_loop_out LDX #<>Failed_kb_init
.190b88	22 7e 05 19	jsl $19057e	InitSuccess     JSL IPRINT       ; print Message
.190b8c	c2 20		rep #$20	                REP #$20        ; set A long
.190b8e	c2 10		rep #$10	                REP #$10        ; set X long
.190b90	fa		plx		                PLX
.190b91	68		pla		                PLA
.190b92	28		plp						        PLP
.190b93	2b		pld						        PLD
.190b94	6b		rtl		                RTL
.190b95					Poll_Inbuf
.190b95	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.190b99	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.190b9b	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.190b9d	f0 f6		beq $190b95					        BEQ Poll_Inbuf
.190b9f	60		rts		                RTS
.190ba0					Poll_Outbuf
.190ba0	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.190ba4	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.190ba6	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.190ba8	d0 f6		bne $190ba0	                BNE Poll_Outbuf
.190baa	60		rts		                RTS
.190bab	48		pha		IINITRTC        PHA
.190bac	e2 20		sep #$20	                SEP #$20        ; set A short
.190bae	a9 00		lda #$00	                LDA #$00
.190bb0	8f 00 08 af	sta $af0800	                STA RTC_SEC     ;Set the Time to 10:10AM
.190bb4	a9 0a		lda #$0a	                LDA #10
.190bb6	8f 02 08 af	sta $af0802	                STA RTC_MIN
.190bba	8f 04 08 af	sta $af0804	                STA RTC_HRS
.190bbe	a9 0c		lda #$0c	                LDA #12
.190bc0	8f 06 08 af	sta $af0806	                STA RTC_DAY
.190bc4	a9 04		lda #$04	                LDA #04
.190bc6	8f 09 08 af	sta $af0809	                STA RTC_MONTH   ; April 12th, 2018 - Begining of the Project
.190bca	a9 04		lda #$04	                LDA #04
.190bcc	8f 09 08 af	sta $af0809	                STA RTC_MONTH   ; Thursday
.190bd0	a9 12		lda #$12	                LDA #18
.190bd2	8f 0a 08 af	sta $af080a	                STA RTC_YEAR    ; Thursday
.190bd6	af 06 08 af	lda $af0806	                LDA RTC_DAY     ; Read the Day Registers
.190bda	8f 06 08 af	sta $af0806	                STA RTC_DAY     ; Store it back
.190bde	c2 20		rep #$20	                REP #$20        ; set A long
.190be0	68		pla		                PLA
.190be1	6b		rtl		                RTL
.190be2	48		pha		ITESTSID        PHA
.190be3	e2 20		sep #$20	                SEP #$20        ; set A short
.190be5	a9 0f		lda #$0f	                LDA #$0F
.190be7	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.190beb	a9 be		lda #$be	                LDA #$BE
.190bed	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.190bf1	a9 f8		lda #$f8	                LDA #$F8
.190bf3	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.190bf7	a9 11		lda #$11	                LDA #$11
.190bf9	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.190bfd	a9 25		lda #$25	                LDA #$25
.190bff	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.190c03	a9 11		lda #$11	                LDA #$11
.190c05	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.190c09	c2 20		rep #$20	                REP #$20        ; set A long
.190c0b	68		pla		                PLA
.190c0c	6b		rtl		                RTL
.190c0d	48		pha		ITESTMATH       PHA
.190c0e	c2 20		rep #$20	                REP #$20        ; set A long
.190c10	a9 34 12	lda #$1234	                LDA #$1234
.190c13	8f 00 01 00	sta $000100	                STA UNSIGNED_MULT_A_LO
.190c17	a9 aa 55	lda #$55aa	                LDA #$55AA
.190c1a	8f 02 01 00	sta $000102	                STA UNSIGNED_MULT_B_LO
.190c1e	af 04 01 00	lda $000104	                LDA UNSIGNED_MULT_AL_LO
.190c22	8f 00 0e 00	sta $000e00	                STA STEF_BLOB_BEGIN
.190c26	af 06 01 00	lda $000106	                LDA UNSIGNED_MULT_AH_LO
.190c2a	8f 02 0e 00	sta $000e02	                STA STEF_BLOB_BEGIN + 2
.190c2e	c2 10		rep #$10	                REP #$10        ; set X long
.190c30	c2 20		rep #$20	                REP #$20        ; set A long
.190c32	68		pla		                PLA
.190c33	6b		rtl		                RTL
.190c34	48		pha		IINITCODEC      PHA
.190c35	c2 20		rep #$20	                REP #$20        ; set A long
.190c37	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.190c3a	8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190c3e	a9 01 00	lda #$0001	                LDA #$0001
.190c41	8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190c45	20 91 0c	jsr $190c91	                JSR CODEC_TRF_FINISHED
.190c48	a9 03 2a	lda #$2a03	                LDA #%0010101000000011       ;R21 - Enable All the Analog In
.190c4b	8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190c4f	a9 01 00	lda #$0001	                LDA #$0001
.190c52	8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190c56	20 91 0c	jsr $190c91	                JSR CODEC_TRF_FINISHED
.190c59	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.190c5c	8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190c60	a9 01 00	lda #$0001	                LDA #$0001
.190c63	8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190c67	20 91 0c	jsr $190c91	                JSR CODEC_TRF_FINISHED
.190c6a	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.190c6d	8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190c71	a9 01 00	lda #$0001	                LDA #$0001
.190c74	8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190c78	20 91 0c	jsr $190c91	                JSR CODEC_TRF_FINISHED
.190c7b	68		pla		                PLA
.190c7c	6b		rtl		                RTL
.190c7d					IRESETCODEC
.190c7d	c2 20		rep #$20	                REP #$20        ; set A long
.190c7f	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.190c82	8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190c86	a9 01 00	lda #$0001	                LDA #$0001
.190c89	8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190c8d	20 91 0c	jsr $190c91	                JSR CODEC_TRF_FINISHED
.190c90	6b		rtl		                RTL
.190c91					CODEC_TRF_FINISHED
.190c91	e2 20		sep #$20	                SEP #$20        ; set A short
.190c93	af 22 e8 af	lda $afe822	CODEC_LOOP      LDA CODEC_WR_CTRL
.190c97	29 01		and #$01	                AND #$01
.190c99	c9 01		cmp #$01	                CMP #$01
.190c9b	f0 f6		beq $190c93	                BEQ CODEC_LOOP
.190c9d	c2 20		rep #$20	                REP #$20        ; set A long
.190c9f	60		rts		                RTS
.190ca0					IBM_FILL_SCREEN
.190ca0	c2 30		rep #$30	                REP #$30        ; set A&X long
.190ca2	a9 00 00	lda #$0000	                LDA #$0000
.190ca5	a2 00 00	ldx #$0000	                LDX #$0000
.190ca8					BM_FILL_SCREEN_LOOPY
.190ca8	a0 00 00	ldy #$0000	                LDY #$0000
.190cab	e2 20		sep #$20	                SEP #$20        ; set A short
.190cad					BM_FILL_SCREEN_LOOPX
.190cad	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190caf	c8		iny		                INY
.190cb0	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.190cb2	d0 f9		bne $190cad	                BNE BM_FILL_SCREEN_LOOPX
.190cb4	20 bf 0c	jsr $190cbf	                JSR BM_FILL_COMPUTE_Y_DST
.190cb7	e8		inx		                INX
.190cb8	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.190cba	d0 ec		bne $190ca8	                BNE BM_FILL_SCREEN_LOOPY
.190cbc	c2 30		rep #$30	                REP #$30        ; set A&X long
.190cbe	6b		rtl		                RTL
.190cbf					BM_FILL_COMPUTE_Y_DST
.190cbf	c2 20		rep #$20	                REP #$20        ; set A long
.190cc1	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190cc3	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190cc7	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.190cc9	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190ccd	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.190cd0	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190cd4	a9 00 00	lda #$0000	                LDA #$0000
.190cd7	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190cdb	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190cdf	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190ce1	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190ce5	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190ce7	a9 00 00	lda #$0000	                LDA #$0000
.190cea	60		rts		                RTS
.190ceb					IBMP_PARSER
.190ceb	c2 30		rep #$30	                REP #$30        ; set A&X long
.190ced	a0 00 00	ldy #$0000	                LDY #$0000
.190cf0	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.190cf2	c9 42 4d	cmp #$4d42	                CMP #$4D42
.190cf5	f0 03		beq $190cfa	                BEQ IBMP_PARSER_CONT
.190cf7	82 04 01	brl $190dfe	                BRL BMP_PARSER_END_WITH_ERROR
.190cfa					IBMP_PARSER_CONT
.190cfa	a0 02 00	ldy #$0002	                LDY #$0002
.190cfd	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.190cff	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190d03	a0 04 00	ldy #$0004	                LDY #$0004
.190d06	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.190d08	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190d0c	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.190d0f	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190d13	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190d17	18		clc		                CLC
.190d18	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190d1c	85 50		sta $50		                STA BMP_FILE_SIZE
.190d1e	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190d22	85 52		sta $52		                STA BMP_FILE_SIZE+2
.190d24	a0 12 00	ldy #$0012	                LDY #$0012
.190d27	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190d29	85 40		sta $40		                STA BMP_X_SIZE
.190d2b	a0 16 00	ldy #$0016	                LDY #$0016
.190d2e	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190d30	85 42		sta $42		                STA BMP_Y_SIZE
.190d32	a0 2e 00	ldy #$002e	                LDY #$002E
.190d35	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190d37	0a		asl a		                ASL A; Multiply by 2
.190d38	0a		asl a		                ASL A; Multiply by 2
.190d39	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.190d3b	e0 00 00	cpx #$0000	                CPX #$0000
.190d3e	d0 05		bne $190d45	                BNE BMP_LUT1_PICK
.190d40	20 06 0e	jsr $190e06	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.190d43	80 08		bra $190d4d	                BRA DONE_TRANSFER_LUT;
.190d45					  BMP_LUT1_PICK
.190d45	e0 01 00	cpx #$0001	                CPX #$0001
.190d48	d0 03		bne $190d4d	                BNE BMP_LUT2_PICK
.190d4a	20 36 0e	jsr $190e36	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.190d4d					  BMP_LUT2_PICK
.190d4d					  DONE_TRANSFER_LUT
.190d4d	a5 56		lda $56		                LDA BMP_POSITION_Y
.190d4f	8f 00 01 00	sta $000100	                STA @lM0_OPERAND_A
.190d53	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.190d55	8f 02 01 00	sta $000102	                STA @lM0_OPERAND_B
.190d59	af 04 01 00	lda $000104	                LDA @lM0_RESULT
.190d5d	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190d61	af 06 01 00	lda $000106	                LDA @lM0_RESULT+2
.190d65	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190d69	a5 54		lda $54		                LDA BMP_POSITION_X
.190d6b	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.190d6f	a9 00 00	lda #$0000	                LDA #$0000
.190d72	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190d76	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.190d7a	85 f0		sta $f0		                STA USER_TEMP
.190d7c	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.190d80	85 f2		sta $f2		                STA USER_TEMP+2
.190d82	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190d84	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190d88	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190d8a	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190d8e	a5 f0		lda $f0		                LDA USER_TEMP
.190d90	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.190d94	a5 f2		lda $f2		                LDA USER_TEMP+2
.190d96	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.190d9a	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.190d9e	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190da0	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.190da4	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190da6	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.190da8	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190dac	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.190dae	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190db2	a5 50		lda $50		                LDA BMP_FILE_SIZE
.190db4	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190db8	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.190dba	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190dbe	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190dc2	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190dc4	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190dc8	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190dca	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190dcc	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190dd0	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190dd2	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190dd6	18		clc		                CLC
.190dd7	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.190dd9	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.190ddc	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.190ddf	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.190de3	a9 ff ff	lda #$ffff	                LDA #$FFFF
.190de6	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.190dea	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190dee	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190df0	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190df4	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190df6	20 66 0e	jsr $190e66	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.190df9	a2 8a 12	ldx #$128a	                LDX #<>bmp_parser_msg0
.190dfc	80 03		bra $190e01	                BRA BMP_PARSER_END_NO_ERROR
.190dfe					BMP_PARSER_END_WITH_ERROR
.190dfe	a2 76 12	ldx #$1276	                LDX #<>bmp_parser_err0
.190e01					BMP_PARSER_END_NO_ERROR
.190e01	22 7e 05 19	jsl $19057e	                JSL IPRINT       ; print the first line
.190e05	6b		rtl		                RTL
.190e06					BMP_PARSER_UPDATE_LUT0
.190e06	38		sec		                SEC
.190e07	a0 7a 00	ldy #$007a	                LDY #$007A
.190e0a	a2 00 00	ldx #$0000	                LDX #$0000
.190e0d	e2 20		sep #$20	                SEP #$20        ; set A short
.190e0f					BMP_PARSER_UPDATE_LOOP
.190e0f	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190e11	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.190e15	c8		iny		                INY
.190e16	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190e18	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.190e1c	c8		iny		                INY
.190e1d	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190e1f	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.190e23	c8		iny		                INY
.190e24	a9 80		lda #$80	                LDA #$80
.190e26	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.190e2a	c8		iny		                INY ; For the Alpha Value, nobody cares
.190e2b	e8		inx		                INX
.190e2c	e8		inx		                INX
.190e2d	e8		inx		                INX
.190e2e	e8		inx		                INX
.190e2f	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190e31	d0 dc		bne $190e0f	                BNE BMP_PARSER_UPDATE_LOOP
.190e33	c2 20		rep #$20	                REP #$20        ; set A long
.190e35	60		rts		                RTS
.190e36					BMP_PARSER_UPDATE_LUT1
.190e36	38		sec		                SEC
.190e37	a0 36 00	ldy #$0036	                LDY #$0036
.190e3a	a2 00 00	ldx #$0000	                LDX #$0000
.190e3d	e2 20		sep #$20	                SEP #$20        ; set A short
.190e3f					PALETTE_LUT1_LOOP
.190e3f	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190e41	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.190e45	c8		iny		                INY
.190e46	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190e48	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.190e4c	c8		iny		                INY
.190e4d	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190e4f	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.190e53	c8		iny		                INY
.190e54	a9 80		lda #$80	                LDA #$80
.190e56	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.190e5a	c8		iny		                INY ; For the Alpha Value, nobody cares
.190e5b	e8		inx		                INX
.190e5c	e8		inx		                INX
.190e5d	e8		inx		                INX
.190e5e	e8		inx		                INX
.190e5f	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190e61	d0 dc		bne $190e3f	                BNE PALETTE_LUT1_LOOP
.190e63	c2 20		rep #$20	                REP #$20        ; set A long
.190e65	60		rts		                RTS
.190e66					BMP_PARSER_DMA_SHIT_OUT
.190e66	a2 00 00	ldx #$0000	                LDX #$0000
.190e69					BMP_PARSER_LOOPY
.190e69	a0 00 00	ldy #$0000	                LDY #$0000
.190e6c	e2 20		sep #$20	                SEP #$20        ; set A short
.190e6e					BMP_PARSER_LOOPX
.190e6e	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.190e70	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190e72	c8		iny		                INY
.190e73	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.190e75	d0 f7		bne $190e6e	                BNE BMP_PARSER_LOOPX
.190e77	20 83 0e	jsr $190e83	                JSR BMP_PARSER_COMPUTE_Y_SRC
.190e7a	20 9e 0e	jsr $190e9e	                JSR BMP_PARSER_COMPUTE_Y_DST
.190e7d	e8		inx		                INX
.190e7e	e4 42		cpx $42		                CPX BMP_Y_SIZE
.190e80	d0 e7		bne $190e69	                BNE BMP_PARSER_LOOPY
.190e82	60		rts		                RTS
.190e83					BMP_PARSER_COMPUTE_Y_SRC
.190e83	c2 20		rep #$20	                REP #$20        ; set A long
.190e85	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190e87	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190e8b	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190e8d	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190e91	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190e95	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190e97	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190e9b	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190e9d	60		rts		                RTS
.190e9e					BMP_PARSER_COMPUTE_Y_DST
.190e9e	c2 20		rep #$20	                REP #$20        ; set A long
.190ea0	18		clc		                CLC
.190ea1	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190ea3	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.190ea5	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190ea7	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190ea9	69 00 00	adc #$0000	                ADC #$0000
.190eac	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190eae	60		rts		                RTS
.190eaf					IRQ_HANDLER
.190eaf	e2 20		sep #$20	                SEP #$20        ; set A short
.190eb1	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0 ; Clear the Pending INTERRUPT
.190eb5	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0 ; Clear the Pending INTERRUPT
.190eb9	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1 ; Clear the Pending INTERRUPT
.190ebd	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1 ; Clear the Pending INTERRUPT
.190ec1	af 42 01 00	lda $000142	                LDA @lINT_PENDING_REG2 ; Clear the Pending INTERRUPT
.190ec5	8f 42 01 00	sta $000142	                STA @lINT_PENDING_REG2 ; Clear the Pending INTERRUPT
.190ec9	a2 00 00	ldx #$0000	                ldx #$0000
.190ecc	e2 10		sep #$10	                SEP #$10        ; set X short
.190ece					IRQ_HANDLER_FETCH
.190ece	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF        ; Get Scan Code from KeyBoard
.190ed2	8f 44 0f 00	sta $000f44	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.190ed6	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.190ed8	f0 6b		beq $190f45	                BEQ KB_SET_SHIFT
.190eda	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.190edc	f0 74		beq $190f52	                BEQ KB_CLR_SHIFT
.190ede	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.190ee0	f0 7d		beq $190f5f	                BEQ KB_SET_CTRL
.190ee2	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.190ee4	d0 03		bne $190ee9	                BNE KB_CHECK_ALT
.190ee6	82 83 00	brl $190f6c	                BRL KB_CLR_CTRL
.190ee9	c9 38		cmp #$38	KB_CHECK_ALT    CMP #$38                ; Left ALT Pressed
.190eeb	d0 03		bne $190ef0	                BNE KB_ALT_UNPRESED
.190eed	82 89 00	brl $190f79	                BRL KB_SET_ALT
.190ef0	c9 b8		cmp #$b8	KB_ALT_UNPRESED CMP #$B8                ; Left ALT Unpressed
.190ef2	d0 03		bne $190ef7	                BNE KB_UNPRESSED
.190ef4	82 8f 00	brl $190f86	                BRL KB_CLR_ALT
.190ef7	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.190ef9	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.190efb	d0 03		bne $190f00	                BNE KB_NORM_SC
.190efd	82 90 00	brl $190f90	                BRL KB_CHECK_B_DONE
.190f00	af 44 0f 00	lda $000f44	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.190f04	aa		tax		                TAX
.190f05	af 43 0f 00	lda $000f43	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.190f09	29 10		and #$10	                AND #$10
.190f0b	c9 10		cmp #$10	                CMP #$10
.190f0d	f0 1b		beq $190f2a	                BEQ SHIFT_KEY_ON
.190f0f	af 43 0f 00	lda $000f43	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.190f13	29 20		and #$20	                AND #$20
.190f15	c9 20		cmp #$20	                CMP #$20
.190f17	f0 18		beq $190f31	                BEQ CTRL_KEY_ON
.190f19	af 43 0f 00	lda $000f43	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.190f1d	29 40		and #$40	                AND #$40
.190f1f	c9 40		cmp #$40	                CMP #$40
.190f21	f0 15		beq $190f38	                BEQ ALT_KEY_ON
.190f23	bf 00 14 19	lda $191400,x	                LDA @lScanCode_Press_Set1, x
.190f27	82 12 00	brl $190f3c	                BRL KB_WR_2_SCREEN
.190f2a	bf 80 14 19	lda $191480,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.190f2e	82 0b 00	brl $190f3c	                BRL KB_WR_2_SCREEN
.190f31	bf 00 15 19	lda $191500,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.190f35	82 04 00	brl $190f3c	                BRL KB_WR_2_SCREEN
.190f38	bf 80 15 19	lda $191580,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.190f3c					KB_WR_2_SCREEN
.190f3c	c2 10		rep #$10	                REP #$10        ; set X long
.190f3e	22 18 00 19	jsl $190018	                JSL PUTC
.190f42	4c 90 0f	jmp $190f90	                JMP KB_CHECK_B_DONE
.190f45	af 43 0f 00	lda $000f43	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.190f49	09 10		ora #$10	                ORA #$10
.190f4b	8f 43 0f 00	sta $000f43	                STA KEYBOARD_SC_FLG
.190f4f	4c 90 0f	jmp $190f90	                JMP KB_CHECK_B_DONE
.190f52	af 43 0f 00	lda $000f43	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.190f56	29 ef		and #$ef	                AND #$EF
.190f58	8f 43 0f 00	sta $000f43	                STA KEYBOARD_SC_FLG
.190f5c	4c 90 0f	jmp $190f90	                JMP KB_CHECK_B_DONE
.190f5f	af 43 0f 00	lda $000f43	KB_SET_CTRL    LDA KEYBOARD_SC_FLG
.190f63	09 20		ora #$20	                ORA #$20
.190f65	8f 43 0f 00	sta $000f43	                STA KEYBOARD_SC_FLG
.190f69	4c 90 0f	jmp $190f90	                JMP KB_CHECK_B_DONE
.190f6c	af 43 0f 00	lda $000f43	KB_CLR_CTRL    LDA KEYBOARD_SC_FLG
.190f70	29 df		and #$df	                AND #$DF
.190f72	8f 43 0f 00	sta $000f43	                STA KEYBOARD_SC_FLG
.190f76	4c 90 0f	jmp $190f90	                JMP KB_CHECK_B_DONE
.190f79	af 43 0f 00	lda $000f43	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.190f7d	09 40		ora #$40	                ORA #$40
.190f7f	8f 43 0f 00	sta $000f43	                STA KEYBOARD_SC_FLG
.190f83	4c 90 0f	jmp $190f90	                JMP KB_CHECK_B_DONE
.190f86	af 43 0f 00	lda $000f43	KB_CLR_ALT     LDA KEYBOARD_SC_FLG
.190f8a	29 bf		and #$bf	                AND #$BF
.190f8c	8f 43 0f 00	sta $000f43	                STA KEYBOARD_SC_FLG
.190f90					KB_CHECK_B_DONE
.190f90	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.190f94	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.190f96	c9 01		cmp #$01	                CMP #OUT_BUF_FULL ; if Still Byte in the Buffer, fetch it out
.190f98	d0 03		bne $190f9d	                BNE KB_DONE
.190f9a	4c ce 0e	jmp $190ece	                JMP IRQ_HANDLER_FETCH
.190f9d					KB_DONE
.190f9d	c2 30		rep #$30	                REP #$30        ; set A&X long
.190f9f	6b		rtl		                RTL
.190fa0					NMI_HANDLER
.190fa0	a2 65 12	ldx #$1265	                LDX #<>nmi_Msg
.190fa3	22 7e 05 19	jsl $19057e	                JSL IPRINT       ; print the Init
.190fa7	6b		rtl		                RTL
.190fa8	00		brk #		IRESTORE        BRK ; Warm boot routine
.190fa9	00		brk #		ISCINIT         BRK ;
.190faa	00		brk #		IIOINIT         BRK ;
.190fab	00		brk #		IPUTBLOCK       BRK ; Ouput a binary block to the currently selected channel
.190fac	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.190fad	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.190fae	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.190faf	00		brk #		ICLOSE          BRK ; Close a channel
.190fb0	00		brk #		ISETIN          BRK ; Set the current input channel
.190fb1	00		brk #		ISETOUT         BRK ; Set the current output channel
.190fb2	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.190fb3	00		brk #		IGETBLOCK       BRK ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
.190fb4	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.190fb5	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.190fb6	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.190fb7	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.190fb8	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.190fb9	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.190fba	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.190fbb	00		brk #		IPRINTF         BRK ; Print a float value
.190fbc	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.190fbd	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.190fbe	00		brk #		IPRINTAH        BRK ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
.190fbf	00		brk #		IPUSHKEY        BRK ;
.190fc0	00		brk #		IPUSHKEYS       BRK ;
.190fc1	00		brk #		ICSRLEFT        BRK ;
.190fc2	00		brk #		ICSRHOME        BRK ;
.190fc3	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.190fc4	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.190fc5					KERNEL_DATA
>190fc5	20 20 20 20 ec a9 ec a9		greet_msg       .text $20, $20, $20, $20, $EC, $A9, $EC, $A9, $EC, $A9, $EC, $A9, $EC, $A9, "C256 FOENIX DEVELOPMENT SYSTEM",$0D
>190fcd	ec a9 ec a9 ec a9 43 32 35 36 20 46 4f 45 4e 49
>190fdd	58 20 44 45 56 45 4c 4f 50 4d 45 4e 54 20 53 59
>190fed	53 54 45 4d 0d
>190ff2	20 20 20 ec a9 ec a9 ec		                .text $20, $20, $20, $EC, $A9, $EC, $A9, $EC, $A9, $EC, $A9, $EC, $A9, $20, "Software Development Team: TBD",$0D
>190ffa	a9 ec a9 ec a9 20 53 6f 66 74 77 61 72 65 20 44
>19100a	65 76 65 6c 6f 70 6d 65 6e 74 20 54 65 61 6d 3a
>19101a	20 54 42 44 0d
>19101f	20 20 ec a9 ec a9 ec a9		                .text $20, $20, $EC, $A9, $EC, $A9, $EC, $A9, $EC, $A9, $EC, $A9, $20, $20, "Hardware platform Created by: Stefany Allaire",$0D
>191027	ec a9 ec a9 20 20 48 61 72 64 77 61 72 65 20 70
>191037	6c 61 74 66 6f 72 6d 20 43 72 65 61 74 65 64 20
>191047	62 79 3a 20 53 74 65 66 61 6e 79 20 41 6c 6c 61
>191057	69 72 65 0d
>19105b	20 ec a9 ec a9 ec a9 ec		                .text $20, $EC, $A9, $EC, $A9, $EC, $A9, $EC, $A9, $EC, $A9, $20, $20, $20, "www.c256foenix.com",$0D
>191063	a9 ec a9 20 20 20 77 77 77 2e 63 32 35 36 66 6f
>191073	65 6e 69 78 2e 63 6f 6d 0d
>19107c	ec a9 ec a9 ec a9 ec a9		                .text $EC, $A9, $EC, $A9, $EC, $A9, $EC, $A9, $EC, $A9, $20, $20, $20, $20, "2048KB CODE RAM  4096K VIDEO MEM",$00
>191084	ec a9 20 20 20 20 32 30 34 38 4b 42 20 43 4f 44
>191094	45 20 52 41 4d 20 20 34 30 39 36 4b 20 56 49 44
>1910a4	45 4f 20 4d 45 4d 00
>1910ab	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D
>1910b3	4d 4d 2d 2d 5d 5d
>1910b9	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D
>1910c1	4d 2d 2d 5d 5d 5d
>1910c7	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D, $5D
>1910cf	2d 2d 5d 5d 5d 5d
>1910d5	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D, $5D, $5D
>1910dd	2d 5d 5d 5d 5d 5d
>1910e3	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D, $5D, $5D, $5D
>1910eb	5d 5d 5d 5d 5d 5d
>1910f1	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>1910f5	00 00 80 ff			                .text $00, $00, $80, $FF
>1910f9	00 80 00 ff			                .text $00, $80, $00, $FF
>1910fd	80 00 00 ff			                .text $80, $00, $00, $FF
>191101	00 80 80 ff			                .text $00, $80, $80, $FF
>191105	80 80 00 ff			                .text $80, $80, $00, $FF
>191109	80 00 80 ff			                .text $80, $00, $80, $FF
>19110d	80 80 80 ff			                .text $80, $80, $80, $FF
>191111	00 45 ff ff			                .text $00, $45, $FF, $FF
>191115	13 45 8b ff			                .text $13, $45, $8B, $FF
>191119	00 00 20 ff			                .text $00, $00, $20, $FF
>19111d	00 20 00 ff			                .text $00, $20, $00, $FF
>191121	20 00 00 ff			                .text $20, $00, $00, $FF
>191125	20 20 20 ff			                .text $20, $20, $20, $FF
>191129	40 40 40 ff			                .text $40, $40, $40, $FF
>19112d	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>191131	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>191135	00 00 80 ff			                .text $00, $00, $80, $FF
>191139	00 80 00 ff			                .text $00, $80, $00, $FF
>19113d	80 00 00 ff			                .text $80, $00, $00, $FF
>191141	00 20 20 ff			                .text $00, $20, $20, $FF
>191145	20 20 00 ff			                .text $20, $20, $00, $FF
>191149	20 00 20 ff			                .text $20, $00, $20, $FF
>19114d	20 20 20 ff			                .text $20, $20, $20, $FF
>191151	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>191155	13 45 8b ff			                .text $13, $45, $8B, $FF
>191159	00 00 20 ff			                .text $00, $00, $20, $FF
>19115d	00 20 00 ff			                .text $00, $20, $00, $FF
>191161	40 00 00 ff			                .text $40, $00, $00, $FF
>191165	10 10 10 ff			                .text $10, $10, $10, $FF
>191169	40 40 40 ff			                .text $40, $40, $40, $FF
>19116d	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>191171	0d 44 65 62 75 67 20 43		version_msg     .text $0D, "Debug Code Version 0.0.0 - March 26th, 2019", $00
>191179	6f 64 65 20 56 65 72 73 69 6f 6e 20 30 2e 30 2e
>191189	30 20 2d 20 4d 61 72 63 68 20 32 36 74 68 2c 20
>191199	32 30 31 39 00
>19119e	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>1911a6	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>1911b6	00
>1911b7	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>1911bf	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>1911cf	00
>1911d0	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>1911d8	20 45 78 65 63 75 74 65 64 2e 0d 00
>1911e4	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>1911ec	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>1911fc	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>191204	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>191214	64 2e 2e 2e 0d 00
>19121a	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>191222	20 50 72 65 73 65 6e 74 0d 00
>19122c	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>191234	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>191244	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>191254	5b 49 52 51 20 49 6e 74		irq_Msg         .text "[IRQ Interrupt]", $0D, $00
>19125c	65 72 72 75 70 74 5d 0d 00
>191265	5b 4e 4d 49 20 49 6e 74		nmi_Msg         .text "[NMI Interrupt]", $0D, $00
>19126d	65 72 72 75 70 74 5d 0d 00
>191276	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>19127e	54 55 52 45 20 46 4f 55 4e 44 2e 00
>19128a	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>191292	45 44 2e 00
>191296	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>19129e	47 20 42 4d 50 20 50 41 52 53 45 52 00
>1912ab	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>1912b3	47 20 30 32 30 30 30 30		hello_ml        .null "G 020000",$0D
>1912bb	0d 00
>1912bd	48 45 4c 4c 4f 20 57 4f		                .null "HELLO WORLD",$0D
>1912c5	52 4c 44 0d 00
>1912ca	0d 00				                .null $0D
>1912cc	20 50 43 20 20 20 20 20		                .null " PC     A    X    Y    SP   DBR DP   NVMXDIZC",$0D
>1912d4	41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>1912e4	50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>1912f4	58 44 49 5a 43 0d 00
>1912fb	3b 30 30 32 31 31 32 20		                .null ";002112 0019 F0AA 0000 D6FF F8  0000 --M-----"
>191303	30 30 31 39 20 46 30 41 41 20 30 30 30 30 20 44
>191313	36 46 46 20 46 38 20 20 30 30 30 30 20 2d 2d 4d
>191323	2d 2d 2d 2d 2d 00
>191329	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>191331	52 4f 52 00
>191335	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>19133d	38 39 41 42 43 44 45 46 00
>191346					.align 256
>191400	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191408	37 38 39 30 2d 3d 08 09
>191410	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191418	6f 70 5b 5d 0d 00 61 73
>191420	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191428	27 60 00 5c 7a 78 63 76
>191430	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191438	00 20 00 00 00 00 00 00
>191440	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191448	00 00 00 00 00 00 00 00
>191450	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191458	00 00 00 00 00 00 00 00
>191460	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191468	00 00 00 00 00 00 00 00
>191470	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191478	00 00 00 00 00 00 00 00
>191480	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>191488	26 2a 28 29 5f 2b 08 09
>191490	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>191498	4f 50 7b 7d 0d 00 41 53
>1914a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>1914a8	22 7e 00 5c 5a 58 43 56
>1914b0	42 4e 4d 3c 3e 3f 00 2a		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1914b8	00 20 00 00 00 00 00 00
>1914c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1914c8	00 00 00 00 00 00 00 00
>1914d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1914d8	00 00 00 00 00 00 00 00
>1914e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1914e8	00 00 00 00 00 00 00 00
>1914f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1914f8	00 00 00 00 00 00 00 00
>191500	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191508	37 38 39 30 2d 3d 08 09
>191510	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191518	6f 70 5b 5d 0d 00 61 73
>191520	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191528	27 60 00 5c 7a 78 63 76
>191530	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191538	00 20 00 00 00 00 00 00
>191540	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191548	00 00 00 00 00 00 00 00
>191550	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191558	00 00 00 00 00 00 00 00
>191560	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191568	00 00 00 00 00 00 00 00
>191570	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191578	00 00 00 00 00 00 00 00
>191580	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191588	37 38 39 30 2d 3d 08 09
>191590	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191598	6f 70 5b 5d 0d 00 61 73
>1915a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>1915a8	27 60 00 5c 7a 78 63 76
>1915b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1915b8	00 20 00 00 00 00 00 00
>1915c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1915c8	00 00 00 00 00 00 00 00
>1915d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1915d8	00 00 00 00 00 00 00 00
>1915e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1915e8	00 00 00 00 00 00 00 00
>1915f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1915f8	00 00 00 00 00 00 00 00
>191600	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191608	37 38 39 30 2d 3d 08 09
>191610	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191618	6f 70 5b 5d 0d 00 61 73
>191620	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191628	27 60 00 5c 7a 78 63 76
>191630	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191638	00 20 00 00 00 00 00 00
>191640	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191648	00 00 00 00 00 00 00 00
>191650	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191658	00 00 00 00 00 00 00 00
>191660	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191668	00 00 00 00 00 00 00 00
>191670	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191678	00 00 00 00 00 00 00 00
>191680					.align 256
>191700	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>191708	34 37 3a 3d 3f 41 44 46
>191710	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>191718	57 58 5a 5b 5d 5e 60 61
>191720	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>191728	6d 6f 70 71 72 73 75 76
>191730	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>191738	80 81 82 83 84 85 86 87
>191740	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>191748	8f 90 91 92 93 93 94 95
>191750	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>191758	9d 9e 9e 9f a0 a1 a2 a2
>191760	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>191768	a9 aa ab ab ac ad ae ae
>191770	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>191778	b5 b5 b6 b7 b7 b8 b9 b9
>191780	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>191788	bf c0 c0 c1 c2 c2 c3 c4
>191790	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>191798	c9 ca ca cb cb cc cd cd
>1917a0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>1917a8	d2 d3 d4 d4 d5 d5 d6 d6
>1917b0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>1917b8	db dc dc dd de de df df
>1917c0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>1917c8	e4 e4 e5 e5 e6 e6 e7 e7
>1917d0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>1917d8	ec ec ed ed ee ee ef ef
>1917e0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>1917e8	f4 f4 f5 f5 f6 f6 f7 f7
>1917f0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>1917f8	fb fc fc fd fd fe fe ff
>191800					.align 256
>191800	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>191808	25 27 2a 2c 2e 30 32 34
>191810	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>191818	44 46 47 49 4a 4c 4d 4f
>191820	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>191828	5b 5c 5d 5e 60 61 62 63
>191830	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>191838	6d 6e 70 71 72 73 74 75
>191840	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>191848	7e 7f 80 81 82 83 84 84
>191850	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>191858	8d 8e 8e 8f 90 91 92 93
>191860	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>191868	9a 9b 9c 9d 9e 9f 9f a0
>191870	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>191878	a7 a8 a9 aa aa ab ac ad
>191880	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>191888	b3 b4 b5 b6 b6 b7 b8 b8
>191890	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>191898	bf bf c0 c1 c2 c2 c3 c4
>1918a0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>1918a8	ca ca cb cc cc cd ce ce
>1918b0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>1918b8	d4 d5 d6 d6 d7 d7 d8 d9
>1918c0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>1918c8	de df e0 e0 e1 e1 e2 e3
>1918d0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>1918d8	e8 e9 e9 ea ea eb ec ec
>1918e0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>1918e8	f1 f2 f3 f3 f4 f4 f5 f5
>1918f0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>1918f8	fb fb fc fc fd fd fe ff
>191900					.align 256
>191900	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>191908	83 dd ce 39 cd c5 3b 15
>191910	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>191918	87 12 31 65 89 27 88 42
>191920	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>191928	94 ce 56 ec fe da 58 c9
>191930	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>191938	d0 10 2c b2 4b ea 32 61
>191940	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>191948	a1 e6 ca 2d b3 ce b0 79
>191950	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>191958	5f e3 fb bd 15 2e be f5
>191960	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>191968	8d 8f 2c 80 0a 5e 99 36
>191970	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>191978	13 52 44 2f e3 ef 44 a2
>191980	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>191988	be 23 02 58 0a 52 5e b4
>191990	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>191998	d5 cf 3e df c4 9e da bb
>1919a0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>1919a8	77 7d b1 3b 4a 68 35 6e
>1919b0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>1919b8	b5 8f 44 63 55 6f e1 50
>1919c0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>1919c8	57 74 b9 bd 05 14 50 eb
>1919d0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>1919d8	44 bc ec db 22 58 fc be
>1919e0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>1919e8	24 aa 82 11 5c 9f 43 4d
>1919f0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>1919f8	3e 3d 66 7e 0a 1c 6b 74
.1ff000					FONT_4_BANK0
>1ff000	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>1ff008	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>1ff018	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>1ff028	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>1ff038	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>1ff048	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>1ff058	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>1ff068	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>1ff078	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>1ff088	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>1ff098	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>1ff0a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>1ff0b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>1ff0c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>1ff108	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>1ff118	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>1ff128	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>1ff138	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>1ff148	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>1ff158	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>1ff168	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>1ff178	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>1ff188	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>1ff198	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>1ff1a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>1ff1b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>1ff1c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>1ff1d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>1ff1e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>1ff1f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>1ff208	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>1ff218	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>1ff228	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>1ff238	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>1ff248	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>1ff258	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>1ff268	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>1ff278	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>1ff288	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>1ff298	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>1ff2a8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>1ff2b8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>1ff2c8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>1ff2d8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>1ff2e8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>1ff2f8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>1ff308	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>1ff318	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>1ff328	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>1ff338	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>1ff348	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>1ff358	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>1ff368	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>1ff378	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>1ff388	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>1ff398	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>1ff3a8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>1ff3b8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>1ff3c8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>1ff3d8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>1ff3e8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>1ff3f8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>1ff408	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>1ff418	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>1ff428	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>1ff438	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>1ff448	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>1ff458	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>1ff468	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>1ff478	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>1ff488	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>1ff498	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>1ff4a8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>1ff4b8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>1ff4c8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>1ff4d8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>1ff4e8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>1ff4f8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>1ff508	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>1ff518	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>1ff528	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>1ff538	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>1ff548	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>1ff558	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>1ff568	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>1ff578	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>1ff588	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>1ff598	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>1ff5a8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>1ff5b8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>1ff5c8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>1ff5d8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>1ff5e8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>1ff5f8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>1ff608	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>1ff618	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>1ff628	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>1ff638	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>1ff648	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>1ff658	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>1ff668	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>1ff678	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>1ff688	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>1ff698	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>1ff6a8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>1ff6b8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>1ff6c8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>1ff6d8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>1ff6e8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>1ff6f8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>1ff708	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>1ff718	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>1ff728	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>1ff738	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>1ff748	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>1ff758	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>1ff768	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>1ff778	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>1ff788	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>1ff798	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>1ff7a8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>1ff7b8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>1ff7c8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>1ff7d8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>1ff7e8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>1ff7f8	00 00 00 00 00 00 00 00

;******  End of listing
